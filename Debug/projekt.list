
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08007b90  08007b90  00017b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080cc  080080cc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d4  080080d4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080080dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001e8  080082c4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  080082c4  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e540  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002176  00000000  00000000  0002e79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  00031710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b9f  00000000  00000000  000321fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001090e  00000000  00000000  00054d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ae5  00000000  00000000  000656a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dbc  00000000  00000000  00138190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b74 	.word	0x08007b74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08007b74 	.word	0x08007b74

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <USART_fsend>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

void USART_fsend(char* format,...){//funkcja wysyłająca tekst do terminala
 8000fa4:	b40f      	push	{r0, r1, r2, r3}
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b0a4      	sub	sp, #144	; 0x90
 8000faa:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int idx;
	va_list arglist;
	va_start(arglist,format);
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs,format,arglist);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fcc1 	bl	8005944 <vsiprintf>
	va_end(arglist);
	idx=USART_TX_Empty;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <USART_fsend+0xdc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60bb      	str	r3, [r7, #8]
	for(i=0;i<strlen(tmp_rs);i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fce:	e016      	b.n	8000ffe <USART_fsend+0x5a>
	  USART_TxBuf[idx]=tmp_rs[i];
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f107 010c 	add.w	r1, r7, #12
 8000fd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fda:	440a      	add	r2, r1
 8000fdc:	7811      	ldrb	r1, [r2, #0]
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <USART_fsend+0xe0>)
 8000fe0:	54d1      	strb	r1, [r2, r3]
	  idx++;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
	  if(idx >= USART_TXBUF_LEN)idx=0;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fee:	db01      	blt.n	8000ff4 <USART_fsend+0x50>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
	for(i=0;i<strlen(tmp_rs);i++){
 8000ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f964 	bl	80002d0 <strlen>
 8001008:	4602      	mov	r2, r0
 800100a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800100e:	429a      	cmp	r2, r3
 8001010:	d8de      	bhi.n	8000fd0 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001012:	b672      	cpsid	i
}
 8001014:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <USART_fsend+0xdc>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <USART_fsend+0xe4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d122      	bne.n	8001068 <USART_fsend+0xc4>
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <USART_fsend+0xe8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102c:	2b80      	cmp	r3, #128	; 0x80
 800102e:	d11b      	bne.n	8001068 <USART_fsend+0xc4>
	  USART_TX_Empty=idx;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <USART_fsend+0xdc>)
 8001034:	6013      	str	r3, [r2, #0]
	  uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <USART_fsend+0xe4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <USART_fsend+0xe0>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	70fb      	strb	r3, [r7, #3]
	  USART_TX_Busy++;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <USART_fsend+0xe4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <USART_fsend+0xe4>)
 8001048:	6013      	str	r3, [r2, #0]
	  if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <USART_fsend+0xe4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001052:	db02      	blt.n	800105a <USART_fsend+0xb6>
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <USART_fsend+0xe4>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800105a:	1cfb      	adds	r3, r7, #3
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <USART_fsend+0xe8>)
 8001062:	f002 fedc 	bl	8003e1e <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001066:	e002      	b.n	800106e <USART_fsend+0xca>
	}else{
	  USART_TX_Empty=idx;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <USART_fsend+0xdc>)
 800106c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800106e:	b662      	cpsie	i
}
 8001070:	bf00      	nop
	}
	__enable_irq();
}
 8001072:	bf00      	nop
 8001074:	3790      	adds	r7, #144	; 0x90
 8001076:	46bd      	mov	sp, r7
 8001078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800107c:	b004      	add	sp, #16
 800107e:	4770      	bx	lr
 8001080:	20000420 	.word	0x20000420
 8001084:	20000290 	.word	0x20000290
 8001088:	20000424 	.word	0x20000424
 800108c:	2000024c 	.word	0x2000024c

08001090 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){//USART Callback nadawanie
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_UART_TxCpltCallback+0x58>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d11e      	bne.n	80010de <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_UART_TxCpltCallback+0x5c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d018      	beq.n	80010de <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_UART_TxCpltCallback+0x64>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010be:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN){
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010c8:	db02      	blt.n	80010d0 <HAL_UART_TxCpltCallback+0x40>
			   USART_TX_Busy=0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_UART_TxCpltCallback+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		   }
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <HAL_UART_TxCpltCallback+0x58>)
 80010da:	f002 fea0 	bl	8003e1e <HAL_UART_Transmit_IT>
	   }
   }
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000024c 	.word	0x2000024c
 80010ec:	20000420 	.word	0x20000420
 80010f0:	20000424 	.word	0x20000424
 80010f4:	20000290 	.word	0x20000290

080010f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){//USART Callback odbiór
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_UART_RxCpltCallback+0x44>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d115      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_UART_RxCpltCallback+0x48>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_UART_RxCpltCallback+0x48>)
 8001110:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=USART_RXBUF_LEN){
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_UART_RxCpltCallback+0x48>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800111a:	db02      	blt.n	8001122 <HAL_UART_RxCpltCallback+0x2a>
			 USART_RX_Empty=0;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_UART_RxCpltCallback+0x48>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
		 }
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_UART_RxCpltCallback+0x48>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_UART_RxCpltCallback+0x4c>)
 8001128:	4413      	add	r3, r2
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <HAL_UART_RxCpltCallback+0x44>)
 8001130:	f002 feba 	bl	8003ea8 <HAL_UART_Receive_IT>

	 }
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000024c 	.word	0x2000024c
 8001140:	200005b8 	.word	0x200005b8
 8001144:	20000428 	.word	0x20000428

08001148 <genChecksum>:

uint8_t genChecksum(char *data, size_t len)//funkcja do oblicznia sumy kontrolnej CRC-8
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
    size_t i, j;
    for (i = 0; i < len; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e021      	b.n	80011a0 <genChecksum+0x58>
        checksum ^= data[i];
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4413      	add	r3, r2
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	4053      	eors	r3, r2
 8001168:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	e011      	b.n	8001194 <genChecksum+0x4c>
            if ((checksum & 0x80) != 0){
 8001170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da07      	bge.n	8001188 <genChecksum+0x40>
                checksum = (uint8_t)((checksum << 1) ^ 0x07);
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b25b      	sxtb	r3, r3
 800117e:	f083 0307 	eor.w	r3, r3, #7
 8001182:	b25b      	sxtb	r3, r3
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	e002      	b.n	800118e <genChecksum+0x46>
            }else{
                checksum <<= 1;
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b07      	cmp	r3, #7
 8001198:	d9ea      	bls.n	8001170 <genChecksum+0x28>
    for (i = 0; i < len; i++) {
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d3d9      	bcc.n	800115c <genChecksum+0x14>
            }
        }
    }
    return checksum;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <compareChecksums>:

int compareChecksums(char *frameChecksum, uint8_t generatedChecksum){//funkcja do sprawdzania poprawności sumy kontrolnej
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
	int frameChecksumInt = (int)strtol(frameChecksum, NULL, 16);
 80011c2:	2210      	movs	r2, #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 fe10 	bl	8004dec <strtol>
 80011cc:	60f8      	str	r0, [r7, #12]
	if(frameChecksumInt == generatedChecksum){
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d101      	bne.n	80011da <compareChecksums+0x24>
		return 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <compareChecksums+0x26>
	}else{
		return 0;
 80011da:	2300      	movs	r3, #0
	}
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <checkCharacters>:

int checkCharacters(char *txt, int isChecksum){//funkcja do sprawdzenia czy w pola Nadawca, Odbiorca, Komenda oraz Suma kontrolna wpisano dozwolone znaki
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	size_t len = strlen(txt);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f86e 	bl	80002d0 <strlen>
 80011f4:	60f8      	str	r0, [r7, #12]
	if(isChecksum){//suma kontrolna ma inny zakres znaków
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d025      	beq.n	8001248 <checkCharacters+0x64>
		for(size_t i = 0; i < len; i++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e01c      	b.n	800123c <checkCharacters+0x58>
			if((txt[i] < '0' || txt[i] > '9') && (txt[i] < 'A' || txt[i] > 'F')){
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d905      	bls.n	800121a <checkCharacters+0x36>
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b39      	cmp	r3, #57	; 0x39
 8001218:	d90d      	bls.n	8001236 <checkCharacters+0x52>
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d905      	bls.n	8001232 <checkCharacters+0x4e>
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b46      	cmp	r3, #70	; 0x46
 8001230:	d901      	bls.n	8001236 <checkCharacters+0x52>
				return 0; //jeśli jakiś znak nie jest w zakresie, to zwracane jest 0
 8001232:	2300      	movs	r3, #0
 8001234:	e021      	b.n	800127a <checkCharacters+0x96>
		for(size_t i = 0; i < len; i++){
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3de      	bcc.n	8001202 <checkCharacters+0x1e>
			}
		}
		return 1; //jeśli wszystkie znaki są w zakresie to zwracane jest 1
 8001244:	2301      	movs	r3, #1
 8001246:	e018      	b.n	800127a <checkCharacters+0x96>
	}else{
		for(size_t i = 0; i < len; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	e010      	b.n	8001270 <checkCharacters+0x8c>
			if(txt[i] < 'A' || txt[i] > 'Z'){
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b40      	cmp	r3, #64	; 0x40
 8001258:	d905      	bls.n	8001266 <checkCharacters+0x82>
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b5a      	cmp	r3, #90	; 0x5a
 8001264:	d901      	bls.n	800126a <checkCharacters+0x86>
				return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e007      	b.n	800127a <checkCharacters+0x96>
		for(size_t i = 0; i < len; i++){
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3ea      	bcc.n	800124e <checkCharacters+0x6a>
			}
		}
		return 1;
 8001278:	2301      	movs	r3, #1
	}
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <checkSenderAndReceiver>:

int checkSenderAndReceiver(char *sender, char *receiver){ //funkcja do sprawdzania czy adresy nadawcy i odbiorcy są prawidłowe
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	if((!strcmp(sender, "HST")) && (!strcmp(receiver, "STM"))){
 800128e:	490a      	ldr	r1, [pc, #40]	; (80012b8 <checkSenderAndReceiver+0x34>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7fe ffbd 	bl	8000210 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <checkSenderAndReceiver+0x2a>
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <checkSenderAndReceiver+0x38>)
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f7fe ffb6 	bl	8000210 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <checkSenderAndReceiver+0x2a>
		return 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <checkSenderAndReceiver+0x2c>
	}else{
		return 0;
 80012ae:	2300      	movs	r3, #0
	}
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08007b90 	.word	0x08007b90
 80012bc:	08007b94 	.word	0x08007b94

080012c0 <usDelay>:

//ONE WIRE ORAZ OBSLUGA DS18B20
void usDelay(int us){//opóźnienie w mikrosekundach za pomocą TIM6
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6, 0);//zerowanie licznika timera
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <usDelay+0x2c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us){}//odczytywanie stanu licznika, który jest zwiększany co 1us
 80012d0:	bf00      	nop
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <usDelay+0x2c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3f9      	bcc.n	80012d2 <usDelay+0x12>
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000204 	.word	0x20000204

080012f0 <wireReset>:

HAL_StatusTypeDef wireReset(){//generowanie sekwencji reset (rozpoczęcie komunikacji), opóźnienia zgodne ze specyfikacją
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	int rc;
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <wireReset+0x50>)
 80012fc:	f001 fd6c 	bl	8002dd8 <HAL_GPIO_WritePin>
	usDelay(480);
 8001300:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001304:	f7ff ffdc 	bl	80012c0 <usDelay>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2101      	movs	r1, #1
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <wireReset+0x50>)
 800130e:	f001 fd63 	bl	8002dd8 <HAL_GPIO_WritePin>
	usDelay(70);
 8001312:	2046      	movs	r0, #70	; 0x46
 8001314:	f7ff ffd4 	bl	80012c0 <usDelay>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001318:	2101      	movs	r1, #1
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <wireReset+0x50>)
 800131c:	f001 fd44 	bl	8002da8 <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	607b      	str	r3, [r7, #4]
	usDelay(410);
 8001324:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001328:	f7ff ffca 	bl	80012c0 <usDelay>
	if(rc == 0){
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <wireReset+0x46>
		return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <wireReset+0x48>
	}else{
		return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
	}
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020000 	.word	0x40020000

08001344 <writeBit>:

void writeBit(int value){//funkcja wysyłająca pojedyncze bity
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(value){//wysyłanie 1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d010      	beq.n	8001374 <writeBit+0x30>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2101      	movs	r1, #1
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <writeBit+0x58>)
 8001358:	f001 fd3e 	bl	8002dd8 <HAL_GPIO_WritePin>
		usDelay(6);
 800135c:	2006      	movs	r0, #6
 800135e:	f7ff ffaf 	bl	80012c0 <usDelay>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <writeBit+0x58>)
 8001368:	f001 fd36 	bl	8002dd8 <HAL_GPIO_WritePin>
		usDelay(64);
 800136c:	2040      	movs	r0, #64	; 0x40
 800136e:	f7ff ffa7 	bl	80012c0 <usDelay>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
		usDelay(60);
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
		usDelay(10);
	}
}
 8001372:	e00f      	b.n	8001394 <writeBit+0x50>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2101      	movs	r1, #1
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <writeBit+0x58>)
 800137a:	f001 fd2d 	bl	8002dd8 <HAL_GPIO_WritePin>
		usDelay(60);
 800137e:	203c      	movs	r0, #60	; 0x3c
 8001380:	f7ff ff9e 	bl	80012c0 <usDelay>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2101      	movs	r1, #1
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <writeBit+0x58>)
 800138a:	f001 fd25 	bl	8002dd8 <HAL_GPIO_WritePin>
		usDelay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f7ff ff96 	bl	80012c0 <usDelay>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020000 	.word	0x40020000

080013a0 <readBit>:

int readBit(){//funkcja odczytująca pojedyncze bity
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	int rc;
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2101      	movs	r1, #1
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <readBit+0x44>)
 80013ac:	f001 fd14 	bl	8002dd8 <HAL_GPIO_WritePin>
	usDelay(6);
 80013b0:	2006      	movs	r0, #6
 80013b2:	f7ff ff85 	bl	80012c0 <usDelay>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2101      	movs	r1, #1
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <readBit+0x44>)
 80013bc:	f001 fd0c 	bl	8002dd8 <HAL_GPIO_WritePin>
	usDelay(9);
 80013c0:	2009      	movs	r0, #9
 80013c2:	f7ff ff7d 	bl	80012c0 <usDelay>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80013c6:	2101      	movs	r1, #1
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <readBit+0x44>)
 80013ca:	f001 fced 	bl	8002da8 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	607b      	str	r3, [r7, #4]
	usDelay(55);
 80013d2:	2037      	movs	r0, #55	; 0x37
 80013d4:	f7ff ff74 	bl	80012c0 <usDelay>
	return rc;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020000 	.word	0x40020000

080013e8 <wireWrite>:

void wireWrite(uint8_t byte){//funkcja pisząca cały bajt
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i = 0; i < 8; i++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e00b      	b.n	8001410 <wireWrite+0x28>
		writeBit(byte & 0x01);//wysyłanie najmniej znaczącego bitu
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffa0 	bl	8001344 <writeBit>
		byte >>=1;//przesunięcie w prawo
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b07      	cmp	r3, #7
 8001414:	ddf0      	ble.n	80013f8 <wireWrite+0x10>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <wireRead>:

uint8_t wireRead(){//zczytywanie całego bajtu
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i = 0; i < 8; i++){
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	e00e      	b.n	800144e <wireRead+0x2e>
		value >>= 1;//przesunięcie w prawo
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
		if(readBit()){//jeśli bit wynosi 1
 8001436:	f7ff ffb3 	bl	80013a0 <readBit>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <wireRead+0x28>
			value |= 0x80;//ustawienie MSB na 1
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001446:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < 8; i++){
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b07      	cmp	r3, #7
 8001452:	dded      	ble.n	8001430 <wireRead+0x10>
		}
	}
	return value;
 8001454:	79fb      	ldrb	r3, [r7, #7]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <searchROM>:

void searchROM() {//funkcja wyszukująca adresy urządzeń na oneWire
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	b08b      	sub	sp, #44	; 0x2c
 8001466:	af00      	add	r7, sp, #0
	static uint8_t last_discrepancy = 0;
	    uint8_t discrepancy_marker = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    uint8_t bit_position;
	    uint8_t bit_a;
	    uint8_t bit_b;
	    uint8_t byte_counter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
	    uint8_t bit_counter = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    uint8_t rom_byte = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    uint8_t search_result;
	    uint64_t rom_code = 0;
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e9c7 2306 	strd	r2, r3, [r7, #24]

	    if (wireReset() == HAL_ERROR) {
 800148a:	f7ff ff31 	bl	80012f0 <wireReset>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	f000 80be 	beq.w	8001612 <searchROM+0x1b2>
	        return; // No devices in the bus
	    }

	    wireWrite(0xF0); // Send SEARCH ROM command
 8001496:	20f0      	movs	r0, #240	; 0xf0
 8001498:	f7ff ffa6 	bl	80013e8 <wireWrite>

	    bit_position = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	    do {
	        bit_a = readBit();
 80014a2:	f7ff ff7d 	bl	80013a0 <readBit>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75bb      	strb	r3, [r7, #22]
	        bit_b = readBit();
 80014aa:	f7ff ff79 	bl	80013a0 <readBit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	757b      	strb	r3, [r7, #21]

	        if (bit_a && bit_b) {
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <searchROM+0x60>
 80014b8:	7d7b      	ldrb	r3, [r7, #21]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8093 	bne.w	80015e6 <searchROM+0x186>
	            break; // No devices in the bus
	        } else {
	            if (bit_a ^ bit_b) { // Bit write required (1 bit)
 80014c0:	7dba      	ldrb	r2, [r7, #22]
 80014c2:	7d7b      	ldrb	r3, [r7, #21]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d003      	beq.n	80014d0 <searchROM+0x70>
	                search_result = bit_a;  // Bit is already known
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80014ce:	e03d      	b.n	800154c <searchROM+0xec>
	            } else { // Bit write required (0 bit)
	                if (bit_position < last_discrepancy) {
 80014d0:	4b52      	ldr	r3, [pc, #328]	; (800161c <searchROM+0x1bc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014d8:	429a      	cmp	r2, r3
 80014da:	d224      	bcs.n	8001526 <searchROM+0xc6>
	                    search_result = ((rom_code & ((uint64_t)1 << bit_position)) > 0);
 80014dc:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80014e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e4:	f1c0 0620 	rsb	r6, r0, #32
 80014e8:	f1a0 0120 	sub.w	r1, r0, #32
 80014ec:	fa22 f800 	lsr.w	r8, r2, r0
 80014f0:	fa03 f606 	lsl.w	r6, r3, r6
 80014f4:	ea48 0806 	orr.w	r8, r8, r6
 80014f8:	fa23 f101 	lsr.w	r1, r3, r1
 80014fc:	ea48 0801 	orr.w	r8, r8, r1
 8001500:	fa23 f900 	lsr.w	r9, r3, r0
 8001504:	f008 0301 	and.w	r3, r8, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001512:	460b      	mov	r3, r1
 8001514:	4313      	orrs	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001524:	e00a      	b.n	800153c <searchROM+0xdc>
	                } else {
	                    search_result = (bit_position == last_discrepancy);
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <searchROM+0x1bc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800152e:	429a      	cmp	r2, r3
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	                }
	                if (search_result == 0) {
 800153c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <searchROM+0xec>
	                    discrepancy_marker = bit_position;
 8001544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	                }
	            }

	            rom_code |= ((uint64_t)search_result) << bit_position;
 800154c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001550:	2200      	movs	r2, #0
 8001552:	469a      	mov	sl, r3
 8001554:	4693      	mov	fp, r2
 8001556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800155a:	f1a3 0120 	sub.w	r1, r3, #32
 800155e:	f1c3 0220 	rsb	r2, r3, #32
 8001562:	fa0b f503 	lsl.w	r5, fp, r3
 8001566:	fa0a f101 	lsl.w	r1, sl, r1
 800156a:	430d      	orrs	r5, r1
 800156c:	fa2a f202 	lsr.w	r2, sl, r2
 8001570:	4315      	orrs	r5, r2
 8001572:	fa0a f403 	lsl.w	r4, sl, r3
 8001576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800157a:	ea42 0104 	orr.w	r1, r2, r4
 800157e:	6039      	str	r1, [r7, #0]
 8001580:	432b      	orrs	r3, r5
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001588:	e9c7 2306 	strd	r2, r3, [r7, #24]

	            writeBit(search_result);  // Write bit to bus
 800158c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fed7 	bl	8001344 <writeBit>

	            bit_position++;
 8001596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800159a:	3301      	adds	r3, #1
 800159c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	            bit_counter++;
 80015a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	            rom_byte >>= 1;
 80015aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	            if (search_result) {
 80015b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <searchROM+0x168>
	                rom_byte |= 0x80;
 80015bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	            }

	            if (bit_counter == 8) {  // Next byte
 80015c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d105      	bne.n	80015dc <searchROM+0x17c>
	                bit_counter = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	                rom_byte = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	            }
	        }
	    } while (bit_position < 64);
 80015dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e0:	2b3f      	cmp	r3, #63	; 0x3f
 80015e2:	f67f af5e 	bls.w	80014a2 <searchROM+0x42>

	    if (!(rom_code == 0)) {
 80015e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	d00c      	beq.n	8001608 <searchROM+0x1a8>
	        devices[devicesFound++] = rom_code;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <searchROM+0x1c0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	b2d1      	uxtb	r1, r2
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <searchROM+0x1c0>)
 80015f8:	7011      	strb	r1, [r2, #0]
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <searchROM+0x1c4>)
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	18d1      	adds	r1, r2, r3
 8001600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
	    }

	    last_discrepancy = discrepancy_marker;
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <searchROM+0x1bc>)
 800160a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160e:	7013      	strb	r3, [r2, #0]

	    return;
 8001610:	e000      	b.n	8001614 <searchROM+0x1b4>
	        return; // No devices in the bus
 8001612:	bf00      	nop
}
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800161c:	200006f8 	.word	0x200006f8
 8001620:	200006a4 	.word	0x200006a4
 8001624:	200006a8 	.word	0x200006a8

08001628 <measureTemp>:


void measureTemp(){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
	static uint32_t lastMeasurementTime = 0;
	uint32_t currentTime = HAL_GetTick();//czas od uruchomienia programu (w ms)
 800162e:	f001 f877 	bl	8002720 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

	if((currentTime - lastMeasurementTime >= measurementInterval) || currentTime == 0){//sprawdzanie czy upłynęło wystarczająco dużo czasu
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <measureTemp+0xa8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <measureTemp+0xac>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4293      	cmp	r3, r2
 8001642:	d202      	bcs.n	800164a <measureTemp+0x22>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d13d      	bne.n	80016c6 <measureTemp+0x9e>
		wireReset();//wysyłanie sekwencji resetującej
 800164a:	f7ff fe51 	bl	80012f0 <wireReset>
		wireWrite(0xcc);//polecenie Skip ROM (pominięcie adresowania)
 800164e:	20cc      	movs	r0, #204	; 0xcc
 8001650:	f7ff feca 	bl	80013e8 <wireWrite>
		wireWrite(0x44);//polecenie Convert T (rozpoczęcie pomiaru)
 8001654:	2044      	movs	r0, #68	; 0x44
 8001656:	f7ff fec7 	bl	80013e8 <wireWrite>

		while (wireRead() == 0); //oczekiwanie na zakończenie pomiaru
 800165a:	bf00      	nop
 800165c:	f7ff fee0 	bl	8001420 <wireRead>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0fa      	beq.n	800165c <measureTemp+0x34>

		wireReset();
 8001666:	f7ff fe43 	bl	80012f0 <wireReset>
		wireWrite(0xcc);//polecenie SkipRom
 800166a:	20cc      	movs	r0, #204	; 0xcc
 800166c:	f7ff febc 	bl	80013e8 <wireWrite>
		wireWrite(0xbe);//polecenie Read Scratchpad (odczyt)
 8001670:	20be      	movs	r0, #190	; 0xbe
 8001672:	f7ff feb9 	bl	80013e8 <wireWrite>

		int i;
		uint8_t scratchpad[9];//tablica przechowująca odczyt
		for(i = 0; i < 9; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e00b      	b.n	8001694 <measureTemp+0x6c>
			scratchpad[i] = wireRead();//zapisywanie do tablicy
 800167c:	f7ff fed0 	bl	8001420 <wireRead>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	463a      	mov	r2, r7
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	4413      	add	r3, r2
 800168a:	460a      	mov	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 9; i++){
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b08      	cmp	r3, #8
 8001698:	ddf0      	ble.n	800167c <measureTemp+0x54>
		}

		float result = (scratchpad[1] << 8) | scratchpad[0];//składanie 2 najbardziej znaczących bajtów w jedną liczbę
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	783a      	ldrb	r2, [r7, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
		lastTemp = result/16;//aby uzyskać temperaturę w stopniach Celsjusza należy podzielić wynik przez 16
 80016ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80016b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <measureTemp+0xb0>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
		lastMeasurementTime = currentTime;//aktualizowanie ostatniego czasu pomiaru
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <measureTemp+0xa8>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6013      	str	r3, [r2, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200006fc 	.word	0x200006fc
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	200006a0 	.word	0x200006a0

080016dc <wrongCmd>:

//KOMENDY I KOMUNIKATY ZWROTNE
void wrongCmd(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	; 0x38
 80016e0:	af00      	add	r7, sp, #0
	char frame[50];
	uint8_t checksum = genChecksum("STMHSTWCD", strlen("STMHSTWCD"));
 80016e2:	2109      	movs	r1, #9
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <wrongCmd+0x34>)
 80016e6:	f7ff fd2f 	bl	8001148 <genChecksum>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sprintf(frame, ":STMHSTWCD%X;", checksum);
 80016f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4907      	ldr	r1, [pc, #28]	; (8001714 <wrongCmd+0x38>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 f8a9 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <wrongCmd+0x3c>)
 8001704:	f7ff fc4e 	bl	8000fa4 <USART_fsend>
}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	; 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08007b98 	.word	0x08007b98
 8001714:	08007ba4 	.word	0x08007ba4
 8001718:	08007bb4 	.word	0x08007bb4

0800171c <wrongDataFormat>:

void wrongDataFormat(){
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	; 0x38
 8001720:	af00      	add	r7, sp, #0
	char frame[50];
	uint8_t checksum = genChecksum("STMHSTWDF", strlen("STMHSTWDF"));
 8001722:	2109      	movs	r1, #9
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <wrongDataFormat+0x34>)
 8001726:	f7ff fd0f 	bl	8001148 <genChecksum>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sprintf(frame, ":STMHSTWDF%02X;", checksum);
 8001730:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4907      	ldr	r1, [pc, #28]	; (8001754 <wrongDataFormat+0x38>)
 8001738:	4618      	mov	r0, r3
 800173a:	f004 f889 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <wrongDataFormat+0x3c>)
 8001744:	f7ff fc2e 	bl	8000fa4 <USART_fsend>
}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08007bc0 	.word	0x08007bc0
 8001754:	08007bcc 	.word	0x08007bcc
 8001758:	08007bb4 	.word	0x08007bb4

0800175c <wrongDataRange>:

void wrongDataRange(){
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	; 0x38
 8001760:	af00      	add	r7, sp, #0
	char frame[50];
	uint8_t checksum = genChecksum("STMHSTWDR", strlen("STMHSTWDR"));
 8001762:	2109      	movs	r1, #9
 8001764:	480a      	ldr	r0, [pc, #40]	; (8001790 <wrongDataRange+0x34>)
 8001766:	f7ff fcef 	bl	8001148 <genChecksum>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sprintf(frame, ":STMHSTWDR%02X;", checksum);
 8001770:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4907      	ldr	r1, [pc, #28]	; (8001794 <wrongDataRange+0x38>)
 8001778:	4618      	mov	r0, r3
 800177a:	f004 f869 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <wrongDataRange+0x3c>)
 8001784:	f7ff fc0e 	bl	8000fa4 <USART_fsend>
}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08007bdc 	.word	0x08007bdc
 8001794:	08007be8 	.word	0x08007be8
 8001798:	08007bb4 	.word	0x08007bb4

0800179c <changeMeasurementInterval>:

void changeMeasurementInterval(char *newInterval){ //zmiana interwału pomiarowego
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	char *endptr;
	int intervalInt = (int)strtol(newInterval, &endptr, 10);
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	220a      	movs	r2, #10
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f003 fb1d 	bl	8004dec <strtol>
 80017b2:	60f8      	str	r0, [r7, #12]
	if(*endptr != '\0'){
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <changeMeasurementInterval+0x26>
		wrongDataFormat();
 80017bc:	f7ff ffae 	bl	800171c <wrongDataFormat>
			measurementInterval = intervalInt;
		}else{
			wrongDataRange();
		}
	}
}
 80017c0:	e00e      	b.n	80017e0 <changeMeasurementInterval+0x44>
		if(intervalInt >= 500 && intervalInt <= 60000){
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017c8:	db08      	blt.n	80017dc <changeMeasurementInterval+0x40>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80017d0:	4293      	cmp	r3, r2
 80017d2:	dc03      	bgt.n	80017dc <changeMeasurementInterval+0x40>
			measurementInterval = intervalInt;
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <changeMeasurementInterval+0x4c>)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	e001      	b.n	80017e0 <changeMeasurementInterval+0x44>
			wrongDataRange();
 80017dc:	f7ff ffbe 	bl	800175c <wrongDataRange>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000000c 	.word	0x2000000c

080017ec <getMeasurementInterval>:

void getMeasurementInterval(){ //odczyt interwału pomiarowego
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09a      	sub	sp, #104	; 0x68
 80017f0:	af00      	add	r7, sp, #0
	char frame[50];
	char dataForChecksum[50];
	uint8_t checksum;
	sprintf(dataForChecksum, "STMHSTCMI=%d", measurementInterval);
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <getMeasurementInterval+0x54>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	463b      	mov	r3, r7
 80017f8:	4912      	ldr	r1, [pc, #72]	; (8001844 <getMeasurementInterval+0x58>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 f828 	bl	8005850 <siprintf>
	checksum = genChecksum(dataForChecksum, strlen(dataForChecksum));
 8001800:	463b      	mov	r3, r7
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fd64 	bl	80002d0 <strlen>
 8001808:	4602      	mov	r2, r0
 800180a:	463b      	mov	r3, r7
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc9a 	bl	8001148 <genChecksum>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(frame, ":STMHSTCMI=%d%02X;", measurementInterval, checksum);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <getMeasurementInterval+0x54>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001822:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <getMeasurementInterval+0x5c>)
 8001828:	f004 f812 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 800182c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <getMeasurementInterval+0x60>)
 8001834:	f7ff fbb6 	bl	8000fa4 <USART_fsend>
}
 8001838:	bf00      	nop
 800183a:	3768      	adds	r7, #104	; 0x68
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000000c 	.word	0x2000000c
 8001844:	08007bf8 	.word	0x08007bf8
 8001848:	08007c08 	.word	0x08007c08
 800184c:	08007bb4 	.word	0x08007bb4

08001850 <changeTmpUnit>:

void changeTmpUnit(char newUnit){ //zmiana jednostki temperatury
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	tempUnit = newUnit;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <changeTmpUnit+0x1c>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	7013      	strb	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000010 	.word	0x20000010

08001870 <getCurrentTmpUnit>:

void getCurrentTmpUnit(){ //odczyt ustawionej jednostki temperatury
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	; 0x68
 8001874:	af00      	add	r7, sp, #0
	char frame[50];
	char dataForChecksum[50];
	uint8_t checksum;
	sprintf(dataForChecksum, "STMHSTCTU%c", tempUnit);
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <getCurrentTmpUnit+0x58>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	463b      	mov	r3, r7
 800187e:	4913      	ldr	r1, [pc, #76]	; (80018cc <getCurrentTmpUnit+0x5c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f003 ffe5 	bl	8005850 <siprintf>
	checksum = genChecksum(dataForChecksum, strlen(dataForChecksum));
 8001886:	463b      	mov	r3, r7
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fd21 	bl	80002d0 <strlen>
 800188e:	4602      	mov	r2, r0
 8001890:	463b      	mov	r3, r7
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fc57 	bl	8001148 <genChecksum>
 800189a:	4603      	mov	r3, r0
 800189c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(frame, ":STMHSTCTU%c%02X;", tempUnit, checksum);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <getCurrentTmpUnit+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018aa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <getCurrentTmpUnit+0x60>)
 80018b0:	f003 ffce 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 80018b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <getCurrentTmpUnit+0x64>)
 80018bc:	f7ff fb72 	bl	8000fa4 <USART_fsend>
}
 80018c0:	bf00      	nop
 80018c2:	3768      	adds	r7, #104	; 0x68
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000010 	.word	0x20000010
 80018cc:	08007c1c 	.word	0x08007c1c
 80018d0:	08007c28 	.word	0x08007c28
 80018d4:	08007bb4 	.word	0x08007bb4

080018d8 <getTemperature>:

void getTemperature(){//odczyt temperatury
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b09f      	sub	sp, #124	; 0x7c
 80018dc:	af02      	add	r7, sp, #8
	char frame[50];
	char dataForChecksum[50];
	uint8_t checksum;
	float temperature;
	switch(tempUnit){
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <getTemperature+0xe0>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b4b      	cmp	r3, #75	; 0x4b
 80018e4:	d01c      	beq.n	8001920 <getTemperature+0x48>
 80018e6:	2b4b      	cmp	r3, #75	; 0x4b
 80018e8:	dc2d      	bgt.n	8001946 <getTemperature+0x6e>
 80018ea:	2b43      	cmp	r3, #67	; 0x43
 80018ec:	d002      	beq.n	80018f4 <getTemperature+0x1c>
 80018ee:	2b46      	cmp	r3, #70	; 0x46
 80018f0:	d004      	beq.n	80018fc <getTemperature+0x24>
 80018f2:	e028      	b.n	8001946 <getTemperature+0x6e>
		case 'C':
			temperature = lastTemp;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <getTemperature+0xe4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 80018fa:	e024      	b.n	8001946 <getTemperature+0x6e>
		case 'F':
			temperature = (lastTemp * 9/5) + 32;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <getTemperature+0xe4>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001906:	ee27 7a87 	vmul.f32	s14, s15, s14
 800190a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800190e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001912:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80019c0 <getTemperature+0xe8>
 8001916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			break;
 800191e:	e012      	b.n	8001946 <getTemperature+0x6e>
		case 'K':
			temperature = lastTemp + 273.15;
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <getTemperature+0xe4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe3f 	bl	80005a8 <__aeabi_f2d>
 800192a:	a321      	add	r3, pc, #132	; (adr r3, 80019b0 <getTemperature+0xd8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fcdc 	bl	80002ec <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f964 	bl	8000c08 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
 8001942:	66fb      	str	r3, [r7, #108]	; 0x6c
			break;
 8001944:	bf00      	nop
	}
	sprintf(dataForChecksum, "STMHSTTMP=%0.2f%c", temperature, tempUnit);
 8001946:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001948:	f7fe fe2e 	bl	80005a8 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4919      	ldr	r1, [pc, #100]	; (80019b8 <getTemperature+0xe0>)
 8001952:	7809      	ldrb	r1, [r1, #0]
 8001954:	1d38      	adds	r0, r7, #4
 8001956:	9100      	str	r1, [sp, #0]
 8001958:	491a      	ldr	r1, [pc, #104]	; (80019c4 <getTemperature+0xec>)
 800195a:	f003 ff79 	bl	8005850 <siprintf>
	checksum = genChecksum(dataForChecksum, strlen(dataForChecksum));
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fcb5 	bl	80002d0 <strlen>
 8001966:	4602      	mov	r2, r0
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbeb 	bl	8001148 <genChecksum>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	sprintf(frame, ":STMHSTTMP=%0.2f%c%02X;", temperature, tempUnit, checksum);
 8001978:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800197a:	f7fe fe15 	bl	80005a8 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <getTemperature+0xe0>)
 8001984:	7809      	ldrb	r1, [r1, #0]
 8001986:	460c      	mov	r4, r1
 8001988:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 800198c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001990:	9101      	str	r1, [sp, #4]
 8001992:	9400      	str	r4, [sp, #0]
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <getTemperature+0xf0>)
 8001996:	f003 ff5b 	bl	8005850 <siprintf>
	USART_fsend("STM->%s\r\n", frame);
 800199a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199e:	4619      	mov	r1, r3
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <getTemperature+0xf4>)
 80019a2:	f7ff faff 	bl	8000fa4 <USART_fsend>
}
 80019a6:	bf00      	nop
 80019a8:	3774      	adds	r7, #116	; 0x74
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	66666666 	.word	0x66666666
 80019b4:	40711266 	.word	0x40711266
 80019b8:	20000010 	.word	0x20000010
 80019bc:	200006a0 	.word	0x200006a0
 80019c0:	42000000 	.word	0x42000000
 80019c4:	08007c3c 	.word	0x08007c3c
 80019c8:	08007c50 	.word	0x08007c50
 80019cc:	08007bb4 	.word	0x08007bb4

080019d0 <searchOneWire>:

void searchOneWire(){//wyszukiwanie urządzeń na oneWire
 80019d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019d4:	b0ab      	sub	sp, #172	; 0xac
 80019d6:	af08      	add	r7, sp, #32
	searchROM();
 80019d8:	f7ff fd42 	bl	8001460 <searchROM>
	int i, j;
	for (i = 0; i < devicesFound; i++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019e2:	e094      	b.n	8001b0e <searchOneWire+0x13e>
		char frame[50];
		char dataForChecksum[50];
		uint8_t checksum;
		uint8_t rom[8];//tablica przechowująca adres jednego urządzenia
		for (j = 0; j < 8; j++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019ea:	e027      	b.n	8001a3c <searchOneWire+0x6c>
			rom[j] = (uint8_t)(devices[i] >> (j * 8));//przepisywanie adresu jednego urządzenia
 80019ec:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <searchOneWire+0x15c>)
 80019ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80019fe:	00c9      	lsls	r1, r1, #3
 8001a00:	f1c1 0620 	rsb	r6, r1, #32
 8001a04:	f1a1 0020 	sub.w	r0, r1, #32
 8001a08:	fa22 f801 	lsr.w	r8, r2, r1
 8001a0c:	fa03 f606 	lsl.w	r6, r3, r6
 8001a10:	ea48 0806 	orr.w	r8, r8, r6
 8001a14:	fa23 f000 	lsr.w	r0, r3, r0
 8001a18:	ea48 0800 	orr.w	r8, r8, r0
 8001a1c:	fa23 f901 	lsr.w	r9, r3, r1
 8001a20:	fa5f f188 	uxtb.w	r1, r8
 8001a24:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a2c:	4413      	add	r3, r2
 8001a2e:	460a      	mov	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8001a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a36:	3301      	adds	r3, #1
 8001a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	ddd3      	ble.n	80019ec <searchOneWire+0x1c>
		}
		sprintf(dataForChecksum, "STMHSTOWR%02X%02X%02X%02X%02X%02X%02X%02X", rom[0], rom[1], rom[2], rom[3], rom[4], rom[5], rom[6], rom[7]);
 8001a44:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001a48:	469c      	mov	ip, r3
 8001a4a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001a4e:	469e      	mov	lr, r3
 8001a50:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001a54:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8001a58:	f897 1078 	ldrb.w	r1, [r7, #120]	; 0x78
 8001a5c:	f897 0079 	ldrb.w	r0, [r7, #121]	; 0x79
 8001a60:	4606      	mov	r6, r0
 8001a62:	f897 007a 	ldrb.w	r0, [r7, #122]	; 0x7a
 8001a66:	4605      	mov	r5, r0
 8001a68:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a72:	9405      	str	r4, [sp, #20]
 8001a74:	9504      	str	r5, [sp, #16]
 8001a76:	9603      	str	r6, [sp, #12]
 8001a78:	9102      	str	r1, [sp, #8]
 8001a7a:	9201      	str	r2, [sp, #4]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4673      	mov	r3, lr
 8001a80:	4662      	mov	r2, ip
 8001a82:	492b      	ldr	r1, [pc, #172]	; (8001b30 <searchOneWire+0x160>)
 8001a84:	f003 fee4 	bl	8005850 <siprintf>
		checksum = genChecksum(dataForChecksum, strlen(dataForChecksum));
 8001a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fc1f 	bl	80002d0 <strlen>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fb54 	bl	8001148 <genChecksum>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		sprintf(frame, ":STMHSTOWR%02X%02X%02X%02X%02X%02X%02X%02X%02X;", rom[0], rom[1], rom[2], rom[3], rom[4], rom[5], rom[6], rom[7], checksum);
 8001aa6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001aaa:	469c      	mov	ip, r3
 8001aac:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001abc:	4619      	mov	r1, r3
 8001abe:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8001ac2:	461e      	mov	r6, r3
 8001ac4:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001ace:	461d      	mov	r5, r3
 8001ad0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ada:	f107 000c 	add.w	r0, r7, #12
 8001ade:	9306      	str	r3, [sp, #24]
 8001ae0:	9405      	str	r4, [sp, #20]
 8001ae2:	9504      	str	r5, [sp, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	9303      	str	r3, [sp, #12]
 8001ae8:	9602      	str	r6, [sp, #8]
 8001aea:	9101      	str	r1, [sp, #4]
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	4673      	mov	r3, lr
 8001af0:	4662      	mov	r2, ip
 8001af2:	4910      	ldr	r1, [pc, #64]	; (8001b34 <searchOneWire+0x164>)
 8001af4:	f003 feac 	bl	8005850 <siprintf>
		USART_fsend("STM->%s\r\n", frame);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <searchOneWire+0x168>)
 8001b00:	f7ff fa50 	bl	8000fa4 <USART_fsend>
	for (i = 0; i < devicesFound; i++) {
 8001b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <searchOneWire+0x16c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f6ff af63 	blt.w	80019e4 <searchOneWire+0x14>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	378c      	adds	r7, #140	; 0x8c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200006a8 	.word	0x200006a8
 8001b30:	08007c68 	.word	0x08007c68
 8001b34:	08007c94 	.word	0x08007c94
 8001b38:	08007bb4 	.word	0x08007bb4
 8001b3c:	200006a4 	.word	0x200006a4

08001b40 <analyzeCommand>:

void analyzeCommand(char *cmd, char *data){//analiza komendy
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	if(!strcmp(cmd, "SMI")){
 8001b4a:	492d      	ldr	r1, [pc, #180]	; (8001c00 <analyzeCommand+0xc0>)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7fe fb5f 	bl	8000210 <strcmp>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d103      	bne.n	8001b60 <analyzeCommand+0x20>
		changeMeasurementInterval(data);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff fe1f 	bl	800179c <changeMeasurementInterval>
	}else if(!strcmp(cmd, "GTU")){
		getCurrentTmpUnit();
	}else{
		wrongCmd();
	}
}
 8001b5e:	e04a      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "GMI")){
 8001b60:	4928      	ldr	r1, [pc, #160]	; (8001c04 <analyzeCommand+0xc4>)
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fb54 	bl	8000210 <strcmp>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <analyzeCommand+0x34>
		getMeasurementInterval();
 8001b6e:	f7ff fe3d 	bl	80017ec <getMeasurementInterval>
}
 8001b72:	e040      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "GTM")){
 8001b74:	4924      	ldr	r1, [pc, #144]	; (8001c08 <analyzeCommand+0xc8>)
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe fb4a 	bl	8000210 <strcmp>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <analyzeCommand+0x48>
		getTemperature();
 8001b82:	f7ff fea9 	bl	80018d8 <getTemperature>
}
 8001b86:	e036      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "SOW")){
 8001b88:	4920      	ldr	r1, [pc, #128]	; (8001c0c <analyzeCommand+0xcc>)
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fb40 	bl	8000210 <strcmp>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <analyzeCommand+0x5c>
		searchOneWire();
 8001b96:	f7ff ff1b 	bl	80019d0 <searchOneWire>
}
 8001b9a:	e02c      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "STF")){
 8001b9c:	491c      	ldr	r1, [pc, #112]	; (8001c10 <analyzeCommand+0xd0>)
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fb36 	bl	8000210 <strcmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <analyzeCommand+0x72>
		changeTmpUnit('F');
 8001baa:	2046      	movs	r0, #70	; 0x46
 8001bac:	f7ff fe50 	bl	8001850 <changeTmpUnit>
}
 8001bb0:	e021      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "STC")){
 8001bb2:	4918      	ldr	r1, [pc, #96]	; (8001c14 <analyzeCommand+0xd4>)
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7fe fb2b 	bl	8000210 <strcmp>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <analyzeCommand+0x88>
		changeTmpUnit('C');
 8001bc0:	2043      	movs	r0, #67	; 0x43
 8001bc2:	f7ff fe45 	bl	8001850 <changeTmpUnit>
}
 8001bc6:	e016      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "STK")){
 8001bc8:	4913      	ldr	r1, [pc, #76]	; (8001c18 <analyzeCommand+0xd8>)
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fb20 	bl	8000210 <strcmp>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <analyzeCommand+0x9e>
		changeTmpUnit('K');
 8001bd6:	204b      	movs	r0, #75	; 0x4b
 8001bd8:	f7ff fe3a 	bl	8001850 <changeTmpUnit>
}
 8001bdc:	e00b      	b.n	8001bf6 <analyzeCommand+0xb6>
	}else if(!strcmp(cmd, "GTU")){
 8001bde:	490f      	ldr	r1, [pc, #60]	; (8001c1c <analyzeCommand+0xdc>)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fb15 	bl	8000210 <strcmp>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <analyzeCommand+0xb2>
		getCurrentTmpUnit();
 8001bec:	f7ff fe40 	bl	8001870 <getCurrentTmpUnit>
}
 8001bf0:	e001      	b.n	8001bf6 <analyzeCommand+0xb6>
		wrongCmd();
 8001bf2:	f7ff fd73 	bl	80016dc <wrongCmd>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	08007cc4 	.word	0x08007cc4
 8001c04:	08007cc8 	.word	0x08007cc8
 8001c08:	08007ccc 	.word	0x08007ccc
 8001c0c:	08007cd0 	.word	0x08007cd0
 8001c10:	08007cd4 	.word	0x08007cd4
 8001c14:	08007cd8 	.word	0x08007cd8
 8001c18:	08007cdc 	.word	0x08007cdc
 8001c1c:	08007ce0 	.word	0x08007ce0

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	b093      	sub	sp, #76	; 0x4c
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c28:	f000 fd14 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2c:	f000 f9ea 	bl	8002004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c30:	f000 fab6 	bl	80021a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c34:	f000 fa8a 	bl	800214c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001c38:	f000 fa52 	bl	80020e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8001c3c:	4841      	ldr	r0, [pc, #260]	; (8001d44 <main+0x124>)
 8001c3e:	f001 ff1d 	bl	8003a7c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);//rozpoczęcie pobierania znaków
 8001c42:	2201      	movs	r2, #1
 8001c44:	4940      	ldr	r1, [pc, #256]	; (8001d48 <main+0x128>)
 8001c46:	4841      	ldr	r0, [pc, #260]	; (8001d4c <main+0x12c>)
 8001c48:	f002 f92e 	bl	8003ea8 <HAL_UART_Receive_IT>
  USART_fsend("\r\nSZYMON POMIECINSKI\r\n");
 8001c4c:	4840      	ldr	r0, [pc, #256]	; (8001d50 <main+0x130>)
 8001c4e:	f7ff f9a9 	bl	8000fa4 <USART_fsend>
  USART_fsend("MIKROPROCESORY (PROJEKT)\r\n");
 8001c52:	4840      	ldr	r0, [pc, #256]	; (8001d54 <main+0x134>)
 8001c54:	f7ff f9a6 	bl	8000fa4 <USART_fsend>
  USART_fsend("OBSLUGA TERMOMETRU DS18B20\r\n");
 8001c58:	483f      	ldr	r0, [pc, #252]	; (8001d58 <main+0x138>)
 8001c5a:	f7ff f9a3 	bl	8000fa4 <USART_fsend>
  USART_fsend("HST->");
 8001c5e:	483f      	ldr	r0, [pc, #252]	; (8001d5c <main+0x13c>)
 8001c60:	f7ff f9a0 	bl	8000fa4 <USART_fsend>
  while (1)
  {

	  uint8_t singleChar; //pojedynczy znak pobierany z bufora

	  if(USART_RX_Empty != USART_RX_Busy){//początek poszukiwania ramki
 8001c64:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <main+0x140>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <main+0x144>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d0f9      	beq.n	8001c64 <main+0x44>
		if(frameState == 0){//szukanie ramki
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <main+0x148>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11d      	bne.n	8001cb4 <main+0x94>
		  singleChar = USART_RxBuf[USART_RX_Busy];//pobieranie pierwszego znaku
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <main+0x144>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <main+0x128>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		  if(singleChar == 0x3A){//jeśli znaleziono : (początek ramki)
 8001c84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c88:	2b3a      	cmp	r3, #58	; 0x3a
 8001c8a:	d105      	bne.n	8001c98 <main+0x78>
			  frameState = 1;
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <main+0x148>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
			  frameLength = 0;
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <main+0x14c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
		  }

		  USART_RX_Busy++;
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <main+0x144>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <main+0x144>)
 8001ca0:	6013      	str	r3, [r2, #0]
		  if(USART_RX_Busy >= USART_RXBUF_LEN){
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <main+0x144>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001caa:	dbdb      	blt.n	8001c64 <main+0x44>
			  USART_RX_Busy = 0;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <main+0x144>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e7d7      	b.n	8001c64 <main+0x44>
		  }

		}else if(frameState == 1){//jeśli początek ramki jest znaleziony
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <main+0x148>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d1d3      	bne.n	8001c64 <main+0x44>
		  singleChar = USART_RxBuf[USART_RX_Busy];//pobieranie kolejnego znaku
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <main+0x144>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <main+0x128>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		  if(singleChar == 0x3A){//sprawdzenie czy znak początku się powtarza
 8001cc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ccc:	2b3a      	cmp	r3, #58	; 0x3a
 8001cce:	d107      	bne.n	8001ce0 <main+0xc0>
			  if(frameLength > 1){
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <main+0x14c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	dd0e      	ble.n	8001cf6 <main+0xd6>
				  frameLength = 0;
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <main+0x14c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e00a      	b.n	8001cf6 <main+0xd6>
			  }
		  }else{
			  frameBuf[frameLength] = singleChar;//zapisywanie ramki
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <main+0x14c>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4922      	ldr	r1, [pc, #136]	; (8001d70 <main+0x150>)
 8001ce6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cea:	548b      	strb	r3, [r1, r2]
			  frameLength++;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <main+0x14c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <main+0x14c>)
 8001cf4:	6013      	str	r3, [r2, #0]
		  }

		  USART_RX_Busy++;
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <main+0x144>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <main+0x144>)
 8001cfe:	6013      	str	r3, [r2, #0]
		  if(USART_RX_Busy >= USART_RXBUF_LEN){
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <main+0x144>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001d08:	db02      	blt.n	8001d10 <main+0xf0>
			  USART_RX_Busy = 0;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <main+0x144>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
		  }

		  if(singleChar == 0x3B){//zapisywanie do ramki do napotkania znaku końca ramki (;)
 8001d10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d14:	2b3b      	cmp	r3, #59	; 0x3b
 8001d16:	d1a5      	bne.n	8001c64 <main+0x44>
			  if(frameLength - 1 > maxFrameLength){//sprawdzenie czy ramka nie jest zbyt długa
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <main+0x14c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <main+0x154>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dd28      	ble.n	8001d78 <main+0x158>
				  USART_fsend("HST->");
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <main+0x13c>)
 8001d28:	f7ff f93c 	bl	8000fa4 <USART_fsend>
				  frameLength = 0;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <main+0x14c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
				  frameState = 0;
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <main+0x148>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
				  memset(frameBuf, 0, sizeof(frameBuf));//czyszczenie bufora ramki
 8001d38:	22c8      	movs	r2, #200	; 0xc8
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <main+0x150>)
 8001d3e:	f003 fe0b 	bl	8005958 <memset>
				  continue;//i przechodzenie do następnej iteracji pętli
 8001d42:	e143      	b.n	8001fcc <main+0x3ac>
 8001d44:	20000204 	.word	0x20000204
 8001d48:	20000428 	.word	0x20000428
 8001d4c:	2000024c 	.word	0x2000024c
 8001d50:	08007ce4 	.word	0x08007ce4
 8001d54:	08007cfc 	.word	0x08007cfc
 8001d58:	08007d18 	.word	0x08007d18
 8001d5c:	08007d38 	.word	0x08007d38
 8001d60:	200005b8 	.word	0x200005b8
 8001d64:	200005bc 	.word	0x200005bc
 8001d68:	20000688 	.word	0x20000688
 8001d6c:	2000068c 	.word	0x2000068c
 8001d70:	200005c0 	.word	0x200005c0
 8001d74:	20000004 	.word	0x20000004
			  }
			  if(frameLength > minFrameLength){//sprawdzanie czy ramka ma minimalną długość
 8001d78:	4b95      	ldr	r3, [pc, #596]	; (8001fd0 <main+0x3b0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <main+0x3b4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f340 8115 	ble.w	8001fb0 <main+0x390>
 8001d86:	466b      	mov	r3, sp
 8001d88:	607b      	str	r3, [r7, #4]
				  //zapisywanie poszczególnych pól ramki
				  frameBuf[frameLength - 1] = '\0';
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <main+0x3b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	4991      	ldr	r1, [pc, #580]	; (8001fd8 <main+0x3b8>)
 8001d92:	2300      	movs	r3, #0
 8001d94:	548b      	strb	r3, [r1, r2]

				  memcpy(senderAddress, &frameBuf[0], 3);
 8001d96:	2203      	movs	r2, #3
 8001d98:	498f      	ldr	r1, [pc, #572]	; (8001fd8 <main+0x3b8>)
 8001d9a:	4890      	ldr	r0, [pc, #576]	; (8001fdc <main+0x3bc>)
 8001d9c:	f003 fe6f 	bl	8005a7e <memcpy>
				  senderAddress[3] = '\0';
 8001da0:	4a8e      	ldr	r2, [pc, #568]	; (8001fdc <main+0x3bc>)
 8001da2:	2300      	movs	r3, #0
 8001da4:	70d3      	strb	r3, [r2, #3]

				  memcpy(receiverAddress, &frameBuf[3], 3);
 8001da6:	2203      	movs	r2, #3
 8001da8:	498d      	ldr	r1, [pc, #564]	; (8001fe0 <main+0x3c0>)
 8001daa:	488e      	ldr	r0, [pc, #568]	; (8001fe4 <main+0x3c4>)
 8001dac:	f003 fe67 	bl	8005a7e <memcpy>
				  receiverAddress[3] = '\0';
 8001db0:	4a8c      	ldr	r2, [pc, #560]	; (8001fe4 <main+0x3c4>)
 8001db2:	2300      	movs	r3, #0
 8001db4:	70d3      	strb	r3, [r2, #3]

				  memcpy(command, &frameBuf[6], 3);
 8001db6:	2203      	movs	r2, #3
 8001db8:	498b      	ldr	r1, [pc, #556]	; (8001fe8 <main+0x3c8>)
 8001dba:	488c      	ldr	r0, [pc, #560]	; (8001fec <main+0x3cc>)
 8001dbc:	f003 fe5f 	bl	8005a7e <memcpy>
				  command[3] = '\0';
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <main+0x3cc>)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	70d3      	strb	r3, [r2, #3]

				  commandDataLength = frameLength - 9 - checksumLength - 1; //9, ponieważ taki rozmiar mają pola przed polem danych
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <main+0x3b0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1a3 0209 	sub.w	r2, r3, #9
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <main+0x3d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <main+0x3d4>)
 8001dd8:	601a      	str	r2, [r3, #0]
				  char commandData[commandDataLength + 1];
 8001dda:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <main+0x3d4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c59      	adds	r1, r3, #1
 8001de0:	1e4b      	subs	r3, r1, #1
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
 8001de4:	460a      	mov	r2, r1
 8001de6:	2300      	movs	r3, #0
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	00eb      	lsls	r3, r5, #3
 8001df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfa:	00e2      	lsls	r2, r4, #3
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4690      	mov	r8, r2
 8001e02:	4699      	mov	r9, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	ebad 0d03 	sub.w	sp, sp, r3
 8001e24:	466b      	mov	r3, sp
 8001e26:	3300      	adds	r3, #0
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
				  memcpy(commandData, &frameBuf[9], commandDataLength);
 8001e2a:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <main+0x3d4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4971      	ldr	r1, [pc, #452]	; (8001ff8 <main+0x3d8>)
 8001e32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e34:	f003 fe23 	bl	8005a7e <memcpy>
				  commandData[commandDataLength] = '\0';
 8001e38:	4b6e      	ldr	r3, [pc, #440]	; (8001ff4 <main+0x3d4>)
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e3e:	2300      	movs	r3, #0
 8001e40:	5453      	strb	r3, [r2, r1]

				  char checksum[checksumLength + 1];
 8001e42:	4b6b      	ldr	r3, [pc, #428]	; (8001ff0 <main+0x3d0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	1c59      	adds	r1, r3, #1
 8001e48:	1e4b      	subs	r3, r1, #1
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	2300      	movs	r3, #0
 8001e50:	4692      	mov	sl, r2
 8001e52:	469b      	mov	fp, r3
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e68:	460a      	mov	r2, r1
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61ba      	str	r2, [r7, #24]
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	69f8      	ldr	r0, [r7, #28]
 8001e7a:	00c3      	lsls	r3, r0, #3
 8001e7c:	69b8      	ldr	r0, [r7, #24]
 8001e7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e82:	69b8      	ldr	r0, [r7, #24]
 8001e84:	00c2      	lsls	r2, r0, #3
 8001e86:	460b      	mov	r3, r1
 8001e88:	3307      	adds	r3, #7
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e92:	466b      	mov	r3, sp
 8001e94:	3300      	adds	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
				  memcpy(checksum, &frameBuf[9 + commandDataLength], checksumLength);
 8001e98:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <main+0x3d4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f103 0209 	add.w	r2, r3, #9
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <main+0x3b8>)
 8001ea2:	18d1      	adds	r1, r2, r3
 8001ea4:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <main+0x3d0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eac:	f003 fde7 	bl	8005a7e <memcpy>
				  checksum[checksumLength] = '\0';
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <main+0x3d0>)
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	5453      	strb	r3, [r2, r1]

				  if(checkCharacters(senderAddress, 0) && checkCharacters(receiverAddress, 0) &&
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4847      	ldr	r0, [pc, #284]	; (8001fdc <main+0x3bc>)
 8001ebe:	f7ff f991 	bl	80011e4 <checkCharacters>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d071      	beq.n	8001fac <main+0x38c>
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4846      	ldr	r0, [pc, #280]	; (8001fe4 <main+0x3c4>)
 8001ecc:	f7ff f98a 	bl	80011e4 <checkCharacters>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06a      	beq.n	8001fac <main+0x38c>
					 checkCharacters(command, 0) && checkCharacters(checksum, 1)){//sprawdzanie czy w pola wpisano dozwolone znaki
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4844      	ldr	r0, [pc, #272]	; (8001fec <main+0x3cc>)
 8001eda:	f7ff f983 	bl	80011e4 <checkCharacters>
 8001ede:	4603      	mov	r3, r0
				  if(checkCharacters(senderAddress, 0) && checkCharacters(receiverAddress, 0) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d063      	beq.n	8001fac <main+0x38c>
					 checkCharacters(command, 0) && checkCharacters(checksum, 1)){//sprawdzanie czy w pola wpisano dozwolone znaki
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ee8:	f7ff f97c 	bl	80011e4 <checkCharacters>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d05c      	beq.n	8001fac <main+0x38c>
					  if(checkSenderAndReceiver(senderAddress, receiverAddress)){//sprawdzanie poprawności adresów
 8001ef2:	493c      	ldr	r1, [pc, #240]	; (8001fe4 <main+0x3c4>)
 8001ef4:	4839      	ldr	r0, [pc, #228]	; (8001fdc <main+0x3bc>)
 8001ef6:	f7ff f9c5 	bl	8001284 <checkSenderAndReceiver>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d055      	beq.n	8001fac <main+0x38c>
 8001f00:	466b      	mov	r3, sp
 8001f02:	461e      	mov	r6, r3
						  //oddzielanie danych z ramki do obliczeń sumy kontrolnej
						  int frameWithoutChsumLen = frameLength - checksumLength;
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <main+0x3b0>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <main+0x3d0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
						  char frameWithoutChsum[frameWithoutChsumLen];
 8001f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f12:	1e4b      	subs	r3, r1, #1
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f16:	460a      	mov	r2, r1
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613a      	str	r2, [r7, #16]
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	00c3      	lsls	r3, r0, #3
 8001f2a:	6938      	ldr	r0, [r7, #16]
 8001f2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f30:	6938      	ldr	r0, [r7, #16]
 8001f32:	00c2      	lsls	r2, r0, #3
 8001f34:	460a      	mov	r2, r1
 8001f36:	2300      	movs	r3, #0
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	00c3      	lsls	r3, r0, #3
 8001f48:	68b8      	ldr	r0, [r7, #8]
 8001f4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f4e:	68b8      	ldr	r0, [r7, #8]
 8001f50:	00c2      	lsls	r2, r0, #3
 8001f52:	460b      	mov	r3, r1
 8001f54:	3307      	adds	r3, #7
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	ebad 0d03 	sub.w	sp, sp, r3
 8001f5e:	466b      	mov	r3, sp
 8001f60:	3300      	adds	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
						  strncpy(frameWithoutChsum, frameBuf, frameWithoutChsumLen);
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	461a      	mov	r2, r3
 8001f68:	491b      	ldr	r1, [pc, #108]	; (8001fd8 <main+0x3b8>)
 8001f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f6c:	f003 fcfc 	bl	8005968 <strncpy>
						  frameWithoutChsum[frameWithoutChsumLen - 1] = '\0';
 8001f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f76:	2300      	movs	r3, #0
 8001f78:	5453      	strb	r3, [r2, r1]

						  //obliczanie sumy kontrolnej
						  uint8_t calculatedChecksum = genChecksum(frameWithoutChsum, strlen(frameWithoutChsum));
 8001f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f7c:	f7fe f9a8 	bl	80002d0 <strlen>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4619      	mov	r1, r3
 8001f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f86:	f7ff f8df 	bl	8001148 <genChecksum>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						  if(compareChecksums(checksum, calculatedChecksum)){ //sprawdzanie poprawności sumy kontrolnej
 8001f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f94:	4619      	mov	r1, r3
 8001f96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f98:	f7ff f90d 	bl	80011b6 <compareChecksums>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <main+0x38a>
							  //analizowanie komendy
							  analyzeCommand(command, commandData);
 8001fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fa4:	4811      	ldr	r0, [pc, #68]	; (8001fec <main+0x3cc>)
 8001fa6:	f7ff fdcb 	bl	8001b40 <analyzeCommand>
 8001faa:	46b5      	mov	sp, r6
 8001fac:	f8d7 d004 	ldr.w	sp, [r7, #4]
						  }
					  }
				  }
			  }

			  USART_fsend("HST->");
 8001fb0:	4812      	ldr	r0, [pc, #72]	; (8001ffc <main+0x3dc>)
 8001fb2:	f7fe fff7 	bl	8000fa4 <USART_fsend>
			  frameState = 0;
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <main+0x3e0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
			  frameLength = 0;
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <main+0x3b0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
			  memset(frameBuf, 0, sizeof(frameBuf));//czyszczenie bufora ramki
 8001fc2:	22c8      	movs	r2, #200	; 0xc8
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <main+0x3b8>)
 8001fc8:	f003 fcc6 	bl	8005958 <memset>
  {
 8001fcc:	e64a      	b.n	8001c64 <main+0x44>
 8001fce:	bf00      	nop
 8001fd0:	2000068c 	.word	0x2000068c
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	200005c0 	.word	0x200005c0
 8001fdc:	20000694 	.word	0x20000694
 8001fe0:	200005c3 	.word	0x200005c3
 8001fe4:	20000690 	.word	0x20000690
 8001fe8:	200005c6 	.word	0x200005c6
 8001fec:	20000698 	.word	0x20000698
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	2000069c 	.word	0x2000069c
 8001ff8:	200005c9 	.word	0x200005c9
 8001ffc:	08007d38 	.word	0x08007d38
 8002000:	20000688 	.word	0x20000688

08002004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	; 0x50
 8002008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2234      	movs	r2, #52	; 0x34
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fca0 	bl	8005958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <SystemClock_Config+0xd4>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <SystemClock_Config+0xd4>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <SystemClock_Config+0xd4>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <SystemClock_Config+0xd8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002050:	4a22      	ldr	r2, [pc, #136]	; (80020dc <SystemClock_Config+0xd8>)
 8002052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <SystemClock_Config+0xd8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002064:	2302      	movs	r3, #2
 8002066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002068:	2301      	movs	r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800206c:	2310      	movs	r3, #16
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002070:	2302      	movs	r3, #2
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002078:	2310      	movs	r3, #16
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800207c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002080:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002082:	2304      	movs	r3, #4
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002086:	2302      	movs	r3, #2
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800208a:	2302      	movs	r3, #2
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fa04 	bl	80034a0 <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800209e:	f000 f901 	bl	80022a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a6:	2302      	movs	r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fea4 	bl	8002e0c <HAL_RCC_ClockConfig>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80020ca:	f000 f8eb 	bl	80022a4 <Error_Handler>
  }
}
 80020ce:	bf00      	nop
 80020d0:	3750      	adds	r7, #80	; 0x50
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000

080020e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_TIM6_Init+0x64>)
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <MX_TIM6_Init+0x68>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 44;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <MX_TIM6_Init+0x64>)
 80020f6:	222c      	movs	r2, #44	; 0x2c
 80020f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_TIM6_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_TIM6_Init+0x64>)
 8002102:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002106:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_TIM6_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <MX_TIM6_Init+0x64>)
 8002110:	f001 fc64 	bl	80039dc <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800211a:	f000 f8c3 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_TIM6_Init+0x64>)
 800212c:	f001 fdae 	bl	8003c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002136:	f000 f8b5 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000204 	.word	0x20000204
 8002148:	40001000 	.word	0x40001000

0800214c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART2_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002184:	f001 fdfe 	bl	8003d84 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 f889 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000024c 	.word	0x2000024c
 800219c:	40004400 	.word	0x40004400

080021a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a36      	ldr	r2, [pc, #216]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <MX_GPIO_Init+0xf8>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <MX_GPIO_Init+0xf8>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <MX_GPIO_Init+0xf8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <MX_GPIO_Init+0xf8>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_GPIO_Init+0xf8>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2101      	movs	r1, #1
 800222a:	481c      	ldr	r0, [pc, #112]	; (800229c <MX_GPIO_Init+0xfc>)
 800222c:	f000 fdd4 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	2120      	movs	r1, #32
 8002234:	4819      	ldr	r0, [pc, #100]	; (800229c <MX_GPIO_Init+0xfc>)
 8002236:	f000 fdcf 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800223a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002240:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4813      	ldr	r0, [pc, #76]	; (80022a0 <MX_GPIO_Init+0x100>)
 8002252:	f000 fc15 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS_Pin */
  GPIO_InitStruct.Pin = DS_Pin;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800225a:	2311      	movs	r3, #17
 800225c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480b      	ldr	r0, [pc, #44]	; (800229c <MX_GPIO_Init+0xfc>)
 800226e:	f000 fc07 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002272:	2320      	movs	r3, #32
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_GPIO_Init+0xfc>)
 800228a:	f000 fbf9 	bl	8002a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020800 	.word	0x40020800

080022a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ac:	e7fe      	b.n	80022ac <Error_Handler+0x8>
	...

080022b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_MspInit+0x4c>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_MspInit+0x4c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_MspInit+0x4c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_MspInit+0x4c>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_MspInit+0x4c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ee:	2007      	movs	r0, #7
 80022f0:	f000 faf2 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_TIM_Base_MspInit+0x3c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10d      	bne.n	800232e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_TIM_Base_MspInit+0x40>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_TIM_Base_MspInit+0x40>)
 800231c:	f043 0310 	orr.w	r3, r3, #16
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_TIM_Base_MspInit+0x40>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40001000 	.word	0x40001000
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_UART_MspInit+0x94>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d133      	bne.n	80023ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0x98>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x98>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800239e:	230c      	movs	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_UART_MspInit+0x9c>)
 80023ba:	f000 fb61 	bl	8002a80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2026      	movs	r0, #38	; 0x26
 80023c4:	f000 fa93 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c8:	2026      	movs	r0, #38	; 0x26
 80023ca:	f000 faac 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	measureTemp();
 8002430:	f7ff f8fa 	bl	8001628 <measureTemp>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f960 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <USART2_IRQHandler+0x10>)
 8002442:	f001 fd61 	bl	8003f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000024c 	.word	0x2000024c

08002450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_kill>:

int _kill(int pid, int sig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800246a:	f003 fadb 	bl	8005a24 <__errno>
 800246e:	4603      	mov	r3, r0
 8002470:	2216      	movs	r2, #22
 8002472:	601a      	str	r2, [r3, #0]
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_exit>:

void _exit (int status)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ffe7 	bl	8002460 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002492:	e7fe      	b.n	8002492 <_exit+0x12>

08002494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e00a      	b.n	80024bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a6:	f3af 8000 	nop.w
 80024aa:	4601      	mov	r1, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	60ba      	str	r2, [r7, #8]
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf0      	blt.n	80024a6 <_read+0x12>
  }

  return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e009      	b.n	80024f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf1      	blt.n	80024e0 <_write+0x12>
  }
  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	605a      	str	r2, [r3, #4]
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_isatty>:

int _isatty(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f003 fa40 	bl	8005a24 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20020000 	.word	0x20020000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	20000700 	.word	0x20000700
 80025d8:	20000858 	.word	0x20000858

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopFillZerobss+0x26>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800262a:	f7ff ffd7 	bl	80025dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f003 f9ff 	bl	8005a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff faf5 	bl	8001c20 <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002644:	080080dc 	.word	0x080080dc
  ldr r2, =_sbss
 8002648:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800264c:	20000854 	.word	0x20000854

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f92b 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fe12 	bl	80022b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f943 	bl	8002942 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f90b 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000014 	.word	0x20000014
 80026f0:	2000001c 	.word	0x2000001c
 80026f4:	20000018 	.word	0x20000018

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	2000001c 	.word	0x2000001c
 800271c:	20000704 	.word	0x20000704

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000704 	.word	0x20000704

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff feda 	bl	8002720 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e052      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0216 	bic.w	r2, r2, #22
 800299a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_DMA_Abort+0x62>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029dc:	e013      	b.n	8002a06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029de:	f7ff fe9f 	bl	8002720 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d90c      	bls.n	8002a06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e015      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e4      	bne.n	80029de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	223f      	movs	r2, #63	; 0x3f
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e00c      	b.n	8002a72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e165      	b.n	8002d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 8154 	bne.w	8002d62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d005      	beq.n	8002ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ae 	beq.w	8002d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <HAL_GPIO_Init+0x300>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4f      	ldr	r2, [pc, #316]	; (8002d88 <HAL_GPIO_Init+0x308>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4e      	ldr	r2, [pc, #312]	; (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x216>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <HAL_GPIO_Init+0x310>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x212>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4c      	ldr	r2, [pc, #304]	; (8002d94 <HAL_GPIO_Init+0x314>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_GPIO_Init+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x20a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4a      	ldr	r2, [pc, #296]	; (8002d9c <HAL_GPIO_Init+0x31c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x206>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a49      	ldr	r2, [pc, #292]	; (8002da0 <HAL_GPIO_Init+0x320>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x202>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x21c>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x304>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae96 	bls.w	8002a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df4:	e003      	b.n	8002dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	041a      	lsls	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cc      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d90c      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d044      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e067      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4934      	ldr	r1, [pc, #208]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efc:	f7ff fc10 	bl	8002720 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7ff fc0c 	bl	8002720 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 020c 	and.w	r2, r3, #12
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1eb      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d20c      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f855 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fb70 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08007d40 	.word	0x08007d40
 8002fd0:	20000014 	.word	0x20000014
 8002fd4:	20000018 	.word	0x20000018

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000014 	.word	0x20000014

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	08007d50 	.word	0x08007d50

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800301c:	f7ff ffdc 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0b5b      	lsrs	r3, r3, #13
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	08007d50 	.word	0x08007d50

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b0ae      	sub	sp, #184	; 0xb8
 8003046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003066:	4bcb      	ldr	r3, [pc, #812]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b0c      	cmp	r3, #12
 8003070:	f200 8206 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x440>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	08003481 	.word	0x08003481
 8003084:	08003481 	.word	0x08003481
 8003088:	08003481 	.word	0x08003481
 800308c:	080030b9 	.word	0x080030b9
 8003090:	08003481 	.word	0x08003481
 8003094:	08003481 	.word	0x08003481
 8003098:	08003481 	.word	0x08003481
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	08003481 	.word	0x08003481
 80030a4:	08003481 	.word	0x08003481
 80030a8:	08003481 	.word	0x08003481
 80030ac:	080032b1 	.word	0x080032b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4bb9      	ldr	r3, [pc, #740]	; (8003398 <HAL_RCC_GetSysClockFreq+0x358>)
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030b6:	e1e7      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4bb8      	ldr	r3, [pc, #736]	; (800339c <HAL_RCC_GetSysClockFreq+0x35c>)
 80030ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030be:	e1e3      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4bb4      	ldr	r3, [pc, #720]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030cc:	4bb1      	ldr	r3, [pc, #708]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d071      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4bae      	ldr	r3, [pc, #696]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6439      	str	r1, [r7, #64]	; 0x40
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	647b      	str	r3, [r7, #68]	; 0x44
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003130:	4649      	mov	r1, r9
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4641      	mov	r1, r8
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4641      	mov	r1, r8
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	63b9      	str	r1, [r7, #56]	; 0x38
 8003144:	4649      	mov	r1, r9
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003158:	4649      	mov	r1, r9
 800315a:	00cb      	lsls	r3, r1, #3
 800315c:	4641      	mov	r1, r8
 800315e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003162:	4641      	mov	r1, r8
 8003164:	00ca      	lsls	r2, r1, #3
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	4603      	mov	r3, r0
 800316c:	4622      	mov	r2, r4
 800316e:	189b      	adds	r3, r3, r2
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	462b      	mov	r3, r5
 8003174:	460a      	mov	r2, r1
 8003176:	eb42 0303 	adc.w	r3, r2, r3
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003188:	4629      	mov	r1, r5
 800318a:	024b      	lsls	r3, r1, #9
 800318c:	4621      	mov	r1, r4
 800318e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003192:	4621      	mov	r1, r4
 8003194:	024a      	lsls	r2, r1, #9
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031ac:	f7fd fd7c 	bl	8000ca8 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ba:	e067      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031d6:	2300      	movs	r3, #0
 80031d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4621      	mov	r1, r4
 80031f8:	1a51      	subs	r1, r2, r1
 80031fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80031fc:	4629      	mov	r1, r5
 80031fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003210:	4649      	mov	r1, r9
 8003212:	018b      	lsls	r3, r1, #6
 8003214:	4641      	mov	r1, r8
 8003216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321a:	4641      	mov	r1, r8
 800321c:	018a      	lsls	r2, r1, #6
 800321e:	4641      	mov	r1, r8
 8003220:	ebb2 0a01 	subs.w	sl, r2, r1
 8003224:	4649      	mov	r1, r9
 8003226:	eb63 0b01 	sbc.w	fp, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003236:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323e:	4692      	mov	sl, r2
 8003240:	469b      	mov	fp, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb1a 0303 	adds.w	r3, sl, r3
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	462b      	mov	r3, r5
 800324c:	eb4b 0303 	adc.w	r3, fp, r3
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003274:	2200      	movs	r2, #0
 8003276:	673b      	str	r3, [r7, #112]	; 0x70
 8003278:	677a      	str	r2, [r7, #116]	; 0x74
 800327a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800327e:	f7fd fd13 	bl	8000ca8 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4613      	mov	r3, r2
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800329e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ae:	e0eb      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d06b      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
 80032dc:	2300      	movs	r3, #0
 80032de:	667b      	str	r3, [r7, #100]	; 0x64
 80032e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0159      	lsls	r1, r3, #5
 80032f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f6:	0150      	lsls	r0, r2, #5
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4621      	mov	r1, r4
 80032fe:	1a51      	subs	r1, r2, r1
 8003300:	61b9      	str	r1, [r7, #24]
 8003302:	4629      	mov	r1, r5
 8003304:	eb63 0301 	sbc.w	r3, r3, r1
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003316:	4659      	mov	r1, fp
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	4651      	mov	r1, sl
 800331c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003320:	4651      	mov	r1, sl
 8003322:	018a      	lsls	r2, r1, #6
 8003324:	4651      	mov	r1, sl
 8003326:	ebb2 0801 	subs.w	r8, r2, r1
 800332a:	4659      	mov	r1, fp
 800332c:	eb63 0901 	sbc.w	r9, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003344:	4690      	mov	r8, r2
 8003346:	4699      	mov	r9, r3
 8003348:	4623      	mov	r3, r4
 800334a:	eb18 0303 	adds.w	r3, r8, r3
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	462b      	mov	r3, r5
 8003352:	eb49 0303 	adc.w	r3, r9, r3
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003364:	4629      	mov	r1, r5
 8003366:	024b      	lsls	r3, r1, #9
 8003368:	4621      	mov	r1, r4
 800336a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336e:	4621      	mov	r1, r4
 8003370:	024a      	lsls	r2, r1, #9
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800337a:	2200      	movs	r2, #0
 800337c:	65bb      	str	r3, [r7, #88]	; 0x58
 800337e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003380:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003384:	f7fd fc90 	bl	8000ca8 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x420>
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_GetSysClockFreq+0x458>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	4611      	mov	r1, r2
 80033ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b0:	653b      	str	r3, [r7, #80]	; 0x50
 80033b2:	2300      	movs	r3, #0
 80033b4:	657b      	str	r3, [r7, #84]	; 0x54
 80033b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033ba:	4642      	mov	r2, r8
 80033bc:	464b      	mov	r3, r9
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4641      	mov	r1, r8
 80033d4:	1a51      	subs	r1, r2, r1
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4649      	mov	r1, r9
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033ec:	4659      	mov	r1, fp
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f6:	4651      	mov	r1, sl
 80033f8:	018a      	lsls	r2, r1, #6
 80033fa:	4651      	mov	r1, sl
 80033fc:	1a54      	subs	r4, r2, r1
 80033fe:	4659      	mov	r1, fp
 8003400:	eb63 0501 	sbc.w	r5, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	464b      	mov	r3, r9
 8003420:	eb45 0303 	adc.w	r3, r5, r3
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003432:	4629      	mov	r1, r5
 8003434:	028b      	lsls	r3, r1, #10
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800343c:	4621      	mov	r1, r4
 800343e:	028a      	lsls	r2, r1, #10
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003448:	2200      	movs	r2, #0
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
 800344c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800344e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003452:	f7fd fc29 	bl	8000ca8 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4613      	mov	r3, r2
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCC_GetSysClockFreq+0x458>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0f1b      	lsrs	r3, r3, #28
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800346e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800347e:	e003      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800348c:	4618      	mov	r0, r3
 800348e:	37b8      	adds	r7, #184	; 0xb8
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400

080034a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e28d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8083 	beq.w	80035c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034c0:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034cc:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034d8:	4b8e      	ldr	r3, [pc, #568]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b8b      	ldr	r3, [pc, #556]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b84      	ldr	r3, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x124>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e25a      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x90>
 8003522:	4b7c      	ldr	r3, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7b      	ldr	r2, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0xb4>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7ff f8d4 	bl	8002720 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7ff f8d0 	bl	8002720 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e21f      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xdc>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7ff f8c0 	bl	8002720 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7ff f8bc 	bl	8002720 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e20b      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x104>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035d2:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1d3      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7ff f869 	bl	8002720 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003652:	f7ff f865 	bl	8002720 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1b4      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x278>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7ff f848 	bl	8002720 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7ff f844 	bl	8002720 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e193      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7ff f828 	bl	8002720 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7ff f824 	bl	8002720 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e173      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x234>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_OscConfig+0x27c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7ff f811 	bl	8002720 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7ff f80d 	bl	8002720 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e15c      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b8a      	ldr	r3, [pc, #552]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b83      	ldr	r3, [pc, #524]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fe ffcd 	bl	8002720 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe ffc9 	bl	8002720 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e118      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x31e>
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x340>
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a60      	ldr	r2, [pc, #384]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	4b5e      	ldr	r3, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe ff8e 	bl	8002720 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe ff8a 	bl	8002720 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0d7      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x368>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe ff78 	bl	8002720 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe ff74 	bl	8002720 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0c1      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80ad 	beq.w	80039cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d060      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d145      	bne.n	8003912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe ff48 	bl	8002720 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe ff44 	bl	8002720 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e093      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe ff19 	bl	8002720 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe ff15 	bl	8002720 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e064      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x452>
 8003910:	e05c      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe ff02 	bl	8002720 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe fefe 	bl	8002720 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
 800393e:	e045      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e040      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x538>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e041      	b.n	8003a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fe fc7c 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f896 	bl	8003b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e046      	b.n	8003b22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_TIM_Base_Start+0xb4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_TIM_Base_Start+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_TIM_Base_Start+0xbc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_TIM_Base_Start+0xc0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_TIM_Base_Start+0xc4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start+0xc8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIM_Base_Start+0xcc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6a:	d00f      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d027      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <TIM_Base_SetConfig+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d023      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <TIM_Base_SetConfig+0x11c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <TIM_Base_SetConfig+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d017      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <TIM_Base_SetConfig+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <TIM_Base_SetConfig+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <TIM_Base_SetConfig+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <TIM_Base_SetConfig+0x134>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <TIM_Base_SetConfig+0x138>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <TIM_Base_SetConfig+0x13c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0xf8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <TIM_Base_SetConfig+0x124>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d103      	bne.n	8003c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	615a      	str	r2, [r3, #20]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800
 8003c80:	40001800 	.word	0x40001800
 8003c84:	40001c00 	.word	0x40001c00
 8003c88:	40002000 	.word	0x40002000

08003c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e05a      	b.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d01d      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40010400 	.word	0x40010400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40001800 	.word	0x40001800

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03f      	b.n	8003e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe faca 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fd19 	bl	8004800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d130      	bne.n	8003e9a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Transmit_IT+0x26>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e029      	b.n	8003e9c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit_IT+0x38>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e022      	b.n	8003e9c <HAL_UART_Transmit_IT+0x7e>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e94:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d11d      	bne.n	8003efe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_UART_Receive_IT+0x26>
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e016      	b.n	8003f00 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Receive_IT+0x38>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e00f      	b.n	8003f00 <HAL_UART_Receive_IT+0x58>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 faab 	bl	8004450 <UART_Start_Receive_IT>
 8003efa:	4603      	mov	r3, r0
 8003efc:	e000      	b.n	8003f00 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b0ba      	sub	sp, #232	; 0xe8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_UART_IRQHandler+0x66>
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fb8f 	bl	800468a <UART_Receive_IT>
      return;
 8003f6c:	e256      	b.n	800441c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80de 	beq.w	8004134 <HAL_UART_IRQHandler+0x22c>
 8003f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80d1 	beq.w	8004134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xae>
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xd2>
 8003fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xf6>
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d011      	beq.n	800402e <HAL_UART_IRQHandler+0x126>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0208 	orr.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 81ed 	beq.w	8004412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_UART_IRQHandler+0x14e>
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fb1a 	bl	800468a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_UART_IRQHandler+0x17a>
 800407a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04f      	beq.n	8004122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fa22 	bl	80044cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d141      	bne.n	800411a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1d9      	bne.n	8004096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d013      	beq.n	8004112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	4a7d      	ldr	r2, [pc, #500]	; (80042e4 <HAL_UART_IRQHandler+0x3dc>)
 80040f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fc9f 	bl	8002a3a <HAL_DMA_Abort_IT>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800410c:	4610      	mov	r0, r2
 800410e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e00e      	b.n	8004130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f986 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00a      	b.n	8004130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f982 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e006      	b.n	8004130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f97e 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800412e:	e170      	b.n	8004412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	bf00      	nop
    return;
 8004132:	e16e      	b.n	8004412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 814a 	bne.w	80043d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8143 	beq.w	80043d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800414c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 813c 	beq.w	80043d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	f040 80b4 	bne.w	80042e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800418c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8140 	beq.w	8004416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800419a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800419e:	429a      	cmp	r2, r3
 80041a0:	f080 8139 	bcs.w	8004416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	f000 8088 	beq.w	80042ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1d9      	bne.n	80041ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800422a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800422e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800423c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e1      	bne.n	8004206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800426c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e3      	bne.n	8004242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e3      	bne.n	8004288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fb48 	bl	800295a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8ac 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e0:	e099      	b.n	8004416 <HAL_UART_IRQHandler+0x50e>
 80042e2:	bf00      	nop
 80042e4:	08004593 	.word	0x08004593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 808b 	beq.w	800441a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8086 	beq.w	800441a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004332:	647a      	str	r2, [r7, #68]	; 0x44
 8004334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e3      	bne.n	800430e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3314      	adds	r3, #20
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	623b      	str	r3, [r7, #32]
   return(result);
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3314      	adds	r3, #20
 8004366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800436a:	633a      	str	r2, [r7, #48]	; 0x30
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e3      	bne.n	8004346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60fb      	str	r3, [r7, #12]
   return(result);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043b0:	61fa      	str	r2, [r7, #28]
 80043b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	617b      	str	r3, [r7, #20]
   return(result);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e3      	bne.n	800438c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f834 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043d0:	e023      	b.n	800441a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_UART_IRQHandler+0x4ea>
 80043de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8e5 	bl	80045ba <UART_Transmit_IT>
    return;
 80043f0:	e014      	b.n	800441c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00e      	beq.n	800441c <HAL_UART_IRQHandler+0x514>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f925 	bl	800465a <UART_EndTransmit_IT>
    return;
 8004410:	e004      	b.n	800441c <HAL_UART_IRQHandler+0x514>
    return;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_UART_IRQHandler+0x514>
      return;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_UART_IRQHandler+0x514>
      return;
 800441a:	bf00      	nop
  }
}
 800441c:	37e8      	adds	r7, #232	; 0xe8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2222      	movs	r2, #34	; 0x22
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0220 	orr.w	r2, r2, #32
 80044bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b095      	sub	sp, #84	; 0x54
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f4:	643a      	str	r2, [r7, #64]	; 0x40
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	61fb      	str	r3, [r7, #28]
   return(result);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b01      	cmp	r3, #1
 8004542:	d119      	bne.n	8004578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004564:	61ba      	str	r2, [r7, #24]
 8004566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004586:	bf00      	nop
 8004588:	3754      	adds	r7, #84	; 0x54
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ff39 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b21      	cmp	r3, #33	; 0x21
 80045cc:	d13e      	bne.n	800464c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d114      	bne.n	8004602 <UART_Transmit_IT+0x48>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d110      	bne.n	8004602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]
 8004600:	e008      	b.n	8004614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6211      	str	r1, [r2, #32]
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fd08 	bl	8001090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b08c      	sub	sp, #48	; 0x30
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	f040 80ab 	bne.w	80047f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d117      	bne.n	80046da <UART_Receive_IT+0x50>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	1c9a      	adds	r2, r3, #2
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
 80046d8:	e026      	b.n	8004728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d007      	beq.n	80046fe <UART_Receive_IT+0x74>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <UART_Receive_IT+0x82>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e008      	b.n	800471e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004738:	2b00      	cmp	r3, #0
 800473a:	d15a      	bne.n	80047f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0220 	bic.w	r2, r2, #32
 800474a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800475a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	d135      	bne.n	80047e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	623a      	str	r2, [r7, #32]
 80047a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d10a      	bne.n	80047da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fe29 	bl	8004438 <HAL_UARTEx_RxEventCallback>
 80047e6:	e002      	b.n	80047ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc fc85 	bl	80010f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e002      	b.n	80047f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004804:	b0c0      	sub	sp, #256	; 0x100
 8004806:	af00      	add	r7, sp, #0
 8004808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	68d9      	ldr	r1, [r3, #12]
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	ea40 0301 	orr.w	r3, r0, r1
 8004828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004858:	f021 010c 	bic.w	r1, r1, #12
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004866:	430b      	orrs	r3, r1
 8004868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	6999      	ldr	r1, [r3, #24]
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	ea40 0301 	orr.w	r3, r0, r1
 8004886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <UART_SetConfig+0x2cc>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0xa0>
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b8d      	ldr	r3, [pc, #564]	; (8004ad0 <UART_SetConfig+0x2d0>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fe fbba 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 80048a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048a8:	e003      	b.n	80048b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048aa:	f7fe fba1 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80048ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	f040 810c 	bne.w	8004ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048d2:	4622      	mov	r2, r4
 80048d4:	462b      	mov	r3, r5
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048da:	415b      	adcs	r3, r3
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e2:	4621      	mov	r1, r4
 80048e4:	eb12 0801 	adds.w	r8, r2, r1
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb43 0901 	adc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004910:	462b      	mov	r3, r5
 8004912:	eb49 0303 	adc.w	r3, r9, r3
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800492a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800492e:	460b      	mov	r3, r1
 8004930:	18db      	adds	r3, r3, r3
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
 8004934:	4613      	mov	r3, r2
 8004936:	eb42 0303 	adc.w	r3, r2, r3
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
 800493c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004944:	f7fc f9b0 	bl	8000ca8 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <UART_SetConfig+0x2d4>)
 800494e:	fba3 2302 	umull	r2, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	011c      	lsls	r4, r3, #4
 8004956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495a:	2200      	movs	r2, #0
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004970:	415b      	adcs	r3, r3
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004978:	4641      	mov	r1, r8
 800497a:	eb12 0a01 	adds.w	sl, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0b01 	adc.w	fp, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004998:	4692      	mov	sl, r2
 800499a:	469b      	mov	fp, r3
 800499c:	4643      	mov	r3, r8
 800499e:	eb1a 0303 	adds.w	r3, sl, r3
 80049a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a6:	464b      	mov	r3, r9
 80049a8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049da:	f7fc f965 	bl	8000ca8 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049e6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2264      	movs	r2, #100	; 0x64
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	1acb      	subs	r3, r1, r3
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <UART_SetConfig+0x2d4>)
 80049fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a08:	441c      	add	r4, r3
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a24:	415b      	adcs	r3, r3
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6339      	str	r1, [r7, #48]	; 0x30
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a60:	464b      	mov	r3, r9
 8004a62:	460a      	mov	r2, r1
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a80:	460b      	mov	r3, r1
 8004a82:	18db      	adds	r3, r3, r3
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a86:	4613      	mov	r3, r2
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a96:	f7fc f907 	bl	8000ca8 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2164      	movs	r1, #100	; 0x64
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3332      	adds	r3, #50	; 0x32
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	f003 0207 	and.w	r2, r3, #7
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4422      	add	r2, r4
 8004ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac8:	e106      	b.n	8004cd8 <UART_SetConfig+0x4d8>
 8004aca:	bf00      	nop
 8004acc:	40011000 	.word	0x40011000
 8004ad0:	40011400 	.word	0x40011400
 8004ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aea:	4642      	mov	r2, r8
 8004aec:	464b      	mov	r3, r9
 8004aee:	1891      	adds	r1, r2, r2
 8004af0:	6239      	str	r1, [r7, #32]
 8004af2:	415b      	adcs	r3, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004afa:	4641      	mov	r1, r8
 8004afc:	1854      	adds	r4, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0501 	adc.w	r5, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	00eb      	lsls	r3, r5, #3
 8004b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	4614      	mov	r4, r2
 8004b16:	461d      	mov	r5, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	18e3      	adds	r3, r4, r3
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b20:	464b      	mov	r3, r9
 8004b22:	eb45 0303 	adc.w	r3, r5, r3
 8004b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b46:	4629      	mov	r1, r5
 8004b48:	008b      	lsls	r3, r1, #2
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b50:	4621      	mov	r1, r4
 8004b52:	008a      	lsls	r2, r1, #2
 8004b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b58:	f7fc f8a6 	bl	8000ca8 <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4b60      	ldr	r3, [pc, #384]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004b62:	fba3 2302 	umull	r2, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	011c      	lsls	r4, r3, #4
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	61b9      	str	r1, [r7, #24]
 8004b84:	415b      	adcs	r3, r3
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6139      	str	r1, [r7, #16]
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004be4:	4649      	mov	r1, r9
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	4641      	mov	r1, r8
 8004bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bee:	4641      	mov	r1, r8
 8004bf0:	008a      	lsls	r2, r1, #2
 8004bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bf6:	f7fc f857 	bl	8000ca8 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 2301 	umull	r2, r3, r3, r1
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2264      	movs	r2, #100	; 0x64
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	1acb      	subs	r3, r1, r3
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c20:	441c      	add	r4, r3
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	673b      	str	r3, [r7, #112]	; 0x70
 8004c2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c72:	464b      	mov	r3, r9
 8004c74:	460a      	mov	r2, r1
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	663b      	str	r3, [r7, #96]	; 0x60
 8004c86:	667a      	str	r2, [r7, #100]	; 0x64
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c94:	4649      	mov	r1, r9
 8004c96:	008b      	lsls	r3, r1, #2
 8004c98:	4641      	mov	r1, r8
 8004c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	008a      	lsls	r2, r1, #2
 8004ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ca6:	f7fb ffff 	bl	8000ca8 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <UART_SetConfig+0x4e4>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4422      	add	r2, r4
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce4:	51eb851f 	.word	0x51eb851f

08004ce8 <_strtol_l.constprop.0>:
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cee:	d001      	beq.n	8004cf4 <_strtol_l.constprop.0+0xc>
 8004cf0:	2b24      	cmp	r3, #36	; 0x24
 8004cf2:	d906      	bls.n	8004d02 <_strtol_l.constprop.0+0x1a>
 8004cf4:	f000 fe96 	bl	8005a24 <__errno>
 8004cf8:	2316      	movs	r3, #22
 8004cfa:	6003      	str	r3, [r0, #0]
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004de8 <_strtol_l.constprop.0+0x100>
 8004d06:	460d      	mov	r5, r1
 8004d08:	462e      	mov	r6, r5
 8004d0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004d12:	f017 0708 	ands.w	r7, r7, #8
 8004d16:	d1f7      	bne.n	8004d08 <_strtol_l.constprop.0+0x20>
 8004d18:	2c2d      	cmp	r4, #45	; 0x2d
 8004d1a:	d132      	bne.n	8004d82 <_strtol_l.constprop.0+0x9a>
 8004d1c:	782c      	ldrb	r4, [r5, #0]
 8004d1e:	2701      	movs	r7, #1
 8004d20:	1cb5      	adds	r5, r6, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d05b      	beq.n	8004dde <_strtol_l.constprop.0+0xf6>
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d109      	bne.n	8004d3e <_strtol_l.constprop.0+0x56>
 8004d2a:	2c30      	cmp	r4, #48	; 0x30
 8004d2c:	d107      	bne.n	8004d3e <_strtol_l.constprop.0+0x56>
 8004d2e:	782c      	ldrb	r4, [r5, #0]
 8004d30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004d34:	2c58      	cmp	r4, #88	; 0x58
 8004d36:	d14d      	bne.n	8004dd4 <_strtol_l.constprop.0+0xec>
 8004d38:	786c      	ldrb	r4, [r5, #1]
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	3502      	adds	r5, #2
 8004d3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004d42:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d46:	f04f 0e00 	mov.w	lr, #0
 8004d4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004d4e:	4676      	mov	r6, lr
 8004d50:	fb03 8a19 	mls	sl, r3, r9, r8
 8004d54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004d58:	f1bc 0f09 	cmp.w	ip, #9
 8004d5c:	d816      	bhi.n	8004d8c <_strtol_l.constprop.0+0xa4>
 8004d5e:	4664      	mov	r4, ip
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	dd24      	ble.n	8004dae <_strtol_l.constprop.0+0xc6>
 8004d64:	f1be 3fff 	cmp.w	lr, #4294967295
 8004d68:	d008      	beq.n	8004d7c <_strtol_l.constprop.0+0x94>
 8004d6a:	45b1      	cmp	r9, r6
 8004d6c:	d31c      	bcc.n	8004da8 <_strtol_l.constprop.0+0xc0>
 8004d6e:	d101      	bne.n	8004d74 <_strtol_l.constprop.0+0x8c>
 8004d70:	45a2      	cmp	sl, r4
 8004d72:	db19      	blt.n	8004da8 <_strtol_l.constprop.0+0xc0>
 8004d74:	fb06 4603 	mla	r6, r6, r3, r4
 8004d78:	f04f 0e01 	mov.w	lr, #1
 8004d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d80:	e7e8      	b.n	8004d54 <_strtol_l.constprop.0+0x6c>
 8004d82:	2c2b      	cmp	r4, #43	; 0x2b
 8004d84:	bf04      	itt	eq
 8004d86:	782c      	ldrbeq	r4, [r5, #0]
 8004d88:	1cb5      	addeq	r5, r6, #2
 8004d8a:	e7ca      	b.n	8004d22 <_strtol_l.constprop.0+0x3a>
 8004d8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004d90:	f1bc 0f19 	cmp.w	ip, #25
 8004d94:	d801      	bhi.n	8004d9a <_strtol_l.constprop.0+0xb2>
 8004d96:	3c37      	subs	r4, #55	; 0x37
 8004d98:	e7e2      	b.n	8004d60 <_strtol_l.constprop.0+0x78>
 8004d9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004d9e:	f1bc 0f19 	cmp.w	ip, #25
 8004da2:	d804      	bhi.n	8004dae <_strtol_l.constprop.0+0xc6>
 8004da4:	3c57      	subs	r4, #87	; 0x57
 8004da6:	e7db      	b.n	8004d60 <_strtol_l.constprop.0+0x78>
 8004da8:	f04f 3eff 	mov.w	lr, #4294967295
 8004dac:	e7e6      	b.n	8004d7c <_strtol_l.constprop.0+0x94>
 8004dae:	f1be 3fff 	cmp.w	lr, #4294967295
 8004db2:	d105      	bne.n	8004dc0 <_strtol_l.constprop.0+0xd8>
 8004db4:	2322      	movs	r3, #34	; 0x22
 8004db6:	6003      	str	r3, [r0, #0]
 8004db8:	4646      	mov	r6, r8
 8004dba:	b942      	cbnz	r2, 8004dce <_strtol_l.constprop.0+0xe6>
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	e79e      	b.n	8004cfe <_strtol_l.constprop.0+0x16>
 8004dc0:	b107      	cbz	r7, 8004dc4 <_strtol_l.constprop.0+0xdc>
 8004dc2:	4276      	negs	r6, r6
 8004dc4:	2a00      	cmp	r2, #0
 8004dc6:	d0f9      	beq.n	8004dbc <_strtol_l.constprop.0+0xd4>
 8004dc8:	f1be 0f00 	cmp.w	lr, #0
 8004dcc:	d000      	beq.n	8004dd0 <_strtol_l.constprop.0+0xe8>
 8004dce:	1e69      	subs	r1, r5, #1
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	e7f3      	b.n	8004dbc <_strtol_l.constprop.0+0xd4>
 8004dd4:	2430      	movs	r4, #48	; 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1b1      	bne.n	8004d3e <_strtol_l.constprop.0+0x56>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	e7af      	b.n	8004d3e <_strtol_l.constprop.0+0x56>
 8004dde:	2c30      	cmp	r4, #48	; 0x30
 8004de0:	d0a5      	beq.n	8004d2e <_strtol_l.constprop.0+0x46>
 8004de2:	230a      	movs	r3, #10
 8004de4:	e7ab      	b.n	8004d3e <_strtol_l.constprop.0+0x56>
 8004de6:	bf00      	nop
 8004de8:	08007d59 	.word	0x08007d59

08004dec <strtol>:
 8004dec:	4613      	mov	r3, r2
 8004dee:	460a      	mov	r2, r1
 8004df0:	4601      	mov	r1, r0
 8004df2:	4802      	ldr	r0, [pc, #8]	; (8004dfc <strtol+0x10>)
 8004df4:	6800      	ldr	r0, [r0, #0]
 8004df6:	f7ff bf77 	b.w	8004ce8 <_strtol_l.constprop.0>
 8004dfa:	bf00      	nop
 8004dfc:	20000078 	.word	0x20000078

08004e00 <__cvt>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	ec55 4b10 	vmov	r4, r5, d0
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	460e      	mov	r6, r1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	462b      	mov	r3, r5
 8004e10:	bfbb      	ittet	lt
 8004e12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e16:	461d      	movlt	r5, r3
 8004e18:	2300      	movge	r3, #0
 8004e1a:	232d      	movlt	r3, #45	; 0x2d
 8004e1c:	700b      	strb	r3, [r1, #0]
 8004e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e24:	4691      	mov	r9, r2
 8004e26:	f023 0820 	bic.w	r8, r3, #32
 8004e2a:	bfbc      	itt	lt
 8004e2c:	4622      	movlt	r2, r4
 8004e2e:	4614      	movlt	r4, r2
 8004e30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e34:	d005      	beq.n	8004e42 <__cvt+0x42>
 8004e36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e3a:	d100      	bne.n	8004e3e <__cvt+0x3e>
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	2102      	movs	r1, #2
 8004e40:	e000      	b.n	8004e44 <__cvt+0x44>
 8004e42:	2103      	movs	r1, #3
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	ab02      	add	r3, sp, #8
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	ec45 4b10 	vmov	d0, r4, r5
 8004e50:	4653      	mov	r3, sl
 8004e52:	4632      	mov	r2, r6
 8004e54:	f000 feac 	bl	8005bb0 <_dtoa_r>
 8004e58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	d102      	bne.n	8004e66 <__cvt+0x66>
 8004e60:	f019 0f01 	tst.w	r9, #1
 8004e64:	d022      	beq.n	8004eac <__cvt+0xac>
 8004e66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e6a:	eb07 0906 	add.w	r9, r7, r6
 8004e6e:	d110      	bne.n	8004e92 <__cvt+0x92>
 8004e70:	783b      	ldrb	r3, [r7, #0]
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d10a      	bne.n	8004e8c <__cvt+0x8c>
 8004e76:	2200      	movs	r2, #0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fe53 	bl	8000b28 <__aeabi_dcmpeq>
 8004e82:	b918      	cbnz	r0, 8004e8c <__cvt+0x8c>
 8004e84:	f1c6 0601 	rsb	r6, r6, #1
 8004e88:	f8ca 6000 	str.w	r6, [sl]
 8004e8c:	f8da 3000 	ldr.w	r3, [sl]
 8004e90:	4499      	add	r9, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	2300      	movs	r3, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fe45 	bl	8000b28 <__aeabi_dcmpeq>
 8004e9e:	b108      	cbz	r0, 8004ea4 <__cvt+0xa4>
 8004ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ea4:	2230      	movs	r2, #48	; 0x30
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	454b      	cmp	r3, r9
 8004eaa:	d307      	bcc.n	8004ebc <__cvt+0xbc>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb0:	1bdb      	subs	r3, r3, r7
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	b004      	add	sp, #16
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e7f0      	b.n	8004ea6 <__cvt+0xa6>

08004ec4 <__exponent>:
 8004ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	bfb8      	it	lt
 8004ecc:	4249      	neglt	r1, r1
 8004ece:	f803 2b02 	strb.w	r2, [r3], #2
 8004ed2:	bfb4      	ite	lt
 8004ed4:	222d      	movlt	r2, #45	; 0x2d
 8004ed6:	222b      	movge	r2, #43	; 0x2b
 8004ed8:	2909      	cmp	r1, #9
 8004eda:	7042      	strb	r2, [r0, #1]
 8004edc:	dd2a      	ble.n	8004f34 <__exponent+0x70>
 8004ede:	f10d 0207 	add.w	r2, sp, #7
 8004ee2:	4617      	mov	r7, r2
 8004ee4:	260a      	movs	r6, #10
 8004ee6:	4694      	mov	ip, r2
 8004ee8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004eec:	fb06 1415 	mls	r4, r6, r5, r1
 8004ef0:	3430      	adds	r4, #48	; 0x30
 8004ef2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	2c63      	cmp	r4, #99	; 0x63
 8004efa:	f102 32ff 	add.w	r2, r2, #4294967295
 8004efe:	4629      	mov	r1, r5
 8004f00:	dcf1      	bgt.n	8004ee6 <__exponent+0x22>
 8004f02:	3130      	adds	r1, #48	; 0x30
 8004f04:	f1ac 0402 	sub.w	r4, ip, #2
 8004f08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f0c:	1c41      	adds	r1, r0, #1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	42ba      	cmp	r2, r7
 8004f12:	d30a      	bcc.n	8004f2a <__exponent+0x66>
 8004f14:	f10d 0209 	add.w	r2, sp, #9
 8004f18:	eba2 020c 	sub.w	r2, r2, ip
 8004f1c:	42bc      	cmp	r4, r7
 8004f1e:	bf88      	it	hi
 8004f20:	2200      	movhi	r2, #0
 8004f22:	4413      	add	r3, r2
 8004f24:	1a18      	subs	r0, r3, r0
 8004f26:	b003      	add	sp, #12
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f32:	e7ed      	b.n	8004f10 <__exponent+0x4c>
 8004f34:	2330      	movs	r3, #48	; 0x30
 8004f36:	3130      	adds	r1, #48	; 0x30
 8004f38:	7083      	strb	r3, [r0, #2]
 8004f3a:	70c1      	strb	r1, [r0, #3]
 8004f3c:	1d03      	adds	r3, r0, #4
 8004f3e:	e7f1      	b.n	8004f24 <__exponent+0x60>

08004f40 <_printf_float>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	ed2d 8b02 	vpush	{d8}
 8004f48:	b08d      	sub	sp, #52	; 0x34
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f50:	4616      	mov	r6, r2
 8004f52:	461f      	mov	r7, r3
 8004f54:	4605      	mov	r5, r0
 8004f56:	f000 fd1b 	bl	8005990 <_localeconv_r>
 8004f5a:	f8d0 a000 	ldr.w	sl, [r0]
 8004f5e:	4650      	mov	r0, sl
 8004f60:	f7fb f9b6 	bl	80002d0 <strlen>
 8004f64:	2300      	movs	r3, #0
 8004f66:	930a      	str	r3, [sp, #40]	; 0x28
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	9305      	str	r3, [sp, #20]
 8004f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	f103 0208 	add.w	r2, r3, #8
 8004f7e:	f8c8 2000 	str.w	r2, [r8]
 8004f82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f8a:	9307      	str	r3, [sp, #28]
 8004f8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f90:	ee08 0a10 	vmov	s16, r0
 8004f94:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f9c:	4b9e      	ldr	r3, [pc, #632]	; (8005218 <_printf_float+0x2d8>)
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	f7fb fdf3 	bl	8000b8c <__aeabi_dcmpun>
 8004fa6:	bb88      	cbnz	r0, 800500c <_printf_float+0xcc>
 8004fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fac:	4b9a      	ldr	r3, [pc, #616]	; (8005218 <_printf_float+0x2d8>)
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	f7fb fdcd 	bl	8000b50 <__aeabi_dcmple>
 8004fb6:	bb48      	cbnz	r0, 800500c <_printf_float+0xcc>
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	f7fb fdbc 	bl	8000b3c <__aeabi_dcmplt>
 8004fc4:	b110      	cbz	r0, 8004fcc <_printf_float+0x8c>
 8004fc6:	232d      	movs	r3, #45	; 0x2d
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	4a93      	ldr	r2, [pc, #588]	; (800521c <_printf_float+0x2dc>)
 8004fce:	4b94      	ldr	r3, [pc, #592]	; (8005220 <_printf_float+0x2e0>)
 8004fd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fd4:	bf94      	ite	ls
 8004fd6:	4690      	movls	r8, r2
 8004fd8:	4698      	movhi	r8, r3
 8004fda:	2303      	movs	r3, #3
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	9b05      	ldr	r3, [sp, #20]
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	f04f 0900 	mov.w	r9, #0
 8004fea:	9700      	str	r7, [sp, #0]
 8004fec:	4633      	mov	r3, r6
 8004fee:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 f9da 	bl	80053ac <_printf_common>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	f040 8090 	bne.w	800511e <_printf_float+0x1de>
 8004ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8005002:	b00d      	add	sp, #52	; 0x34
 8005004:	ecbd 8b02 	vpop	{d8}
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fdba 	bl	8000b8c <__aeabi_dcmpun>
 8005018:	b140      	cbz	r0, 800502c <_printf_float+0xec>
 800501a:	464b      	mov	r3, r9
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbc      	itt	lt
 8005020:	232d      	movlt	r3, #45	; 0x2d
 8005022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005026:	4a7f      	ldr	r2, [pc, #508]	; (8005224 <_printf_float+0x2e4>)
 8005028:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <_printf_float+0x2e8>)
 800502a:	e7d1      	b.n	8004fd0 <_printf_float+0x90>
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005032:	9206      	str	r2, [sp, #24]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	d13f      	bne.n	80050b8 <_printf_float+0x178>
 8005038:	2306      	movs	r3, #6
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	9b05      	ldr	r3, [sp, #20]
 800503e:	6861      	ldr	r1, [r4, #4]
 8005040:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005044:	2300      	movs	r3, #0
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	ab0a      	add	r3, sp, #40	; 0x28
 800504a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800504e:	ab09      	add	r3, sp, #36	; 0x24
 8005050:	ec49 8b10 	vmov	d0, r8, r9
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6022      	str	r2, [r4, #0]
 8005058:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fecf 	bl	8004e00 <__cvt>
 8005062:	9b06      	ldr	r3, [sp, #24]
 8005064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005066:	2b47      	cmp	r3, #71	; 0x47
 8005068:	4680      	mov	r8, r0
 800506a:	d108      	bne.n	800507e <_printf_float+0x13e>
 800506c:	1cc8      	adds	r0, r1, #3
 800506e:	db02      	blt.n	8005076 <_printf_float+0x136>
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	4299      	cmp	r1, r3
 8005074:	dd41      	ble.n	80050fa <_printf_float+0x1ba>
 8005076:	f1ab 0302 	sub.w	r3, fp, #2
 800507a:	fa5f fb83 	uxtb.w	fp, r3
 800507e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005082:	d820      	bhi.n	80050c6 <_printf_float+0x186>
 8005084:	3901      	subs	r1, #1
 8005086:	465a      	mov	r2, fp
 8005088:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800508c:	9109      	str	r1, [sp, #36]	; 0x24
 800508e:	f7ff ff19 	bl	8004ec4 <__exponent>
 8005092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005094:	1813      	adds	r3, r2, r0
 8005096:	2a01      	cmp	r2, #1
 8005098:	4681      	mov	r9, r0
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	dc02      	bgt.n	80050a4 <_printf_float+0x164>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	07d2      	lsls	r2, r2, #31
 80050a2:	d501      	bpl.n	80050a8 <_printf_float+0x168>
 80050a4:	3301      	adds	r3, #1
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d09c      	beq.n	8004fea <_printf_float+0xaa>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b6:	e798      	b.n	8004fea <_printf_float+0xaa>
 80050b8:	9a06      	ldr	r2, [sp, #24]
 80050ba:	2a47      	cmp	r2, #71	; 0x47
 80050bc:	d1be      	bne.n	800503c <_printf_float+0xfc>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1bc      	bne.n	800503c <_printf_float+0xfc>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7b9      	b.n	800503a <_printf_float+0xfa>
 80050c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050ca:	d118      	bne.n	80050fe <_printf_float+0x1be>
 80050cc:	2900      	cmp	r1, #0
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	dd0b      	ble.n	80050ea <_printf_float+0x1aa>
 80050d2:	6121      	str	r1, [r4, #16]
 80050d4:	b913      	cbnz	r3, 80050dc <_printf_float+0x19c>
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	07d0      	lsls	r0, r2, #31
 80050da:	d502      	bpl.n	80050e2 <_printf_float+0x1a2>
 80050dc:	3301      	adds	r3, #1
 80050de:	440b      	add	r3, r1
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050e4:	f04f 0900 	mov.w	r9, #0
 80050e8:	e7de      	b.n	80050a8 <_printf_float+0x168>
 80050ea:	b913      	cbnz	r3, 80050f2 <_printf_float+0x1b2>
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	07d2      	lsls	r2, r2, #31
 80050f0:	d501      	bpl.n	80050f6 <_printf_float+0x1b6>
 80050f2:	3302      	adds	r3, #2
 80050f4:	e7f4      	b.n	80050e0 <_printf_float+0x1a0>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e7f2      	b.n	80050e0 <_printf_float+0x1a0>
 80050fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005100:	4299      	cmp	r1, r3
 8005102:	db05      	blt.n	8005110 <_printf_float+0x1d0>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	6121      	str	r1, [r4, #16]
 8005108:	07d8      	lsls	r0, r3, #31
 800510a:	d5ea      	bpl.n	80050e2 <_printf_float+0x1a2>
 800510c:	1c4b      	adds	r3, r1, #1
 800510e:	e7e7      	b.n	80050e0 <_printf_float+0x1a0>
 8005110:	2900      	cmp	r1, #0
 8005112:	bfd4      	ite	le
 8005114:	f1c1 0202 	rsble	r2, r1, #2
 8005118:	2201      	movgt	r2, #1
 800511a:	4413      	add	r3, r2
 800511c:	e7e0      	b.n	80050e0 <_printf_float+0x1a0>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	055a      	lsls	r2, r3, #21
 8005122:	d407      	bmi.n	8005134 <_printf_float+0x1f4>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	4642      	mov	r2, r8
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d12c      	bne.n	800518c <_printf_float+0x24c>
 8005132:	e764      	b.n	8004ffe <_printf_float+0xbe>
 8005134:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005138:	f240 80e0 	bls.w	80052fc <_printf_float+0x3bc>
 800513c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	f7fb fcf0 	bl	8000b28 <__aeabi_dcmpeq>
 8005148:	2800      	cmp	r0, #0
 800514a:	d034      	beq.n	80051b6 <_printf_float+0x276>
 800514c:	4a37      	ldr	r2, [pc, #220]	; (800522c <_printf_float+0x2ec>)
 800514e:	2301      	movs	r3, #1
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f af51 	beq.w	8004ffe <_printf_float+0xbe>
 800515c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005160:	429a      	cmp	r2, r3
 8005162:	db02      	blt.n	800516a <_printf_float+0x22a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07d8      	lsls	r0, r3, #31
 8005168:	d510      	bpl.n	800518c <_printf_float+0x24c>
 800516a:	ee18 3a10 	vmov	r3, s16
 800516e:	4652      	mov	r2, sl
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	f43f af41 	beq.w	8004ffe <_printf_float+0xbe>
 800517c:	f04f 0800 	mov.w	r8, #0
 8005180:	f104 091a 	add.w	r9, r4, #26
 8005184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005186:	3b01      	subs	r3, #1
 8005188:	4543      	cmp	r3, r8
 800518a:	dc09      	bgt.n	80051a0 <_printf_float+0x260>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	079b      	lsls	r3, r3, #30
 8005190:	f100 8107 	bmi.w	80053a2 <_printf_float+0x462>
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005198:	4298      	cmp	r0, r3
 800519a:	bfb8      	it	lt
 800519c:	4618      	movlt	r0, r3
 800519e:	e730      	b.n	8005002 <_printf_float+0xc2>
 80051a0:	2301      	movs	r3, #1
 80051a2:	464a      	mov	r2, r9
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f af27 	beq.w	8004ffe <_printf_float+0xbe>
 80051b0:	f108 0801 	add.w	r8, r8, #1
 80051b4:	e7e6      	b.n	8005184 <_printf_float+0x244>
 80051b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dc39      	bgt.n	8005230 <_printf_float+0x2f0>
 80051bc:	4a1b      	ldr	r2, [pc, #108]	; (800522c <_printf_float+0x2ec>)
 80051be:	2301      	movs	r3, #1
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f af19 	beq.w	8004ffe <_printf_float+0xbe>
 80051cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d102      	bne.n	80051da <_printf_float+0x29a>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d5d8      	bpl.n	800518c <_printf_float+0x24c>
 80051da:	ee18 3a10 	vmov	r3, s16
 80051de:	4652      	mov	r2, sl
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f af09 	beq.w	8004ffe <_printf_float+0xbe>
 80051ec:	f04f 0900 	mov.w	r9, #0
 80051f0:	f104 0a1a 	add.w	sl, r4, #26
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	425b      	negs	r3, r3
 80051f8:	454b      	cmp	r3, r9
 80051fa:	dc01      	bgt.n	8005200 <_printf_float+0x2c0>
 80051fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fe:	e792      	b.n	8005126 <_printf_float+0x1e6>
 8005200:	2301      	movs	r3, #1
 8005202:	4652      	mov	r2, sl
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f aef7 	beq.w	8004ffe <_printf_float+0xbe>
 8005210:	f109 0901 	add.w	r9, r9, #1
 8005214:	e7ee      	b.n	80051f4 <_printf_float+0x2b4>
 8005216:	bf00      	nop
 8005218:	7fefffff 	.word	0x7fefffff
 800521c:	08007e59 	.word	0x08007e59
 8005220:	08007e5d 	.word	0x08007e5d
 8005224:	08007e61 	.word	0x08007e61
 8005228:	08007e65 	.word	0x08007e65
 800522c:	08007e69 	.word	0x08007e69
 8005230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005234:	429a      	cmp	r2, r3
 8005236:	bfa8      	it	ge
 8005238:	461a      	movge	r2, r3
 800523a:	2a00      	cmp	r2, #0
 800523c:	4691      	mov	r9, r2
 800523e:	dc37      	bgt.n	80052b0 <_printf_float+0x370>
 8005240:	f04f 0b00 	mov.w	fp, #0
 8005244:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005248:	f104 021a 	add.w	r2, r4, #26
 800524c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	eba3 0309 	sub.w	r3, r3, r9
 8005254:	455b      	cmp	r3, fp
 8005256:	dc33      	bgt.n	80052c0 <_printf_float+0x380>
 8005258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800525c:	429a      	cmp	r2, r3
 800525e:	db3b      	blt.n	80052d8 <_printf_float+0x398>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	07da      	lsls	r2, r3, #31
 8005264:	d438      	bmi.n	80052d8 <_printf_float+0x398>
 8005266:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800526a:	eba2 0903 	sub.w	r9, r2, r3
 800526e:	9b05      	ldr	r3, [sp, #20]
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	4591      	cmp	r9, r2
 8005274:	bfa8      	it	ge
 8005276:	4691      	movge	r9, r2
 8005278:	f1b9 0f00 	cmp.w	r9, #0
 800527c:	dc35      	bgt.n	80052ea <_printf_float+0x3aa>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005286:	f104 0a1a 	add.w	sl, r4, #26
 800528a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	eba3 0309 	sub.w	r3, r3, r9
 8005294:	4543      	cmp	r3, r8
 8005296:	f77f af79 	ble.w	800518c <_printf_float+0x24c>
 800529a:	2301      	movs	r3, #1
 800529c:	4652      	mov	r2, sl
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	f43f aeaa 	beq.w	8004ffe <_printf_float+0xbe>
 80052aa:	f108 0801 	add.w	r8, r8, #1
 80052ae:	e7ec      	b.n	800528a <_printf_float+0x34a>
 80052b0:	4613      	mov	r3, r2
 80052b2:	4631      	mov	r1, r6
 80052b4:	4642      	mov	r2, r8
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	d1c0      	bne.n	8005240 <_printf_float+0x300>
 80052be:	e69e      	b.n	8004ffe <_printf_float+0xbe>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4631      	mov	r1, r6
 80052c4:	4628      	mov	r0, r5
 80052c6:	9205      	str	r2, [sp, #20]
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f ae97 	beq.w	8004ffe <_printf_float+0xbe>
 80052d0:	9a05      	ldr	r2, [sp, #20]
 80052d2:	f10b 0b01 	add.w	fp, fp, #1
 80052d6:	e7b9      	b.n	800524c <_printf_float+0x30c>
 80052d8:	ee18 3a10 	vmov	r3, s16
 80052dc:	4652      	mov	r2, sl
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1be      	bne.n	8005266 <_printf_float+0x326>
 80052e8:	e689      	b.n	8004ffe <_printf_float+0xbe>
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	464b      	mov	r3, r9
 80052ee:	4442      	add	r2, r8
 80052f0:	4631      	mov	r1, r6
 80052f2:	4628      	mov	r0, r5
 80052f4:	47b8      	blx	r7
 80052f6:	3001      	adds	r0, #1
 80052f8:	d1c1      	bne.n	800527e <_printf_float+0x33e>
 80052fa:	e680      	b.n	8004ffe <_printf_float+0xbe>
 80052fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fe:	2a01      	cmp	r2, #1
 8005300:	dc01      	bgt.n	8005306 <_printf_float+0x3c6>
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d53a      	bpl.n	800537c <_printf_float+0x43c>
 8005306:	2301      	movs	r3, #1
 8005308:	4642      	mov	r2, r8
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f ae74 	beq.w	8004ffe <_printf_float+0xbe>
 8005316:	ee18 3a10 	vmov	r3, s16
 800531a:	4652      	mov	r2, sl
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae6b 	beq.w	8004ffe <_printf_float+0xbe>
 8005328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005334:	f7fb fbf8 	bl	8000b28 <__aeabi_dcmpeq>
 8005338:	b9d8      	cbnz	r0, 8005372 <_printf_float+0x432>
 800533a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800533e:	f108 0201 	add.w	r2, r8, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	d10e      	bne.n	800536a <_printf_float+0x42a>
 800534c:	e657      	b.n	8004ffe <_printf_float+0xbe>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae50 	beq.w	8004ffe <_printf_float+0xbe>
 800535e:	f108 0801 	add.w	r8, r8, #1
 8005362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005364:	3b01      	subs	r3, #1
 8005366:	4543      	cmp	r3, r8
 8005368:	dcf1      	bgt.n	800534e <_printf_float+0x40e>
 800536a:	464b      	mov	r3, r9
 800536c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005370:	e6da      	b.n	8005128 <_printf_float+0x1e8>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	f104 0a1a 	add.w	sl, r4, #26
 800537a:	e7f2      	b.n	8005362 <_printf_float+0x422>
 800537c:	2301      	movs	r3, #1
 800537e:	4642      	mov	r2, r8
 8005380:	e7df      	b.n	8005342 <_printf_float+0x402>
 8005382:	2301      	movs	r3, #1
 8005384:	464a      	mov	r2, r9
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae36 	beq.w	8004ffe <_printf_float+0xbe>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	68e3      	ldr	r3, [r4, #12]
 8005398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539a:	1a5b      	subs	r3, r3, r1
 800539c:	4543      	cmp	r3, r8
 800539e:	dcf0      	bgt.n	8005382 <_printf_float+0x442>
 80053a0:	e6f8      	b.n	8005194 <_printf_float+0x254>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	f104 0919 	add.w	r9, r4, #25
 80053aa:	e7f4      	b.n	8005396 <_printf_float+0x456>

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4699      	mov	r9, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f8:	1e13      	subs	r3, r2, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf02      	ittt	eq
 800541e:	68e5      	ldreq	r5, [r4, #12]
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	1aed      	subeq	r5, r5, r3
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4649      	mov	r1, r9
 8005448:	4638      	mov	r0, r7
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	; 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	47c0      	blx	r8
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005490:	2f78      	cmp	r7, #120	; 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	; 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d4 	beq.w	8005652 <_printf_i+0x1ca>
 80054aa:	2f58      	cmp	r7, #88	; 0x58
 80054ac:	f000 80c0 	beq.w	8005630 <_printf_i+0x1a8>
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	; (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005639 	.word	0x08005639
 80054f8:	08005561 	.word	0x08005561
 80054fc:	080055f3 	.word	0x080055f3
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	0800565b 	.word	0x0800565b
 800550c:	080054b1 	.word	0x080054b1
 8005510:	08005561 	.word	0x08005561
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055fb 	.word	0x080055fb
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	602a      	str	r2, [r5, #0]
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e09f      	b.n	8005674 <_printf_i+0x1ec>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	0607      	lsls	r7, r0, #24
 800553a:	f103 0104 	add.w	r1, r3, #4
 800553e:	6029      	str	r1, [r5, #0]
 8005540:	d501      	bpl.n	8005546 <_printf_i+0xbe>
 8005542:	681e      	ldr	r6, [r3, #0]
 8005544:	e003      	b.n	800554e <_printf_i+0xc6>
 8005546:	0646      	lsls	r6, r0, #25
 8005548:	d5fb      	bpl.n	8005542 <_printf_i+0xba>
 800554a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800554e:	2e00      	cmp	r6, #0
 8005550:	da03      	bge.n	800555a <_printf_i+0xd2>
 8005552:	232d      	movs	r3, #45	; 0x2d
 8005554:	4276      	negs	r6, r6
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555a:	485a      	ldr	r0, [pc, #360]	; (80056c4 <_printf_i+0x23c>)
 800555c:	230a      	movs	r3, #10
 800555e:	e012      	b.n	8005586 <_printf_i+0xfe>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	6820      	ldr	r0, [r4, #0]
 8005564:	1d19      	adds	r1, r3, #4
 8005566:	6029      	str	r1, [r5, #0]
 8005568:	0605      	lsls	r5, r0, #24
 800556a:	d501      	bpl.n	8005570 <_printf_i+0xe8>
 800556c:	681e      	ldr	r6, [r3, #0]
 800556e:	e002      	b.n	8005576 <_printf_i+0xee>
 8005570:	0641      	lsls	r1, r0, #25
 8005572:	d5fb      	bpl.n	800556c <_printf_i+0xe4>
 8005574:	881e      	ldrh	r6, [r3, #0]
 8005576:	4853      	ldr	r0, [pc, #332]	; (80056c4 <_printf_i+0x23c>)
 8005578:	2f6f      	cmp	r7, #111	; 0x6f
 800557a:	bf0c      	ite	eq
 800557c:	2308      	moveq	r3, #8
 800557e:	230a      	movne	r3, #10
 8005580:	2100      	movs	r1, #0
 8005582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005586:	6865      	ldr	r5, [r4, #4]
 8005588:	60a5      	str	r5, [r4, #8]
 800558a:	2d00      	cmp	r5, #0
 800558c:	bfa2      	ittt	ge
 800558e:	6821      	ldrge	r1, [r4, #0]
 8005590:	f021 0104 	bicge.w	r1, r1, #4
 8005594:	6021      	strge	r1, [r4, #0]
 8005596:	b90e      	cbnz	r6, 800559c <_printf_i+0x114>
 8005598:	2d00      	cmp	r5, #0
 800559a:	d04b      	beq.n	8005634 <_printf_i+0x1ac>
 800559c:	4615      	mov	r5, r2
 800559e:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a2:	fb03 6711 	mls	r7, r3, r1, r6
 80055a6:	5dc7      	ldrb	r7, [r0, r7]
 80055a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055ac:	4637      	mov	r7, r6
 80055ae:	42bb      	cmp	r3, r7
 80055b0:	460e      	mov	r6, r1
 80055b2:	d9f4      	bls.n	800559e <_printf_i+0x116>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10b      	bne.n	80055d0 <_printf_i+0x148>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07de      	lsls	r6, r3, #31
 80055bc:	d508      	bpl.n	80055d0 <_printf_i+0x148>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6861      	ldr	r1, [r4, #4]
 80055c2:	4299      	cmp	r1, r3
 80055c4:	bfde      	ittt	le
 80055c6:	2330      	movle	r3, #48	; 0x30
 80055c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d0:	1b52      	subs	r2, r2, r5
 80055d2:	6122      	str	r2, [r4, #16]
 80055d4:	f8cd a000 	str.w	sl, [sp]
 80055d8:	464b      	mov	r3, r9
 80055da:	aa03      	add	r2, sp, #12
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fee4 	bl	80053ac <_printf_common>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d14a      	bne.n	800567e <_printf_i+0x1f6>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	b004      	add	sp, #16
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f043 0320 	orr.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	4833      	ldr	r0, [pc, #204]	; (80056c8 <_printf_i+0x240>)
 80055fc:	2778      	movs	r7, #120	; 0x78
 80055fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6829      	ldr	r1, [r5, #0]
 8005606:	061f      	lsls	r7, r3, #24
 8005608:	f851 6b04 	ldr.w	r6, [r1], #4
 800560c:	d402      	bmi.n	8005614 <_printf_i+0x18c>
 800560e:	065f      	lsls	r7, r3, #25
 8005610:	bf48      	it	mi
 8005612:	b2b6      	uxthmi	r6, r6
 8005614:	07df      	lsls	r7, r3, #31
 8005616:	bf48      	it	mi
 8005618:	f043 0320 	orrmi.w	r3, r3, #32
 800561c:	6029      	str	r1, [r5, #0]
 800561e:	bf48      	it	mi
 8005620:	6023      	strmi	r3, [r4, #0]
 8005622:	b91e      	cbnz	r6, 800562c <_printf_i+0x1a4>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	f023 0320 	bic.w	r3, r3, #32
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	2310      	movs	r3, #16
 800562e:	e7a7      	b.n	8005580 <_printf_i+0xf8>
 8005630:	4824      	ldr	r0, [pc, #144]	; (80056c4 <_printf_i+0x23c>)
 8005632:	e7e4      	b.n	80055fe <_printf_i+0x176>
 8005634:	4615      	mov	r5, r2
 8005636:	e7bd      	b.n	80055b4 <_printf_i+0x12c>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	6826      	ldr	r6, [r4, #0]
 800563c:	6961      	ldr	r1, [r4, #20]
 800563e:	1d18      	adds	r0, r3, #4
 8005640:	6028      	str	r0, [r5, #0]
 8005642:	0635      	lsls	r5, r6, #24
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	d501      	bpl.n	800564c <_printf_i+0x1c4>
 8005648:	6019      	str	r1, [r3, #0]
 800564a:	e002      	b.n	8005652 <_printf_i+0x1ca>
 800564c:	0670      	lsls	r0, r6, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0x1c0>
 8005650:	8019      	strh	r1, [r3, #0]
 8005652:	2300      	movs	r3, #0
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	4615      	mov	r5, r2
 8005658:	e7bc      	b.n	80055d4 <_printf_i+0x14c>
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	2100      	movs	r1, #0
 8005666:	4628      	mov	r0, r5
 8005668:	f7fa fde2 	bl	8000230 <memchr>
 800566c:	b108      	cbz	r0, 8005672 <_printf_i+0x1ea>
 800566e:	1b40      	subs	r0, r0, r5
 8005670:	6060      	str	r0, [r4, #4]
 8005672:	6863      	ldr	r3, [r4, #4]
 8005674:	6123      	str	r3, [r4, #16]
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567c:	e7aa      	b.n	80055d4 <_printf_i+0x14c>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	462a      	mov	r2, r5
 8005682:	4649      	mov	r1, r9
 8005684:	4640      	mov	r0, r8
 8005686:	47d0      	blx	sl
 8005688:	3001      	adds	r0, #1
 800568a:	d0ad      	beq.n	80055e8 <_printf_i+0x160>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	079b      	lsls	r3, r3, #30
 8005690:	d413      	bmi.n	80056ba <_printf_i+0x232>
 8005692:	68e0      	ldr	r0, [r4, #12]
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	4298      	cmp	r0, r3
 8005698:	bfb8      	it	lt
 800569a:	4618      	movlt	r0, r3
 800569c:	e7a6      	b.n	80055ec <_printf_i+0x164>
 800569e:	2301      	movs	r3, #1
 80056a0:	4632      	mov	r2, r6
 80056a2:	4649      	mov	r1, r9
 80056a4:	4640      	mov	r0, r8
 80056a6:	47d0      	blx	sl
 80056a8:	3001      	adds	r0, #1
 80056aa:	d09d      	beq.n	80055e8 <_printf_i+0x160>
 80056ac:	3501      	adds	r5, #1
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	9903      	ldr	r1, [sp, #12]
 80056b2:	1a5b      	subs	r3, r3, r1
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dcf2      	bgt.n	800569e <_printf_i+0x216>
 80056b8:	e7eb      	b.n	8005692 <_printf_i+0x20a>
 80056ba:	2500      	movs	r5, #0
 80056bc:	f104 0619 	add.w	r6, r4, #25
 80056c0:	e7f5      	b.n	80056ae <_printf_i+0x226>
 80056c2:	bf00      	nop
 80056c4:	08007e6b 	.word	0x08007e6b
 80056c8:	08007e7c 	.word	0x08007e7c

080056cc <std>:
 80056cc:	2300      	movs	r3, #0
 80056ce:	b510      	push	{r4, lr}
 80056d0:	4604      	mov	r4, r0
 80056d2:	e9c0 3300 	strd	r3, r3, [r0]
 80056d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056da:	6083      	str	r3, [r0, #8]
 80056dc:	8181      	strh	r1, [r0, #12]
 80056de:	6643      	str	r3, [r0, #100]	; 0x64
 80056e0:	81c2      	strh	r2, [r0, #14]
 80056e2:	6183      	str	r3, [r0, #24]
 80056e4:	4619      	mov	r1, r3
 80056e6:	2208      	movs	r2, #8
 80056e8:	305c      	adds	r0, #92	; 0x5c
 80056ea:	f000 f935 	bl	8005958 <memset>
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <std+0x58>)
 80056f0:	6263      	str	r3, [r4, #36]	; 0x24
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <std+0x5c>)
 80056f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <std+0x60>)
 80056f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <std+0x64>)
 80056fc:	6323      	str	r3, [r4, #48]	; 0x30
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <std+0x68>)
 8005700:	6224      	str	r4, [r4, #32]
 8005702:	429c      	cmp	r4, r3
 8005704:	d006      	beq.n	8005714 <std+0x48>
 8005706:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800570a:	4294      	cmp	r4, r2
 800570c:	d002      	beq.n	8005714 <std+0x48>
 800570e:	33d0      	adds	r3, #208	; 0xd0
 8005710:	429c      	cmp	r4, r3
 8005712:	d105      	bne.n	8005720 <std+0x54>
 8005714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800571c:	f000 b9ac 	b.w	8005a78 <__retarget_lock_init_recursive>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	bf00      	nop
 8005724:	08005891 	.word	0x08005891
 8005728:	080058b3 	.word	0x080058b3
 800572c:	080058eb 	.word	0x080058eb
 8005730:	0800590f 	.word	0x0800590f
 8005734:	20000708 	.word	0x20000708

08005738 <stdio_exit_handler>:
 8005738:	4a02      	ldr	r2, [pc, #8]	; (8005744 <stdio_exit_handler+0xc>)
 800573a:	4903      	ldr	r1, [pc, #12]	; (8005748 <stdio_exit_handler+0x10>)
 800573c:	4803      	ldr	r0, [pc, #12]	; (800574c <stdio_exit_handler+0x14>)
 800573e:	f000 b869 	b.w	8005814 <_fwalk_sglue>
 8005742:	bf00      	nop
 8005744:	20000020 	.word	0x20000020
 8005748:	08007449 	.word	0x08007449
 800574c:	2000002c 	.word	0x2000002c

08005750 <cleanup_stdio>:
 8005750:	6841      	ldr	r1, [r0, #4]
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <cleanup_stdio+0x34>)
 8005754:	4299      	cmp	r1, r3
 8005756:	b510      	push	{r4, lr}
 8005758:	4604      	mov	r4, r0
 800575a:	d001      	beq.n	8005760 <cleanup_stdio+0x10>
 800575c:	f001 fe74 	bl	8007448 <_fflush_r>
 8005760:	68a1      	ldr	r1, [r4, #8]
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <cleanup_stdio+0x38>)
 8005764:	4299      	cmp	r1, r3
 8005766:	d002      	beq.n	800576e <cleanup_stdio+0x1e>
 8005768:	4620      	mov	r0, r4
 800576a:	f001 fe6d 	bl	8007448 <_fflush_r>
 800576e:	68e1      	ldr	r1, [r4, #12]
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <cleanup_stdio+0x3c>)
 8005772:	4299      	cmp	r1, r3
 8005774:	d004      	beq.n	8005780 <cleanup_stdio+0x30>
 8005776:	4620      	mov	r0, r4
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577c:	f001 be64 	b.w	8007448 <_fflush_r>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	bf00      	nop
 8005784:	20000708 	.word	0x20000708
 8005788:	20000770 	.word	0x20000770
 800578c:	200007d8 	.word	0x200007d8

08005790 <global_stdio_init.part.0>:
 8005790:	b510      	push	{r4, lr}
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <global_stdio_init.part.0+0x30>)
 8005794:	4c0b      	ldr	r4, [pc, #44]	; (80057c4 <global_stdio_init.part.0+0x34>)
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <global_stdio_init.part.0+0x38>)
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	4620      	mov	r0, r4
 800579c:	2200      	movs	r2, #0
 800579e:	2104      	movs	r1, #4
 80057a0:	f7ff ff94 	bl	80056cc <std>
 80057a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057a8:	2201      	movs	r2, #1
 80057aa:	2109      	movs	r1, #9
 80057ac:	f7ff ff8e 	bl	80056cc <std>
 80057b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057b4:	2202      	movs	r2, #2
 80057b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ba:	2112      	movs	r1, #18
 80057bc:	f7ff bf86 	b.w	80056cc <std>
 80057c0:	20000840 	.word	0x20000840
 80057c4:	20000708 	.word	0x20000708
 80057c8:	08005739 	.word	0x08005739

080057cc <__sfp_lock_acquire>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__sfp_lock_acquire+0x8>)
 80057ce:	f000 b954 	b.w	8005a7a <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000849 	.word	0x20000849

080057d8 <__sfp_lock_release>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__sfp_lock_release+0x8>)
 80057da:	f000 b94f 	b.w	8005a7c <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	20000849 	.word	0x20000849

080057e4 <__sinit>:
 80057e4:	b510      	push	{r4, lr}
 80057e6:	4604      	mov	r4, r0
 80057e8:	f7ff fff0 	bl	80057cc <__sfp_lock_acquire>
 80057ec:	6a23      	ldr	r3, [r4, #32]
 80057ee:	b11b      	cbz	r3, 80057f8 <__sinit+0x14>
 80057f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f4:	f7ff bff0 	b.w	80057d8 <__sfp_lock_release>
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <__sinit+0x28>)
 80057fa:	6223      	str	r3, [r4, #32]
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <__sinit+0x2c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f5      	bne.n	80057f0 <__sinit+0xc>
 8005804:	f7ff ffc4 	bl	8005790 <global_stdio_init.part.0>
 8005808:	e7f2      	b.n	80057f0 <__sinit+0xc>
 800580a:	bf00      	nop
 800580c:	08005751 	.word	0x08005751
 8005810:	20000840 	.word	0x20000840

08005814 <_fwalk_sglue>:
 8005814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005818:	4607      	mov	r7, r0
 800581a:	4688      	mov	r8, r1
 800581c:	4614      	mov	r4, r2
 800581e:	2600      	movs	r6, #0
 8005820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005824:	f1b9 0901 	subs.w	r9, r9, #1
 8005828:	d505      	bpl.n	8005836 <_fwalk_sglue+0x22>
 800582a:	6824      	ldr	r4, [r4, #0]
 800582c:	2c00      	cmp	r4, #0
 800582e:	d1f7      	bne.n	8005820 <_fwalk_sglue+0xc>
 8005830:	4630      	mov	r0, r6
 8005832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d907      	bls.n	800584c <_fwalk_sglue+0x38>
 800583c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005840:	3301      	adds	r3, #1
 8005842:	d003      	beq.n	800584c <_fwalk_sglue+0x38>
 8005844:	4629      	mov	r1, r5
 8005846:	4638      	mov	r0, r7
 8005848:	47c0      	blx	r8
 800584a:	4306      	orrs	r6, r0
 800584c:	3568      	adds	r5, #104	; 0x68
 800584e:	e7e9      	b.n	8005824 <_fwalk_sglue+0x10>

08005850 <siprintf>:
 8005850:	b40e      	push	{r1, r2, r3}
 8005852:	b500      	push	{lr}
 8005854:	b09c      	sub	sp, #112	; 0x70
 8005856:	ab1d      	add	r3, sp, #116	; 0x74
 8005858:	9002      	str	r0, [sp, #8]
 800585a:	9006      	str	r0, [sp, #24]
 800585c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005860:	4809      	ldr	r0, [pc, #36]	; (8005888 <siprintf+0x38>)
 8005862:	9107      	str	r1, [sp, #28]
 8005864:	9104      	str	r1, [sp, #16]
 8005866:	4909      	ldr	r1, [pc, #36]	; (800588c <siprintf+0x3c>)
 8005868:	f853 2b04 	ldr.w	r2, [r3], #4
 800586c:	9105      	str	r1, [sp, #20]
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	a902      	add	r1, sp, #8
 8005874:	f001 fc64 	bl	8007140 <_svfiprintf_r>
 8005878:	9b02      	ldr	r3, [sp, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	b01c      	add	sp, #112	; 0x70
 8005880:	f85d eb04 	ldr.w	lr, [sp], #4
 8005884:	b003      	add	sp, #12
 8005886:	4770      	bx	lr
 8005888:	20000078 	.word	0x20000078
 800588c:	ffff0208 	.word	0xffff0208

08005890 <__sread>:
 8005890:	b510      	push	{r4, lr}
 8005892:	460c      	mov	r4, r1
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	f000 f8a0 	bl	80059dc <_read_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	bfab      	itete	ge
 80058a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058a2:	89a3      	ldrhlt	r3, [r4, #12]
 80058a4:	181b      	addge	r3, r3, r0
 80058a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058aa:	bfac      	ite	ge
 80058ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ae:	81a3      	strhlt	r3, [r4, #12]
 80058b0:	bd10      	pop	{r4, pc}

080058b2 <__swrite>:
 80058b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b6:	461f      	mov	r7, r3
 80058b8:	898b      	ldrh	r3, [r1, #12]
 80058ba:	05db      	lsls	r3, r3, #23
 80058bc:	4605      	mov	r5, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	4616      	mov	r6, r2
 80058c2:	d505      	bpl.n	80058d0 <__swrite+0x1e>
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	2302      	movs	r3, #2
 80058ca:	2200      	movs	r2, #0
 80058cc:	f000 f874 	bl	80059b8 <_lseek_r>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	4632      	mov	r2, r6
 80058de:	463b      	mov	r3, r7
 80058e0:	4628      	mov	r0, r5
 80058e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	f000 b88b 	b.w	8005a00 <_write_r>

080058ea <__sseek>:
 80058ea:	b510      	push	{r4, lr}
 80058ec:	460c      	mov	r4, r1
 80058ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f2:	f000 f861 	bl	80059b8 <_lseek_r>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	bf15      	itete	ne
 80058fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005906:	81a3      	strheq	r3, [r4, #12]
 8005908:	bf18      	it	ne
 800590a:	81a3      	strhne	r3, [r4, #12]
 800590c:	bd10      	pop	{r4, pc}

0800590e <__sclose>:
 800590e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005912:	f000 b841 	b.w	8005998 <_close_r>
	...

08005918 <_vsiprintf_r>:
 8005918:	b500      	push	{lr}
 800591a:	b09b      	sub	sp, #108	; 0x6c
 800591c:	9100      	str	r1, [sp, #0]
 800591e:	9104      	str	r1, [sp, #16]
 8005920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005924:	9105      	str	r1, [sp, #20]
 8005926:	9102      	str	r1, [sp, #8]
 8005928:	4905      	ldr	r1, [pc, #20]	; (8005940 <_vsiprintf_r+0x28>)
 800592a:	9103      	str	r1, [sp, #12]
 800592c:	4669      	mov	r1, sp
 800592e:	f001 fc07 	bl	8007140 <_svfiprintf_r>
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	b01b      	add	sp, #108	; 0x6c
 800593a:	f85d fb04 	ldr.w	pc, [sp], #4
 800593e:	bf00      	nop
 8005940:	ffff0208 	.word	0xffff0208

08005944 <vsiprintf>:
 8005944:	4613      	mov	r3, r2
 8005946:	460a      	mov	r2, r1
 8005948:	4601      	mov	r1, r0
 800594a:	4802      	ldr	r0, [pc, #8]	; (8005954 <vsiprintf+0x10>)
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f7ff bfe3 	b.w	8005918 <_vsiprintf_r>
 8005952:	bf00      	nop
 8005954:	20000078 	.word	0x20000078

08005958 <memset>:
 8005958:	4402      	add	r2, r0
 800595a:	4603      	mov	r3, r0
 800595c:	4293      	cmp	r3, r2
 800595e:	d100      	bne.n	8005962 <memset+0xa>
 8005960:	4770      	bx	lr
 8005962:	f803 1b01 	strb.w	r1, [r3], #1
 8005966:	e7f9      	b.n	800595c <memset+0x4>

08005968 <strncpy>:
 8005968:	b510      	push	{r4, lr}
 800596a:	3901      	subs	r1, #1
 800596c:	4603      	mov	r3, r0
 800596e:	b132      	cbz	r2, 800597e <strncpy+0x16>
 8005970:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005974:	f803 4b01 	strb.w	r4, [r3], #1
 8005978:	3a01      	subs	r2, #1
 800597a:	2c00      	cmp	r4, #0
 800597c:	d1f7      	bne.n	800596e <strncpy+0x6>
 800597e:	441a      	add	r2, r3
 8005980:	2100      	movs	r1, #0
 8005982:	4293      	cmp	r3, r2
 8005984:	d100      	bne.n	8005988 <strncpy+0x20>
 8005986:	bd10      	pop	{r4, pc}
 8005988:	f803 1b01 	strb.w	r1, [r3], #1
 800598c:	e7f9      	b.n	8005982 <strncpy+0x1a>
	...

08005990 <_localeconv_r>:
 8005990:	4800      	ldr	r0, [pc, #0]	; (8005994 <_localeconv_r+0x4>)
 8005992:	4770      	bx	lr
 8005994:	2000016c 	.word	0x2000016c

08005998 <_close_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_close_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fc fdaf 	bl	8002506 <_close>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_close_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_close_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000844 	.word	0x20000844

080059b8 <_lseek_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_lseek_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fc fdc4 	bl	8002554 <_lseek>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_lseek_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_lseek_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	20000844 	.word	0x20000844

080059dc <_read_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d07      	ldr	r5, [pc, #28]	; (80059fc <_read_r+0x20>)
 80059e0:	4604      	mov	r4, r0
 80059e2:	4608      	mov	r0, r1
 80059e4:	4611      	mov	r1, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f7fc fd52 	bl	8002494 <_read>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_read_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_read_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	20000844 	.word	0x20000844

08005a00 <_write_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d07      	ldr	r5, [pc, #28]	; (8005a20 <_write_r+0x20>)
 8005a04:	4604      	mov	r4, r0
 8005a06:	4608      	mov	r0, r1
 8005a08:	4611      	mov	r1, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fc fd5d 	bl	80024ce <_write>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_write_r+0x1e>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_write_r+0x1e>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	20000844 	.word	0x20000844

08005a24 <__errno>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <__errno+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000078 	.word	0x20000078

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4d0d      	ldr	r5, [pc, #52]	; (8005a68 <__libc_init_array+0x38>)
 8005a34:	4c0d      	ldr	r4, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a36:	1b64      	subs	r4, r4, r5
 8005a38:	10a4      	asrs	r4, r4, #2
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	4d0b      	ldr	r5, [pc, #44]	; (8005a70 <__libc_init_array+0x40>)
 8005a42:	4c0c      	ldr	r4, [pc, #48]	; (8005a74 <__libc_init_array+0x44>)
 8005a44:	f002 f896 	bl	8007b74 <_init>
 8005a48:	1b64      	subs	r4, r4, r5
 8005a4a:	10a4      	asrs	r4, r4, #2
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	080080d4 	.word	0x080080d4
 8005a6c:	080080d4 	.word	0x080080d4
 8005a70:	080080d4 	.word	0x080080d4
 8005a74:	080080d8 	.word	0x080080d8

08005a78 <__retarget_lock_init_recursive>:
 8005a78:	4770      	bx	lr

08005a7a <__retarget_lock_acquire_recursive>:
 8005a7a:	4770      	bx	lr

08005a7c <__retarget_lock_release_recursive>:
 8005a7c:	4770      	bx	lr

08005a7e <memcpy>:
 8005a7e:	440a      	add	r2, r1
 8005a80:	4291      	cmp	r1, r2
 8005a82:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a86:	d100      	bne.n	8005a8a <memcpy+0xc>
 8005a88:	4770      	bx	lr
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a94:	4291      	cmp	r1, r2
 8005a96:	d1f9      	bne.n	8005a8c <memcpy+0xe>
 8005a98:	bd10      	pop	{r4, pc}

08005a9a <quorem>:
 8005a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9e:	6903      	ldr	r3, [r0, #16]
 8005aa0:	690c      	ldr	r4, [r1, #16]
 8005aa2:	42a3      	cmp	r3, r4
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	db7e      	blt.n	8005ba6 <quorem+0x10c>
 8005aa8:	3c01      	subs	r4, #1
 8005aaa:	f101 0814 	add.w	r8, r1, #20
 8005aae:	f100 0514 	add.w	r5, r0, #20
 8005ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005acc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ad0:	d331      	bcc.n	8005b36 <quorem+0x9c>
 8005ad2:	f04f 0e00 	mov.w	lr, #0
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	46ac      	mov	ip, r5
 8005ada:	46f2      	mov	sl, lr
 8005adc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ae0:	b293      	uxth	r3, r2
 8005ae2:	fb06 e303 	mla	r3, r6, r3, lr
 8005ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aea:	0c1a      	lsrs	r2, r3, #16
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ebaa 0303 	sub.w	r3, sl, r3
 8005af2:	f8dc a000 	ldr.w	sl, [ip]
 8005af6:	fa13 f38a 	uxtah	r3, r3, sl
 8005afa:	fb06 220e 	mla	r2, r6, lr, r2
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	9b00      	ldr	r3, [sp, #0]
 8005b02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b06:	b292      	uxth	r2, r2
 8005b08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b10:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b14:	4581      	cmp	r9, r0
 8005b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b1a:	f84c 3b04 	str.w	r3, [ip], #4
 8005b1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b22:	d2db      	bcs.n	8005adc <quorem+0x42>
 8005b24:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b28:	b92b      	cbnz	r3, 8005b36 <quorem+0x9c>
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	3b04      	subs	r3, #4
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	d32c      	bcc.n	8005b8e <quorem+0xf4>
 8005b34:	613c      	str	r4, [r7, #16]
 8005b36:	4638      	mov	r0, r7
 8005b38:	f001 f9a8 	bl	8006e8c <__mcmp>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	db22      	blt.n	8005b86 <quorem+0xec>
 8005b40:	3601      	adds	r6, #1
 8005b42:	4629      	mov	r1, r5
 8005b44:	2000      	movs	r0, #0
 8005b46:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b4a:	f8d1 c000 	ldr.w	ip, [r1]
 8005b4e:	b293      	uxth	r3, r2
 8005b50:	1ac3      	subs	r3, r0, r3
 8005b52:	0c12      	lsrs	r2, r2, #16
 8005b54:	fa13 f38c 	uxtah	r3, r3, ip
 8005b58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b66:	45c1      	cmp	r9, r8
 8005b68:	f841 3b04 	str.w	r3, [r1], #4
 8005b6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b70:	d2e9      	bcs.n	8005b46 <quorem+0xac>
 8005b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b7a:	b922      	cbnz	r2, 8005b86 <quorem+0xec>
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	d30a      	bcc.n	8005b9a <quorem+0x100>
 8005b84:	613c      	str	r4, [r7, #16]
 8005b86:	4630      	mov	r0, r6
 8005b88:	b003      	add	sp, #12
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	3b04      	subs	r3, #4
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	d1ce      	bne.n	8005b34 <quorem+0x9a>
 8005b96:	3c01      	subs	r4, #1
 8005b98:	e7c9      	b.n	8005b2e <quorem+0x94>
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	3b04      	subs	r3, #4
 8005b9e:	2a00      	cmp	r2, #0
 8005ba0:	d1f0      	bne.n	8005b84 <quorem+0xea>
 8005ba2:	3c01      	subs	r4, #1
 8005ba4:	e7eb      	b.n	8005b7e <quorem+0xe4>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	e7ee      	b.n	8005b88 <quorem+0xee>
 8005baa:	0000      	movs	r0, r0
 8005bac:	0000      	movs	r0, r0
	...

08005bb0 <_dtoa_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b04 	vpush	{d8-d9}
 8005bb8:	69c5      	ldr	r5, [r0, #28]
 8005bba:	b093      	sub	sp, #76	; 0x4c
 8005bbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bc0:	ec57 6b10 	vmov	r6, r7, d0
 8005bc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bc8:	9107      	str	r1, [sp, #28]
 8005bca:	4604      	mov	r4, r0
 8005bcc:	920a      	str	r2, [sp, #40]	; 0x28
 8005bce:	930d      	str	r3, [sp, #52]	; 0x34
 8005bd0:	b975      	cbnz	r5, 8005bf0 <_dtoa_r+0x40>
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	f000 fe2a 	bl	800682c <malloc>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	61e0      	str	r0, [r4, #28]
 8005bdc:	b920      	cbnz	r0, 8005be8 <_dtoa_r+0x38>
 8005bde:	4bae      	ldr	r3, [pc, #696]	; (8005e98 <_dtoa_r+0x2e8>)
 8005be0:	21ef      	movs	r1, #239	; 0xef
 8005be2:	48ae      	ldr	r0, [pc, #696]	; (8005e9c <_dtoa_r+0x2ec>)
 8005be4:	f001 fc82 	bl	80074ec <__assert_func>
 8005be8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bec:	6005      	str	r5, [r0, #0]
 8005bee:	60c5      	str	r5, [r0, #12]
 8005bf0:	69e3      	ldr	r3, [r4, #28]
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	b151      	cbz	r1, 8005c0c <_dtoa_r+0x5c>
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	604a      	str	r2, [r1, #4]
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4093      	lsls	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 ff07 	bl	8006a14 <_Bfree>
 8005c06:	69e3      	ldr	r3, [r4, #28]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	1e3b      	subs	r3, r7, #0
 8005c0e:	bfbb      	ittet	lt
 8005c10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	9303      	strlt	r3, [sp, #12]
 8005c16:	2300      	movge	r3, #0
 8005c18:	2201      	movlt	r2, #1
 8005c1a:	bfac      	ite	ge
 8005c1c:	f8c8 3000 	strge.w	r3, [r8]
 8005c20:	f8c8 2000 	strlt.w	r2, [r8]
 8005c24:	4b9e      	ldr	r3, [pc, #632]	; (8005ea0 <_dtoa_r+0x2f0>)
 8005c26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c2a:	ea33 0308 	bics.w	r3, r3, r8
 8005c2e:	d11b      	bne.n	8005c68 <_dtoa_r+0xb8>
 8005c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c32:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c3c:	4333      	orrs	r3, r6
 8005c3e:	f000 8593 	beq.w	8006768 <_dtoa_r+0xbb8>
 8005c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c44:	b963      	cbnz	r3, 8005c60 <_dtoa_r+0xb0>
 8005c46:	4b97      	ldr	r3, [pc, #604]	; (8005ea4 <_dtoa_r+0x2f4>)
 8005c48:	e027      	b.n	8005c9a <_dtoa_r+0xea>
 8005c4a:	4b97      	ldr	r3, [pc, #604]	; (8005ea8 <_dtoa_r+0x2f8>)
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	9800      	ldr	r0, [sp, #0]
 8005c56:	b013      	add	sp, #76	; 0x4c
 8005c58:	ecbd 8b04 	vpop	{d8-d9}
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c60:	4b90      	ldr	r3, [pc, #576]	; (8005ea4 <_dtoa_r+0x2f4>)
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	3303      	adds	r3, #3
 8005c66:	e7f3      	b.n	8005c50 <_dtoa_r+0xa0>
 8005c68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	ec51 0b17 	vmov	r0, r1, d7
 8005c72:	eeb0 8a47 	vmov.f32	s16, s14
 8005c76:	eef0 8a67 	vmov.f32	s17, s15
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fa ff54 	bl	8000b28 <__aeabi_dcmpeq>
 8005c80:	4681      	mov	r9, r0
 8005c82:	b160      	cbz	r0, 8005c9e <_dtoa_r+0xee>
 8005c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c86:	2301      	movs	r3, #1
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8568 	beq.w	8006762 <_dtoa_r+0xbb2>
 8005c92:	4b86      	ldr	r3, [pc, #536]	; (8005eac <_dtoa_r+0x2fc>)
 8005c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	e7da      	b.n	8005c54 <_dtoa_r+0xa4>
 8005c9e:	aa10      	add	r2, sp, #64	; 0x40
 8005ca0:	a911      	add	r1, sp, #68	; 0x44
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ca8:	eef0 0a68 	vmov.f32	s1, s17
 8005cac:	f001 f994 	bl	8006fd8 <__d2b>
 8005cb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	d07f      	beq.n	8005dba <_dtoa_r+0x20a>
 8005cba:	ee18 3a90 	vmov	r3, s17
 8005cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005cc6:	ec51 0b18 	vmov	r0, r1, d8
 8005cca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <_dtoa_r+0x300>)
 8005cdc:	f7fa fb04 	bl	80002e8 <__aeabi_dsub>
 8005ce0:	a367      	add	r3, pc, #412	; (adr r3, 8005e80 <_dtoa_r+0x2d0>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fcb7 	bl	8000658 <__aeabi_dmul>
 8005cea:	a367      	add	r3, pc, #412	; (adr r3, 8005e88 <_dtoa_r+0x2d8>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fafc 	bl	80002ec <__adddf3>
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	f7fa fc43 	bl	8000584 <__aeabi_i2d>
 8005cfe:	a364      	add	r3, pc, #400	; (adr r3, 8005e90 <_dtoa_r+0x2e0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fca8 	bl	8000658 <__aeabi_dmul>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f7fa faec 	bl	80002ec <__adddf3>
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	f7fa ff4e 	bl	8000bb8 <__aeabi_d2iz>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4683      	mov	fp, r0
 8005d20:	2300      	movs	r3, #0
 8005d22:	4630      	mov	r0, r6
 8005d24:	4639      	mov	r1, r7
 8005d26:	f7fa ff09 	bl	8000b3c <__aeabi_dcmplt>
 8005d2a:	b148      	cbz	r0, 8005d40 <_dtoa_r+0x190>
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	f7fa fc29 	bl	8000584 <__aeabi_i2d>
 8005d32:	4632      	mov	r2, r6
 8005d34:	463b      	mov	r3, r7
 8005d36:	f7fa fef7 	bl	8000b28 <__aeabi_dcmpeq>
 8005d3a:	b908      	cbnz	r0, 8005d40 <_dtoa_r+0x190>
 8005d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d40:	f1bb 0f16 	cmp.w	fp, #22
 8005d44:	d857      	bhi.n	8005df6 <_dtoa_r+0x246>
 8005d46:	4b5b      	ldr	r3, [pc, #364]	; (8005eb4 <_dtoa_r+0x304>)
 8005d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	ec51 0b18 	vmov	r0, r1, d8
 8005d54:	f7fa fef2 	bl	8000b3c <__aeabi_dcmplt>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d04e      	beq.n	8005dfa <_dtoa_r+0x24a>
 8005d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d60:	2300      	movs	r3, #0
 8005d62:	930c      	str	r3, [sp, #48]	; 0x30
 8005d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d66:	1b5b      	subs	r3, r3, r5
 8005d68:	1e5a      	subs	r2, r3, #1
 8005d6a:	bf45      	ittet	mi
 8005d6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d70:	9305      	strmi	r3, [sp, #20]
 8005d72:	2300      	movpl	r3, #0
 8005d74:	2300      	movmi	r3, #0
 8005d76:	9206      	str	r2, [sp, #24]
 8005d78:	bf54      	ite	pl
 8005d7a:	9305      	strpl	r3, [sp, #20]
 8005d7c:	9306      	strmi	r3, [sp, #24]
 8005d7e:	f1bb 0f00 	cmp.w	fp, #0
 8005d82:	db3c      	blt.n	8005dfe <_dtoa_r+0x24e>
 8005d84:	9b06      	ldr	r3, [sp, #24]
 8005d86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d8a:	445b      	add	r3, fp
 8005d8c:	9306      	str	r3, [sp, #24]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9308      	str	r3, [sp, #32]
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	2b09      	cmp	r3, #9
 8005d96:	d868      	bhi.n	8005e6a <_dtoa_r+0x2ba>
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	bfc4      	itt	gt
 8005d9c:	3b04      	subgt	r3, #4
 8005d9e:	9307      	strgt	r3, [sp, #28]
 8005da0:	9b07      	ldr	r3, [sp, #28]
 8005da2:	f1a3 0302 	sub.w	r3, r3, #2
 8005da6:	bfcc      	ite	gt
 8005da8:	2500      	movgt	r5, #0
 8005daa:	2501      	movle	r5, #1
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	f200 8085 	bhi.w	8005ebc <_dtoa_r+0x30c>
 8005db2:	e8df f003 	tbb	[pc, r3]
 8005db6:	3b2e      	.short	0x3b2e
 8005db8:	5839      	.short	0x5839
 8005dba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005dbe:	441d      	add	r5, r3
 8005dc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	bfc1      	itttt	gt
 8005dc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005dcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005dd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005dd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005dd8:	bfd6      	itet	le
 8005dda:	f1c3 0320 	rsble	r3, r3, #32
 8005dde:	ea48 0003 	orrgt.w	r0, r8, r3
 8005de2:	fa06 f003 	lslle.w	r0, r6, r3
 8005de6:	f7fa fbbd 	bl	8000564 <__aeabi_ui2d>
 8005dea:	2201      	movs	r2, #1
 8005dec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005df0:	3d01      	subs	r5, #1
 8005df2:	920e      	str	r2, [sp, #56]	; 0x38
 8005df4:	e76f      	b.n	8005cd6 <_dtoa_r+0x126>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e7b3      	b.n	8005d62 <_dtoa_r+0x1b2>
 8005dfa:	900c      	str	r0, [sp, #48]	; 0x30
 8005dfc:	e7b2      	b.n	8005d64 <_dtoa_r+0x1b4>
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	eba3 030b 	sub.w	r3, r3, fp
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	f1cb 0300 	rsb	r3, fp, #0
 8005e0a:	9308      	str	r3, [sp, #32]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e10:	e7bf      	b.n	8005d92 <_dtoa_r+0x1e2>
 8005e12:	2300      	movs	r3, #0
 8005e14:	9309      	str	r3, [sp, #36]	; 0x24
 8005e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc52      	bgt.n	8005ec2 <_dtoa_r+0x312>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	461a      	mov	r2, r3
 8005e24:	920a      	str	r2, [sp, #40]	; 0x28
 8005e26:	e00b      	b.n	8005e40 <_dtoa_r+0x290>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7f3      	b.n	8005e14 <_dtoa_r+0x264>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e32:	445b      	add	r3, fp
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	3301      	adds	r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	bfb8      	it	lt
 8005e3e:	2301      	movlt	r3, #1
 8005e40:	69e0      	ldr	r0, [r4, #28]
 8005e42:	2100      	movs	r1, #0
 8005e44:	2204      	movs	r2, #4
 8005e46:	f102 0614 	add.w	r6, r2, #20
 8005e4a:	429e      	cmp	r6, r3
 8005e4c:	d93d      	bls.n	8005eca <_dtoa_r+0x31a>
 8005e4e:	6041      	str	r1, [r0, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fd9f 	bl	8006994 <_Balloc>
 8005e56:	9000      	str	r0, [sp, #0]
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d139      	bne.n	8005ed0 <_dtoa_r+0x320>
 8005e5c:	4b16      	ldr	r3, [pc, #88]	; (8005eb8 <_dtoa_r+0x308>)
 8005e5e:	4602      	mov	r2, r0
 8005e60:	f240 11af 	movw	r1, #431	; 0x1af
 8005e64:	e6bd      	b.n	8005be2 <_dtoa_r+0x32>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e7e1      	b.n	8005e2e <_dtoa_r+0x27e>
 8005e6a:	2501      	movs	r5, #1
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	9509      	str	r5, [sp, #36]	; 0x24
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2312      	movs	r3, #18
 8005e7e:	e7d1      	b.n	8005e24 <_dtoa_r+0x274>
 8005e80:	636f4361 	.word	0x636f4361
 8005e84:	3fd287a7 	.word	0x3fd287a7
 8005e88:	8b60c8b3 	.word	0x8b60c8b3
 8005e8c:	3fc68a28 	.word	0x3fc68a28
 8005e90:	509f79fb 	.word	0x509f79fb
 8005e94:	3fd34413 	.word	0x3fd34413
 8005e98:	08007e9a 	.word	0x08007e9a
 8005e9c:	08007eb1 	.word	0x08007eb1
 8005ea0:	7ff00000 	.word	0x7ff00000
 8005ea4:	08007e96 	.word	0x08007e96
 8005ea8:	08007e8d 	.word	0x08007e8d
 8005eac:	08007e6a 	.word	0x08007e6a
 8005eb0:	3ff80000 	.word	0x3ff80000
 8005eb4:	08007fa0 	.word	0x08007fa0
 8005eb8:	08007f09 	.word	0x08007f09
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	e7d7      	b.n	8005e72 <_dtoa_r+0x2c2>
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	e7ba      	b.n	8005e40 <_dtoa_r+0x290>
 8005eca:	3101      	adds	r1, #1
 8005ecc:	0052      	lsls	r2, r2, #1
 8005ece:	e7ba      	b.n	8005e46 <_dtoa_r+0x296>
 8005ed0:	69e3      	ldr	r3, [r4, #28]
 8005ed2:	9a00      	ldr	r2, [sp, #0]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	2b0e      	cmp	r3, #14
 8005eda:	f200 80a8 	bhi.w	800602e <_dtoa_r+0x47e>
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	f000 80a5 	beq.w	800602e <_dtoa_r+0x47e>
 8005ee4:	f1bb 0f00 	cmp.w	fp, #0
 8005ee8:	dd38      	ble.n	8005f5c <_dtoa_r+0x3ac>
 8005eea:	4bc0      	ldr	r3, [pc, #768]	; (80061ec <_dtoa_r+0x63c>)
 8005eec:	f00b 020f 	and.w	r2, fp, #15
 8005ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ef4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ef8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005efc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005f00:	d019      	beq.n	8005f36 <_dtoa_r+0x386>
 8005f02:	4bbb      	ldr	r3, [pc, #748]	; (80061f0 <_dtoa_r+0x640>)
 8005f04:	ec51 0b18 	vmov	r0, r1, d8
 8005f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f0c:	f7fa fcce 	bl	80008ac <__aeabi_ddiv>
 8005f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f14:	f008 080f 	and.w	r8, r8, #15
 8005f18:	2503      	movs	r5, #3
 8005f1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80061f0 <_dtoa_r+0x640>
 8005f1e:	f1b8 0f00 	cmp.w	r8, #0
 8005f22:	d10a      	bne.n	8005f3a <_dtoa_r+0x38a>
 8005f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fcbe 	bl	80008ac <__aeabi_ddiv>
 8005f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f34:	e02b      	b.n	8005f8e <_dtoa_r+0x3de>
 8005f36:	2502      	movs	r5, #2
 8005f38:	e7ef      	b.n	8005f1a <_dtoa_r+0x36a>
 8005f3a:	f018 0f01 	tst.w	r8, #1
 8005f3e:	d008      	beq.n	8005f52 <_dtoa_r+0x3a2>
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f48:	f7fa fb86 	bl	8000658 <__aeabi_dmul>
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	4606      	mov	r6, r0
 8005f50:	460f      	mov	r7, r1
 8005f52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f56:	f109 0908 	add.w	r9, r9, #8
 8005f5a:	e7e0      	b.n	8005f1e <_dtoa_r+0x36e>
 8005f5c:	f000 809f 	beq.w	800609e <_dtoa_r+0x4ee>
 8005f60:	f1cb 0600 	rsb	r6, fp, #0
 8005f64:	4ba1      	ldr	r3, [pc, #644]	; (80061ec <_dtoa_r+0x63c>)
 8005f66:	4fa2      	ldr	r7, [pc, #648]	; (80061f0 <_dtoa_r+0x640>)
 8005f68:	f006 020f 	and.w	r2, r6, #15
 8005f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	ec51 0b18 	vmov	r0, r1, d8
 8005f78:	f7fa fb6e 	bl	8000658 <__aeabi_dmul>
 8005f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f80:	1136      	asrs	r6, r6, #4
 8005f82:	2300      	movs	r3, #0
 8005f84:	2502      	movs	r5, #2
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d17e      	bne.n	8006088 <_dtoa_r+0x4d8>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d0      	bne.n	8005f30 <_dtoa_r+0x380>
 8005f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8084 	beq.w	80060a2 <_dtoa_r+0x4f2>
 8005f9a:	4b96      	ldr	r3, [pc, #600]	; (80061f4 <_dtoa_r+0x644>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fdcb 	bl	8000b3c <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d07b      	beq.n	80060a2 <_dtoa_r+0x4f2>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d078      	beq.n	80060a2 <_dtoa_r+0x4f2>
 8005fb0:	9b01      	ldr	r3, [sp, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	dd39      	ble.n	800602a <_dtoa_r+0x47a>
 8005fb6:	4b90      	ldr	r3, [pc, #576]	; (80061f8 <_dtoa_r+0x648>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa fb4b 	bl	8000658 <__aeabi_dmul>
 8005fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc6:	9e01      	ldr	r6, [sp, #4]
 8005fc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005fcc:	3501      	adds	r5, #1
 8005fce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7fa fad6 	bl	8000584 <__aeabi_i2d>
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f7fa fb3c 	bl	8000658 <__aeabi_dmul>
 8005fe0:	4b86      	ldr	r3, [pc, #536]	; (80061fc <_dtoa_r+0x64c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f7fa f982 	bl	80002ec <__adddf3>
 8005fe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d158      	bne.n	80060a8 <_dtoa_r+0x4f8>
 8005ff6:	4b82      	ldr	r3, [pc, #520]	; (8006200 <_dtoa_r+0x650>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa f973 	bl	80002e8 <__aeabi_dsub>
 8006002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006006:	4680      	mov	r8, r0
 8006008:	4689      	mov	r9, r1
 800600a:	f7fa fdb5 	bl	8000b78 <__aeabi_dcmpgt>
 800600e:	2800      	cmp	r0, #0
 8006010:	f040 8296 	bne.w	8006540 <_dtoa_r+0x990>
 8006014:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006018:	4640      	mov	r0, r8
 800601a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa fd8c 	bl	8000b3c <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 8289 	bne.w	800653c <_dtoa_r+0x98c>
 800602a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800602e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	f2c0 814e 	blt.w	80062d2 <_dtoa_r+0x722>
 8006036:	f1bb 0f0e 	cmp.w	fp, #14
 800603a:	f300 814a 	bgt.w	80062d2 <_dtoa_r+0x722>
 800603e:	4b6b      	ldr	r3, [pc, #428]	; (80061ec <_dtoa_r+0x63c>)
 8006040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	f280 80dc 	bge.w	8006208 <_dtoa_r+0x658>
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f300 80d8 	bgt.w	8006208 <_dtoa_r+0x658>
 8006058:	f040 826f 	bne.w	800653a <_dtoa_r+0x98a>
 800605c:	4b68      	ldr	r3, [pc, #416]	; (8006200 <_dtoa_r+0x650>)
 800605e:	2200      	movs	r2, #0
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa faf8 	bl	8000658 <__aeabi_dmul>
 8006068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800606c:	f7fa fd7a 	bl	8000b64 <__aeabi_dcmpge>
 8006070:	9e04      	ldr	r6, [sp, #16]
 8006072:	4637      	mov	r7, r6
 8006074:	2800      	cmp	r0, #0
 8006076:	f040 8245 	bne.w	8006504 <_dtoa_r+0x954>
 800607a:	9d00      	ldr	r5, [sp, #0]
 800607c:	2331      	movs	r3, #49	; 0x31
 800607e:	f805 3b01 	strb.w	r3, [r5], #1
 8006082:	f10b 0b01 	add.w	fp, fp, #1
 8006086:	e241      	b.n	800650c <_dtoa_r+0x95c>
 8006088:	07f2      	lsls	r2, r6, #31
 800608a:	d505      	bpl.n	8006098 <_dtoa_r+0x4e8>
 800608c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006090:	f7fa fae2 	bl	8000658 <__aeabi_dmul>
 8006094:	3501      	adds	r5, #1
 8006096:	2301      	movs	r3, #1
 8006098:	1076      	asrs	r6, r6, #1
 800609a:	3708      	adds	r7, #8
 800609c:	e773      	b.n	8005f86 <_dtoa_r+0x3d6>
 800609e:	2502      	movs	r5, #2
 80060a0:	e775      	b.n	8005f8e <_dtoa_r+0x3de>
 80060a2:	9e04      	ldr	r6, [sp, #16]
 80060a4:	465f      	mov	r7, fp
 80060a6:	e792      	b.n	8005fce <_dtoa_r+0x41e>
 80060a8:	9900      	ldr	r1, [sp, #0]
 80060aa:	4b50      	ldr	r3, [pc, #320]	; (80061ec <_dtoa_r+0x63c>)
 80060ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060b0:	4431      	add	r1, r6
 80060b2:	9102      	str	r1, [sp, #8]
 80060b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b6:	eeb0 9a47 	vmov.f32	s18, s14
 80060ba:	eef0 9a67 	vmov.f32	s19, s15
 80060be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d044      	beq.n	8006154 <_dtoa_r+0x5a4>
 80060ca:	494e      	ldr	r1, [pc, #312]	; (8006204 <_dtoa_r+0x654>)
 80060cc:	2000      	movs	r0, #0
 80060ce:	f7fa fbed 	bl	80008ac <__aeabi_ddiv>
 80060d2:	ec53 2b19 	vmov	r2, r3, d9
 80060d6:	f7fa f907 	bl	80002e8 <__aeabi_dsub>
 80060da:	9d00      	ldr	r5, [sp, #0]
 80060dc:	ec41 0b19 	vmov	d9, r0, r1
 80060e0:	4649      	mov	r1, r9
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7fa fd68 	bl	8000bb8 <__aeabi_d2iz>
 80060e8:	4606      	mov	r6, r0
 80060ea:	f7fa fa4b 	bl	8000584 <__aeabi_i2d>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f8f7 	bl	80002e8 <__aeabi_dsub>
 80060fa:	3630      	adds	r6, #48	; 0x30
 80060fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006100:	ec53 2b19 	vmov	r2, r3, d9
 8006104:	4680      	mov	r8, r0
 8006106:	4689      	mov	r9, r1
 8006108:	f7fa fd18 	bl	8000b3c <__aeabi_dcmplt>
 800610c:	2800      	cmp	r0, #0
 800610e:	d164      	bne.n	80061da <_dtoa_r+0x62a>
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	4937      	ldr	r1, [pc, #220]	; (80061f4 <_dtoa_r+0x644>)
 8006116:	2000      	movs	r0, #0
 8006118:	f7fa f8e6 	bl	80002e8 <__aeabi_dsub>
 800611c:	ec53 2b19 	vmov	r2, r3, d9
 8006120:	f7fa fd0c 	bl	8000b3c <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	f040 80b6 	bne.w	8006296 <_dtoa_r+0x6e6>
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	429d      	cmp	r5, r3
 800612e:	f43f af7c 	beq.w	800602a <_dtoa_r+0x47a>
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <_dtoa_r+0x648>)
 8006134:	ec51 0b19 	vmov	r0, r1, d9
 8006138:	2200      	movs	r2, #0
 800613a:	f7fa fa8d 	bl	8000658 <__aeabi_dmul>
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <_dtoa_r+0x648>)
 8006140:	ec41 0b19 	vmov	d9, r0, r1
 8006144:	2200      	movs	r2, #0
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f7fa fa85 	bl	8000658 <__aeabi_dmul>
 800614e:	4680      	mov	r8, r0
 8006150:	4689      	mov	r9, r1
 8006152:	e7c5      	b.n	80060e0 <_dtoa_r+0x530>
 8006154:	ec51 0b17 	vmov	r0, r1, d7
 8006158:	f7fa fa7e 	bl	8000658 <__aeabi_dmul>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	9d00      	ldr	r5, [sp, #0]
 8006160:	930f      	str	r3, [sp, #60]	; 0x3c
 8006162:	ec41 0b19 	vmov	d9, r0, r1
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	f7fa fd25 	bl	8000bb8 <__aeabi_d2iz>
 800616e:	4606      	mov	r6, r0
 8006170:	f7fa fa08 	bl	8000584 <__aeabi_i2d>
 8006174:	3630      	adds	r6, #48	; 0x30
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa f8b3 	bl	80002e8 <__aeabi_dsub>
 8006182:	f805 6b01 	strb.w	r6, [r5], #1
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	429d      	cmp	r5, r3
 800618a:	4680      	mov	r8, r0
 800618c:	4689      	mov	r9, r1
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	d124      	bne.n	80061de <_dtoa_r+0x62e>
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <_dtoa_r+0x654>)
 8006196:	ec51 0b19 	vmov	r0, r1, d9
 800619a:	f7fa f8a7 	bl	80002ec <__adddf3>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4640      	mov	r0, r8
 80061a4:	4649      	mov	r1, r9
 80061a6:	f7fa fce7 	bl	8000b78 <__aeabi_dcmpgt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d173      	bne.n	8006296 <_dtoa_r+0x6e6>
 80061ae:	ec53 2b19 	vmov	r2, r3, d9
 80061b2:	4914      	ldr	r1, [pc, #80]	; (8006204 <_dtoa_r+0x654>)
 80061b4:	2000      	movs	r0, #0
 80061b6:	f7fa f897 	bl	80002e8 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa fcbb 	bl	8000b3c <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f43f af2f 	beq.w	800602a <_dtoa_r+0x47a>
 80061cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80061ce:	1e6b      	subs	r3, r5, #1
 80061d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d0f8      	beq.n	80061cc <_dtoa_r+0x61c>
 80061da:	46bb      	mov	fp, r7
 80061dc:	e04a      	b.n	8006274 <_dtoa_r+0x6c4>
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <_dtoa_r+0x648>)
 80061e0:	f7fa fa3a 	bl	8000658 <__aeabi_dmul>
 80061e4:	4680      	mov	r8, r0
 80061e6:	4689      	mov	r9, r1
 80061e8:	e7bd      	b.n	8006166 <_dtoa_r+0x5b6>
 80061ea:	bf00      	nop
 80061ec:	08007fa0 	.word	0x08007fa0
 80061f0:	08007f78 	.word	0x08007f78
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800620c:	9d00      	ldr	r5, [sp, #0]
 800620e:	4642      	mov	r2, r8
 8006210:	464b      	mov	r3, r9
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fb49 	bl	80008ac <__aeabi_ddiv>
 800621a:	f7fa fccd 	bl	8000bb8 <__aeabi_d2iz>
 800621e:	9001      	str	r0, [sp, #4]
 8006220:	f7fa f9b0 	bl	8000584 <__aeabi_i2d>
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	f7fa fa16 	bl	8000658 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa f858 	bl	80002e8 <__aeabi_dsub>
 8006238:	9e01      	ldr	r6, [sp, #4]
 800623a:	9f04      	ldr	r7, [sp, #16]
 800623c:	3630      	adds	r6, #48	; 0x30
 800623e:	f805 6b01 	strb.w	r6, [r5], #1
 8006242:	9e00      	ldr	r6, [sp, #0]
 8006244:	1bae      	subs	r6, r5, r6
 8006246:	42b7      	cmp	r7, r6
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	d134      	bne.n	80062b8 <_dtoa_r+0x708>
 800624e:	f7fa f84d 	bl	80002ec <__adddf3>
 8006252:	4642      	mov	r2, r8
 8006254:	464b      	mov	r3, r9
 8006256:	4606      	mov	r6, r0
 8006258:	460f      	mov	r7, r1
 800625a:	f7fa fc8d 	bl	8000b78 <__aeabi_dcmpgt>
 800625e:	b9c8      	cbnz	r0, 8006294 <_dtoa_r+0x6e4>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7fa fc5e 	bl	8000b28 <__aeabi_dcmpeq>
 800626c:	b110      	cbz	r0, 8006274 <_dtoa_r+0x6c4>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	07db      	lsls	r3, r3, #31
 8006272:	d40f      	bmi.n	8006294 <_dtoa_r+0x6e4>
 8006274:	4651      	mov	r1, sl
 8006276:	4620      	mov	r0, r4
 8006278:	f000 fbcc 	bl	8006a14 <_Bfree>
 800627c:	2300      	movs	r3, #0
 800627e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006280:	702b      	strb	r3, [r5, #0]
 8006282:	f10b 0301 	add.w	r3, fp, #1
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800628a:	2b00      	cmp	r3, #0
 800628c:	f43f ace2 	beq.w	8005c54 <_dtoa_r+0xa4>
 8006290:	601d      	str	r5, [r3, #0]
 8006292:	e4df      	b.n	8005c54 <_dtoa_r+0xa4>
 8006294:	465f      	mov	r7, fp
 8006296:	462b      	mov	r3, r5
 8006298:	461d      	mov	r5, r3
 800629a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800629e:	2a39      	cmp	r2, #57	; 0x39
 80062a0:	d106      	bne.n	80062b0 <_dtoa_r+0x700>
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1f7      	bne.n	8006298 <_dtoa_r+0x6e8>
 80062a8:	9900      	ldr	r1, [sp, #0]
 80062aa:	2230      	movs	r2, #48	; 0x30
 80062ac:	3701      	adds	r7, #1
 80062ae:	700a      	strb	r2, [r1, #0]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	3201      	adds	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e790      	b.n	80061da <_dtoa_r+0x62a>
 80062b8:	4ba3      	ldr	r3, [pc, #652]	; (8006548 <_dtoa_r+0x998>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	f7fa f9cc 	bl	8000658 <__aeabi_dmul>
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	f7fa fc2e 	bl	8000b28 <__aeabi_dcmpeq>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d09e      	beq.n	800620e <_dtoa_r+0x65e>
 80062d0:	e7d0      	b.n	8006274 <_dtoa_r+0x6c4>
 80062d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	f000 80ca 	beq.w	800646e <_dtoa_r+0x8be>
 80062da:	9a07      	ldr	r2, [sp, #28]
 80062dc:	2a01      	cmp	r2, #1
 80062de:	f300 80ad 	bgt.w	800643c <_dtoa_r+0x88c>
 80062e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	f000 80a5 	beq.w	8006434 <_dtoa_r+0x884>
 80062ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062ee:	9e08      	ldr	r6, [sp, #32]
 80062f0:	9d05      	ldr	r5, [sp, #20]
 80062f2:	9a05      	ldr	r2, [sp, #20]
 80062f4:	441a      	add	r2, r3
 80062f6:	9205      	str	r2, [sp, #20]
 80062f8:	9a06      	ldr	r2, [sp, #24]
 80062fa:	2101      	movs	r1, #1
 80062fc:	441a      	add	r2, r3
 80062fe:	4620      	mov	r0, r4
 8006300:	9206      	str	r2, [sp, #24]
 8006302:	f000 fc3d 	bl	8006b80 <__i2b>
 8006306:	4607      	mov	r7, r0
 8006308:	b165      	cbz	r5, 8006324 <_dtoa_r+0x774>
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd09      	ble.n	8006324 <_dtoa_r+0x774>
 8006310:	42ab      	cmp	r3, r5
 8006312:	9a05      	ldr	r2, [sp, #20]
 8006314:	bfa8      	it	ge
 8006316:	462b      	movge	r3, r5
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	9205      	str	r2, [sp, #20]
 800631c:	9a06      	ldr	r2, [sp, #24]
 800631e:	1aed      	subs	r5, r5, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	9306      	str	r3, [sp, #24]
 8006324:	9b08      	ldr	r3, [sp, #32]
 8006326:	b1f3      	cbz	r3, 8006366 <_dtoa_r+0x7b6>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a3 	beq.w	8006476 <_dtoa_r+0x8c6>
 8006330:	2e00      	cmp	r6, #0
 8006332:	dd10      	ble.n	8006356 <_dtoa_r+0x7a6>
 8006334:	4639      	mov	r1, r7
 8006336:	4632      	mov	r2, r6
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fce1 	bl	8006d00 <__pow5mult>
 800633e:	4652      	mov	r2, sl
 8006340:	4601      	mov	r1, r0
 8006342:	4607      	mov	r7, r0
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fc31 	bl	8006bac <__multiply>
 800634a:	4651      	mov	r1, sl
 800634c:	4680      	mov	r8, r0
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fb60 	bl	8006a14 <_Bfree>
 8006354:	46c2      	mov	sl, r8
 8006356:	9b08      	ldr	r3, [sp, #32]
 8006358:	1b9a      	subs	r2, r3, r6
 800635a:	d004      	beq.n	8006366 <_dtoa_r+0x7b6>
 800635c:	4651      	mov	r1, sl
 800635e:	4620      	mov	r0, r4
 8006360:	f000 fcce 	bl	8006d00 <__pow5mult>
 8006364:	4682      	mov	sl, r0
 8006366:	2101      	movs	r1, #1
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fc09 	bl	8006b80 <__i2b>
 800636e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	4606      	mov	r6, r0
 8006374:	f340 8081 	ble.w	800647a <_dtoa_r+0x8ca>
 8006378:	461a      	mov	r2, r3
 800637a:	4601      	mov	r1, r0
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fcbf 	bl	8006d00 <__pow5mult>
 8006382:	9b07      	ldr	r3, [sp, #28]
 8006384:	2b01      	cmp	r3, #1
 8006386:	4606      	mov	r6, r0
 8006388:	dd7a      	ble.n	8006480 <_dtoa_r+0x8d0>
 800638a:	f04f 0800 	mov.w	r8, #0
 800638e:	6933      	ldr	r3, [r6, #16]
 8006390:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006394:	6918      	ldr	r0, [r3, #16]
 8006396:	f000 fba5 	bl	8006ae4 <__hi0bits>
 800639a:	f1c0 0020 	rsb	r0, r0, #32
 800639e:	9b06      	ldr	r3, [sp, #24]
 80063a0:	4418      	add	r0, r3
 80063a2:	f010 001f 	ands.w	r0, r0, #31
 80063a6:	f000 8094 	beq.w	80064d2 <_dtoa_r+0x922>
 80063aa:	f1c0 0320 	rsb	r3, r0, #32
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	f340 8085 	ble.w	80064be <_dtoa_r+0x90e>
 80063b4:	9b05      	ldr	r3, [sp, #20]
 80063b6:	f1c0 001c 	rsb	r0, r0, #28
 80063ba:	4403      	add	r3, r0
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	9b06      	ldr	r3, [sp, #24]
 80063c0:	4403      	add	r3, r0
 80063c2:	4405      	add	r5, r0
 80063c4:	9306      	str	r3, [sp, #24]
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd05      	ble.n	80063d8 <_dtoa_r+0x828>
 80063cc:	4651      	mov	r1, sl
 80063ce:	461a      	mov	r2, r3
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fcef 	bl	8006db4 <__lshift>
 80063d6:	4682      	mov	sl, r0
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd05      	ble.n	80063ea <_dtoa_r+0x83a>
 80063de:	4631      	mov	r1, r6
 80063e0:	461a      	mov	r2, r3
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fce6 	bl	8006db4 <__lshift>
 80063e8:	4606      	mov	r6, r0
 80063ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d072      	beq.n	80064d6 <_dtoa_r+0x926>
 80063f0:	4631      	mov	r1, r6
 80063f2:	4650      	mov	r0, sl
 80063f4:	f000 fd4a 	bl	8006e8c <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	da6c      	bge.n	80064d6 <_dtoa_r+0x926>
 80063fc:	2300      	movs	r3, #0
 80063fe:	4651      	mov	r1, sl
 8006400:	220a      	movs	r2, #10
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fb28 	bl	8006a58 <__multadd>
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800640e:	4682      	mov	sl, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 81b0 	beq.w	8006776 <_dtoa_r+0xbc6>
 8006416:	2300      	movs	r3, #0
 8006418:	4639      	mov	r1, r7
 800641a:	220a      	movs	r2, #10
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fb1b 	bl	8006a58 <__multadd>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	4607      	mov	r7, r0
 8006428:	f300 8096 	bgt.w	8006558 <_dtoa_r+0x9a8>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	2b02      	cmp	r3, #2
 8006430:	dc59      	bgt.n	80064e6 <_dtoa_r+0x936>
 8006432:	e091      	b.n	8006558 <_dtoa_r+0x9a8>
 8006434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800643a:	e758      	b.n	80062ee <_dtoa_r+0x73e>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	1e5e      	subs	r6, r3, #1
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	42b3      	cmp	r3, r6
 8006444:	bfbf      	itttt	lt
 8006446:	9b08      	ldrlt	r3, [sp, #32]
 8006448:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800644a:	9608      	strlt	r6, [sp, #32]
 800644c:	1af3      	sublt	r3, r6, r3
 800644e:	bfb4      	ite	lt
 8006450:	18d2      	addlt	r2, r2, r3
 8006452:	1b9e      	subge	r6, r3, r6
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	bfbc      	itt	lt
 8006458:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800645a:	2600      	movlt	r6, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	bfb7      	itett	lt
 8006460:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006464:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006468:	1a9d      	sublt	r5, r3, r2
 800646a:	2300      	movlt	r3, #0
 800646c:	e741      	b.n	80062f2 <_dtoa_r+0x742>
 800646e:	9e08      	ldr	r6, [sp, #32]
 8006470:	9d05      	ldr	r5, [sp, #20]
 8006472:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006474:	e748      	b.n	8006308 <_dtoa_r+0x758>
 8006476:	9a08      	ldr	r2, [sp, #32]
 8006478:	e770      	b.n	800635c <_dtoa_r+0x7ac>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	2b01      	cmp	r3, #1
 800647e:	dc19      	bgt.n	80064b4 <_dtoa_r+0x904>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	b9bb      	cbnz	r3, 80064b4 <_dtoa_r+0x904>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648a:	b99b      	cbnz	r3, 80064b4 <_dtoa_r+0x904>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006492:	0d1b      	lsrs	r3, r3, #20
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	b183      	cbz	r3, 80064ba <_dtoa_r+0x90a>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	3301      	adds	r3, #1
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	3301      	adds	r3, #1
 80064a2:	9306      	str	r3, [sp, #24]
 80064a4:	f04f 0801 	mov.w	r8, #1
 80064a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f47f af6f 	bne.w	800638e <_dtoa_r+0x7de>
 80064b0:	2001      	movs	r0, #1
 80064b2:	e774      	b.n	800639e <_dtoa_r+0x7ee>
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	e7f6      	b.n	80064a8 <_dtoa_r+0x8f8>
 80064ba:	4698      	mov	r8, r3
 80064bc:	e7f4      	b.n	80064a8 <_dtoa_r+0x8f8>
 80064be:	d082      	beq.n	80063c6 <_dtoa_r+0x816>
 80064c0:	9a05      	ldr	r2, [sp, #20]
 80064c2:	331c      	adds	r3, #28
 80064c4:	441a      	add	r2, r3
 80064c6:	9205      	str	r2, [sp, #20]
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	441a      	add	r2, r3
 80064cc:	441d      	add	r5, r3
 80064ce:	9206      	str	r2, [sp, #24]
 80064d0:	e779      	b.n	80063c6 <_dtoa_r+0x816>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e7f4      	b.n	80064c0 <_dtoa_r+0x910>
 80064d6:	9b04      	ldr	r3, [sp, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc37      	bgt.n	800654c <_dtoa_r+0x99c>
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	dd34      	ble.n	800654c <_dtoa_r+0x99c>
 80064e2:	9b04      	ldr	r3, [sp, #16]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	b963      	cbnz	r3, 8006504 <_dtoa_r+0x954>
 80064ea:	4631      	mov	r1, r6
 80064ec:	2205      	movs	r2, #5
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 fab2 	bl	8006a58 <__multadd>
 80064f4:	4601      	mov	r1, r0
 80064f6:	4606      	mov	r6, r0
 80064f8:	4650      	mov	r0, sl
 80064fa:	f000 fcc7 	bl	8006e8c <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f73f adbb 	bgt.w	800607a <_dtoa_r+0x4ca>
 8006504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006506:	9d00      	ldr	r5, [sp, #0]
 8006508:	ea6f 0b03 	mvn.w	fp, r3
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	4631      	mov	r1, r6
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fa7e 	bl	8006a14 <_Bfree>
 8006518:	2f00      	cmp	r7, #0
 800651a:	f43f aeab 	beq.w	8006274 <_dtoa_r+0x6c4>
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	d005      	beq.n	8006530 <_dtoa_r+0x980>
 8006524:	45b8      	cmp	r8, r7
 8006526:	d003      	beq.n	8006530 <_dtoa_r+0x980>
 8006528:	4641      	mov	r1, r8
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fa72 	bl	8006a14 <_Bfree>
 8006530:	4639      	mov	r1, r7
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fa6e 	bl	8006a14 <_Bfree>
 8006538:	e69c      	b.n	8006274 <_dtoa_r+0x6c4>
 800653a:	2600      	movs	r6, #0
 800653c:	4637      	mov	r7, r6
 800653e:	e7e1      	b.n	8006504 <_dtoa_r+0x954>
 8006540:	46bb      	mov	fp, r7
 8006542:	4637      	mov	r7, r6
 8006544:	e599      	b.n	800607a <_dtoa_r+0x4ca>
 8006546:	bf00      	nop
 8006548:	40240000 	.word	0x40240000
 800654c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80c8 	beq.w	80066e4 <_dtoa_r+0xb34>
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	2d00      	cmp	r5, #0
 800655a:	dd05      	ble.n	8006568 <_dtoa_r+0x9b8>
 800655c:	4639      	mov	r1, r7
 800655e:	462a      	mov	r2, r5
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fc27 	bl	8006db4 <__lshift>
 8006566:	4607      	mov	r7, r0
 8006568:	f1b8 0f00 	cmp.w	r8, #0
 800656c:	d05b      	beq.n	8006626 <_dtoa_r+0xa76>
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fa0f 	bl	8006994 <_Balloc>
 8006576:	4605      	mov	r5, r0
 8006578:	b928      	cbnz	r0, 8006586 <_dtoa_r+0x9d6>
 800657a:	4b83      	ldr	r3, [pc, #524]	; (8006788 <_dtoa_r+0xbd8>)
 800657c:	4602      	mov	r2, r0
 800657e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006582:	f7ff bb2e 	b.w	8005be2 <_dtoa_r+0x32>
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	3202      	adds	r2, #2
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	f107 010c 	add.w	r1, r7, #12
 8006590:	300c      	adds	r0, #12
 8006592:	f7ff fa74 	bl	8005a7e <memcpy>
 8006596:	2201      	movs	r2, #1
 8006598:	4629      	mov	r1, r5
 800659a:	4620      	mov	r0, r4
 800659c:	f000 fc0a 	bl	8006db4 <__lshift>
 80065a0:	9b00      	ldr	r3, [sp, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065aa:	4413      	add	r3, r2
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	9b02      	ldr	r3, [sp, #8]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	46b8      	mov	r8, r7
 80065b6:	9306      	str	r3, [sp, #24]
 80065b8:	4607      	mov	r7, r0
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	4631      	mov	r1, r6
 80065be:	3b01      	subs	r3, #1
 80065c0:	4650      	mov	r0, sl
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	f7ff fa69 	bl	8005a9a <quorem>
 80065c8:	4641      	mov	r1, r8
 80065ca:	9002      	str	r0, [sp, #8]
 80065cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065d0:	4650      	mov	r0, sl
 80065d2:	f000 fc5b 	bl	8006e8c <__mcmp>
 80065d6:	463a      	mov	r2, r7
 80065d8:	9005      	str	r0, [sp, #20]
 80065da:	4631      	mov	r1, r6
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fc71 	bl	8006ec4 <__mdiff>
 80065e2:	68c2      	ldr	r2, [r0, #12]
 80065e4:	4605      	mov	r5, r0
 80065e6:	bb02      	cbnz	r2, 800662a <_dtoa_r+0xa7a>
 80065e8:	4601      	mov	r1, r0
 80065ea:	4650      	mov	r0, sl
 80065ec:	f000 fc4e 	bl	8006e8c <__mcmp>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4629      	mov	r1, r5
 80065f4:	4620      	mov	r0, r4
 80065f6:	9209      	str	r2, [sp, #36]	; 0x24
 80065f8:	f000 fa0c 	bl	8006a14 <_Bfree>
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006600:	9d04      	ldr	r5, [sp, #16]
 8006602:	ea43 0102 	orr.w	r1, r3, r2
 8006606:	9b06      	ldr	r3, [sp, #24]
 8006608:	4319      	orrs	r1, r3
 800660a:	d110      	bne.n	800662e <_dtoa_r+0xa7e>
 800660c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006610:	d029      	beq.n	8006666 <_dtoa_r+0xab6>
 8006612:	9b05      	ldr	r3, [sp, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd02      	ble.n	800661e <_dtoa_r+0xa6e>
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	f883 9000 	strb.w	r9, [r3]
 8006624:	e774      	b.n	8006510 <_dtoa_r+0x960>
 8006626:	4638      	mov	r0, r7
 8006628:	e7ba      	b.n	80065a0 <_dtoa_r+0x9f0>
 800662a:	2201      	movs	r2, #1
 800662c:	e7e1      	b.n	80065f2 <_dtoa_r+0xa42>
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db04      	blt.n	800663e <_dtoa_r+0xa8e>
 8006634:	9907      	ldr	r1, [sp, #28]
 8006636:	430b      	orrs	r3, r1
 8006638:	9906      	ldr	r1, [sp, #24]
 800663a:	430b      	orrs	r3, r1
 800663c:	d120      	bne.n	8006680 <_dtoa_r+0xad0>
 800663e:	2a00      	cmp	r2, #0
 8006640:	dded      	ble.n	800661e <_dtoa_r+0xa6e>
 8006642:	4651      	mov	r1, sl
 8006644:	2201      	movs	r2, #1
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fbb4 	bl	8006db4 <__lshift>
 800664c:	4631      	mov	r1, r6
 800664e:	4682      	mov	sl, r0
 8006650:	f000 fc1c 	bl	8006e8c <__mcmp>
 8006654:	2800      	cmp	r0, #0
 8006656:	dc03      	bgt.n	8006660 <_dtoa_r+0xab0>
 8006658:	d1e1      	bne.n	800661e <_dtoa_r+0xa6e>
 800665a:	f019 0f01 	tst.w	r9, #1
 800665e:	d0de      	beq.n	800661e <_dtoa_r+0xa6e>
 8006660:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006664:	d1d8      	bne.n	8006618 <_dtoa_r+0xa68>
 8006666:	9a01      	ldr	r2, [sp, #4]
 8006668:	2339      	movs	r3, #57	; 0x39
 800666a:	7013      	strb	r3, [r2, #0]
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006676:	2a39      	cmp	r2, #57	; 0x39
 8006678:	d06c      	beq.n	8006754 <_dtoa_r+0xba4>
 800667a:	3201      	adds	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e747      	b.n	8006510 <_dtoa_r+0x960>
 8006680:	2a00      	cmp	r2, #0
 8006682:	dd07      	ble.n	8006694 <_dtoa_r+0xae4>
 8006684:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006688:	d0ed      	beq.n	8006666 <_dtoa_r+0xab6>
 800668a:	9a01      	ldr	r2, [sp, #4]
 800668c:	f109 0301 	add.w	r3, r9, #1
 8006690:	7013      	strb	r3, [r2, #0]
 8006692:	e73d      	b.n	8006510 <_dtoa_r+0x960>
 8006694:	9b04      	ldr	r3, [sp, #16]
 8006696:	9a08      	ldr	r2, [sp, #32]
 8006698:	f803 9c01 	strb.w	r9, [r3, #-1]
 800669c:	4293      	cmp	r3, r2
 800669e:	d043      	beq.n	8006728 <_dtoa_r+0xb78>
 80066a0:	4651      	mov	r1, sl
 80066a2:	2300      	movs	r3, #0
 80066a4:	220a      	movs	r2, #10
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 f9d6 	bl	8006a58 <__multadd>
 80066ac:	45b8      	cmp	r8, r7
 80066ae:	4682      	mov	sl, r0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	f04f 020a 	mov.w	r2, #10
 80066b8:	4641      	mov	r1, r8
 80066ba:	4620      	mov	r0, r4
 80066bc:	d107      	bne.n	80066ce <_dtoa_r+0xb1e>
 80066be:	f000 f9cb 	bl	8006a58 <__multadd>
 80066c2:	4680      	mov	r8, r0
 80066c4:	4607      	mov	r7, r0
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	e775      	b.n	80065ba <_dtoa_r+0xa0a>
 80066ce:	f000 f9c3 	bl	8006a58 <__multadd>
 80066d2:	4639      	mov	r1, r7
 80066d4:	4680      	mov	r8, r0
 80066d6:	2300      	movs	r3, #0
 80066d8:	220a      	movs	r2, #10
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f9bc 	bl	8006a58 <__multadd>
 80066e0:	4607      	mov	r7, r0
 80066e2:	e7f0      	b.n	80066c6 <_dtoa_r+0xb16>
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	9d00      	ldr	r5, [sp, #0]
 80066ea:	4631      	mov	r1, r6
 80066ec:	4650      	mov	r0, sl
 80066ee:	f7ff f9d4 	bl	8005a9a <quorem>
 80066f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066f6:	9b00      	ldr	r3, [sp, #0]
 80066f8:	f805 9b01 	strb.w	r9, [r5], #1
 80066fc:	1aea      	subs	r2, r5, r3
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	4293      	cmp	r3, r2
 8006702:	dd07      	ble.n	8006714 <_dtoa_r+0xb64>
 8006704:	4651      	mov	r1, sl
 8006706:	2300      	movs	r3, #0
 8006708:	220a      	movs	r2, #10
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f9a4 	bl	8006a58 <__multadd>
 8006710:	4682      	mov	sl, r0
 8006712:	e7ea      	b.n	80066ea <_dtoa_r+0xb3a>
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfc8      	it	gt
 800671a:	461d      	movgt	r5, r3
 800671c:	9b00      	ldr	r3, [sp, #0]
 800671e:	bfd8      	it	le
 8006720:	2501      	movle	r5, #1
 8006722:	441d      	add	r5, r3
 8006724:	f04f 0800 	mov.w	r8, #0
 8006728:	4651      	mov	r1, sl
 800672a:	2201      	movs	r2, #1
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fb41 	bl	8006db4 <__lshift>
 8006732:	4631      	mov	r1, r6
 8006734:	4682      	mov	sl, r0
 8006736:	f000 fba9 	bl	8006e8c <__mcmp>
 800673a:	2800      	cmp	r0, #0
 800673c:	dc96      	bgt.n	800666c <_dtoa_r+0xabc>
 800673e:	d102      	bne.n	8006746 <_dtoa_r+0xb96>
 8006740:	f019 0f01 	tst.w	r9, #1
 8006744:	d192      	bne.n	800666c <_dtoa_r+0xabc>
 8006746:	462b      	mov	r3, r5
 8006748:	461d      	mov	r5, r3
 800674a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674e:	2a30      	cmp	r2, #48	; 0x30
 8006750:	d0fa      	beq.n	8006748 <_dtoa_r+0xb98>
 8006752:	e6dd      	b.n	8006510 <_dtoa_r+0x960>
 8006754:	9a00      	ldr	r2, [sp, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d189      	bne.n	800666e <_dtoa_r+0xabe>
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	2331      	movs	r3, #49	; 0x31
 8006760:	e796      	b.n	8006690 <_dtoa_r+0xae0>
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <_dtoa_r+0xbdc>)
 8006764:	f7ff ba99 	b.w	8005c9a <_dtoa_r+0xea>
 8006768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800676a:	2b00      	cmp	r3, #0
 800676c:	f47f aa6d 	bne.w	8005c4a <_dtoa_r+0x9a>
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_dtoa_r+0xbe0>)
 8006772:	f7ff ba92 	b.w	8005c9a <_dtoa_r+0xea>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	dcb5      	bgt.n	80066e8 <_dtoa_r+0xb38>
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	2b02      	cmp	r3, #2
 8006780:	f73f aeb1 	bgt.w	80064e6 <_dtoa_r+0x936>
 8006784:	e7b0      	b.n	80066e8 <_dtoa_r+0xb38>
 8006786:	bf00      	nop
 8006788:	08007f09 	.word	0x08007f09
 800678c:	08007e69 	.word	0x08007e69
 8006790:	08007e8d 	.word	0x08007e8d

08006794 <_free_r>:
 8006794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006796:	2900      	cmp	r1, #0
 8006798:	d044      	beq.n	8006824 <_free_r+0x90>
 800679a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679e:	9001      	str	r0, [sp, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f1a1 0404 	sub.w	r4, r1, #4
 80067a6:	bfb8      	it	lt
 80067a8:	18e4      	addlt	r4, r4, r3
 80067aa:	f000 f8e7 	bl	800697c <__malloc_lock>
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <_free_r+0x94>)
 80067b0:	9801      	ldr	r0, [sp, #4]
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	b933      	cbnz	r3, 80067c4 <_free_r+0x30>
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	6014      	str	r4, [r2, #0]
 80067ba:	b003      	add	sp, #12
 80067bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c0:	f000 b8e2 	b.w	8006988 <__malloc_unlock>
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d908      	bls.n	80067da <_free_r+0x46>
 80067c8:	6825      	ldr	r5, [r4, #0]
 80067ca:	1961      	adds	r1, r4, r5
 80067cc:	428b      	cmp	r3, r1
 80067ce:	bf01      	itttt	eq
 80067d0:	6819      	ldreq	r1, [r3, #0]
 80067d2:	685b      	ldreq	r3, [r3, #4]
 80067d4:	1949      	addeq	r1, r1, r5
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	e7ed      	b.n	80067b6 <_free_r+0x22>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x50>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x46>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1855      	adds	r5, r2, r1
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x70>
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	4421      	add	r1, r4
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1e0      	bne.n	80067ba <_free_r+0x26>
 80067f8:	681c      	ldr	r4, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	440c      	add	r4, r1
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	e7da      	b.n	80067ba <_free_r+0x26>
 8006804:	d902      	bls.n	800680c <_free_r+0x78>
 8006806:	230c      	movs	r3, #12
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	e7d6      	b.n	80067ba <_free_r+0x26>
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1961      	adds	r1, r4, r5
 8006810:	428b      	cmp	r3, r1
 8006812:	bf04      	itt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	bf04      	itt	eq
 800681c:	1949      	addeq	r1, r1, r5
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7ca      	b.n	80067ba <_free_r+0x26>
 8006824:	b003      	add	sp, #12
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	2000084c 	.word	0x2000084c

0800682c <malloc>:
 800682c:	4b02      	ldr	r3, [pc, #8]	; (8006838 <malloc+0xc>)
 800682e:	4601      	mov	r1, r0
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f000 b823 	b.w	800687c <_malloc_r>
 8006836:	bf00      	nop
 8006838:	20000078 	.word	0x20000078

0800683c <sbrk_aligned>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4e0e      	ldr	r6, [pc, #56]	; (8006878 <sbrk_aligned+0x3c>)
 8006840:	460c      	mov	r4, r1
 8006842:	6831      	ldr	r1, [r6, #0]
 8006844:	4605      	mov	r5, r0
 8006846:	b911      	cbnz	r1, 800684e <sbrk_aligned+0x12>
 8006848:	f000 fe40 	bl	80074cc <_sbrk_r>
 800684c:	6030      	str	r0, [r6, #0]
 800684e:	4621      	mov	r1, r4
 8006850:	4628      	mov	r0, r5
 8006852:	f000 fe3b 	bl	80074cc <_sbrk_r>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d00a      	beq.n	8006870 <sbrk_aligned+0x34>
 800685a:	1cc4      	adds	r4, r0, #3
 800685c:	f024 0403 	bic.w	r4, r4, #3
 8006860:	42a0      	cmp	r0, r4
 8006862:	d007      	beq.n	8006874 <sbrk_aligned+0x38>
 8006864:	1a21      	subs	r1, r4, r0
 8006866:	4628      	mov	r0, r5
 8006868:	f000 fe30 	bl	80074cc <_sbrk_r>
 800686c:	3001      	adds	r0, #1
 800686e:	d101      	bne.n	8006874 <sbrk_aligned+0x38>
 8006870:	f04f 34ff 	mov.w	r4, #4294967295
 8006874:	4620      	mov	r0, r4
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	20000850 	.word	0x20000850

0800687c <_malloc_r>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	1ccd      	adds	r5, r1, #3
 8006882:	f025 0503 	bic.w	r5, r5, #3
 8006886:	3508      	adds	r5, #8
 8006888:	2d0c      	cmp	r5, #12
 800688a:	bf38      	it	cc
 800688c:	250c      	movcc	r5, #12
 800688e:	2d00      	cmp	r5, #0
 8006890:	4607      	mov	r7, r0
 8006892:	db01      	blt.n	8006898 <_malloc_r+0x1c>
 8006894:	42a9      	cmp	r1, r5
 8006896:	d905      	bls.n	80068a4 <_malloc_r+0x28>
 8006898:	230c      	movs	r3, #12
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	2600      	movs	r6, #0
 800689e:	4630      	mov	r0, r6
 80068a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006978 <_malloc_r+0xfc>
 80068a8:	f000 f868 	bl	800697c <__malloc_lock>
 80068ac:	f8d8 3000 	ldr.w	r3, [r8]
 80068b0:	461c      	mov	r4, r3
 80068b2:	bb5c      	cbnz	r4, 800690c <_malloc_r+0x90>
 80068b4:	4629      	mov	r1, r5
 80068b6:	4638      	mov	r0, r7
 80068b8:	f7ff ffc0 	bl	800683c <sbrk_aligned>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	4604      	mov	r4, r0
 80068c0:	d155      	bne.n	800696e <_malloc_r+0xf2>
 80068c2:	f8d8 4000 	ldr.w	r4, [r8]
 80068c6:	4626      	mov	r6, r4
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d145      	bne.n	8006958 <_malloc_r+0xdc>
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d048      	beq.n	8006962 <_malloc_r+0xe6>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	4631      	mov	r1, r6
 80068d4:	4638      	mov	r0, r7
 80068d6:	eb04 0903 	add.w	r9, r4, r3
 80068da:	f000 fdf7 	bl	80074cc <_sbrk_r>
 80068de:	4581      	cmp	r9, r0
 80068e0:	d13f      	bne.n	8006962 <_malloc_r+0xe6>
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	1a6d      	subs	r5, r5, r1
 80068e6:	4629      	mov	r1, r5
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff ffa7 	bl	800683c <sbrk_aligned>
 80068ee:	3001      	adds	r0, #1
 80068f0:	d037      	beq.n	8006962 <_malloc_r+0xe6>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	442b      	add	r3, r5
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	f8d8 3000 	ldr.w	r3, [r8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d038      	beq.n	8006972 <_malloc_r+0xf6>
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	42a2      	cmp	r2, r4
 8006904:	d12b      	bne.n	800695e <_malloc_r+0xe2>
 8006906:	2200      	movs	r2, #0
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	e00f      	b.n	800692c <_malloc_r+0xb0>
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	1b52      	subs	r2, r2, r5
 8006910:	d41f      	bmi.n	8006952 <_malloc_r+0xd6>
 8006912:	2a0b      	cmp	r2, #11
 8006914:	d917      	bls.n	8006946 <_malloc_r+0xca>
 8006916:	1961      	adds	r1, r4, r5
 8006918:	42a3      	cmp	r3, r4
 800691a:	6025      	str	r5, [r4, #0]
 800691c:	bf18      	it	ne
 800691e:	6059      	strne	r1, [r3, #4]
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	bf08      	it	eq
 8006924:	f8c8 1000 	streq.w	r1, [r8]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4638      	mov	r0, r7
 800692e:	f104 060b 	add.w	r6, r4, #11
 8006932:	f000 f829 	bl	8006988 <__malloc_unlock>
 8006936:	f026 0607 	bic.w	r6, r6, #7
 800693a:	1d23      	adds	r3, r4, #4
 800693c:	1af2      	subs	r2, r6, r3
 800693e:	d0ae      	beq.n	800689e <_malloc_r+0x22>
 8006940:	1b9b      	subs	r3, r3, r6
 8006942:	50a3      	str	r3, [r4, r2]
 8006944:	e7ab      	b.n	800689e <_malloc_r+0x22>
 8006946:	42a3      	cmp	r3, r4
 8006948:	6862      	ldr	r2, [r4, #4]
 800694a:	d1dd      	bne.n	8006908 <_malloc_r+0x8c>
 800694c:	f8c8 2000 	str.w	r2, [r8]
 8006950:	e7ec      	b.n	800692c <_malloc_r+0xb0>
 8006952:	4623      	mov	r3, r4
 8006954:	6864      	ldr	r4, [r4, #4]
 8006956:	e7ac      	b.n	80068b2 <_malloc_r+0x36>
 8006958:	4634      	mov	r4, r6
 800695a:	6876      	ldr	r6, [r6, #4]
 800695c:	e7b4      	b.n	80068c8 <_malloc_r+0x4c>
 800695e:	4613      	mov	r3, r2
 8006960:	e7cc      	b.n	80068fc <_malloc_r+0x80>
 8006962:	230c      	movs	r3, #12
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4638      	mov	r0, r7
 8006968:	f000 f80e 	bl	8006988 <__malloc_unlock>
 800696c:	e797      	b.n	800689e <_malloc_r+0x22>
 800696e:	6025      	str	r5, [r4, #0]
 8006970:	e7dc      	b.n	800692c <_malloc_r+0xb0>
 8006972:	605b      	str	r3, [r3, #4]
 8006974:	deff      	udf	#255	; 0xff
 8006976:	bf00      	nop
 8006978:	2000084c 	.word	0x2000084c

0800697c <__malloc_lock>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__malloc_lock+0x8>)
 800697e:	f7ff b87c 	b.w	8005a7a <__retarget_lock_acquire_recursive>
 8006982:	bf00      	nop
 8006984:	20000848 	.word	0x20000848

08006988 <__malloc_unlock>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__malloc_unlock+0x8>)
 800698a:	f7ff b877 	b.w	8005a7c <__retarget_lock_release_recursive>
 800698e:	bf00      	nop
 8006990:	20000848 	.word	0x20000848

08006994 <_Balloc>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	69c6      	ldr	r6, [r0, #28]
 8006998:	4604      	mov	r4, r0
 800699a:	460d      	mov	r5, r1
 800699c:	b976      	cbnz	r6, 80069bc <_Balloc+0x28>
 800699e:	2010      	movs	r0, #16
 80069a0:	f7ff ff44 	bl	800682c <malloc>
 80069a4:	4602      	mov	r2, r0
 80069a6:	61e0      	str	r0, [r4, #28]
 80069a8:	b920      	cbnz	r0, 80069b4 <_Balloc+0x20>
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <_Balloc+0x78>)
 80069ac:	4818      	ldr	r0, [pc, #96]	; (8006a10 <_Balloc+0x7c>)
 80069ae:	216b      	movs	r1, #107	; 0x6b
 80069b0:	f000 fd9c 	bl	80074ec <__assert_func>
 80069b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069b8:	6006      	str	r6, [r0, #0]
 80069ba:	60c6      	str	r6, [r0, #12]
 80069bc:	69e6      	ldr	r6, [r4, #28]
 80069be:	68f3      	ldr	r3, [r6, #12]
 80069c0:	b183      	cbz	r3, 80069e4 <_Balloc+0x50>
 80069c2:	69e3      	ldr	r3, [r4, #28]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ca:	b9b8      	cbnz	r0, 80069fc <_Balloc+0x68>
 80069cc:	2101      	movs	r1, #1
 80069ce:	fa01 f605 	lsl.w	r6, r1, r5
 80069d2:	1d72      	adds	r2, r6, #5
 80069d4:	0092      	lsls	r2, r2, #2
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fda6 	bl	8007528 <_calloc_r>
 80069dc:	b160      	cbz	r0, 80069f8 <_Balloc+0x64>
 80069de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069e2:	e00e      	b.n	8006a02 <_Balloc+0x6e>
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	2104      	movs	r1, #4
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fd9d 	bl	8007528 <_calloc_r>
 80069ee:	69e3      	ldr	r3, [r4, #28]
 80069f0:	60f0      	str	r0, [r6, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e4      	bne.n	80069c2 <_Balloc+0x2e>
 80069f8:	2000      	movs	r0, #0
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	6802      	ldr	r2, [r0, #0]
 80069fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a02:	2300      	movs	r3, #0
 8006a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a08:	e7f7      	b.n	80069fa <_Balloc+0x66>
 8006a0a:	bf00      	nop
 8006a0c:	08007e9a 	.word	0x08007e9a
 8006a10:	08007f1a 	.word	0x08007f1a

08006a14 <_Bfree>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	69c6      	ldr	r6, [r0, #28]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b976      	cbnz	r6, 8006a3c <_Bfree+0x28>
 8006a1e:	2010      	movs	r0, #16
 8006a20:	f7ff ff04 	bl	800682c <malloc>
 8006a24:	4602      	mov	r2, r0
 8006a26:	61e8      	str	r0, [r5, #28]
 8006a28:	b920      	cbnz	r0, 8006a34 <_Bfree+0x20>
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <_Bfree+0x3c>)
 8006a2c:	4809      	ldr	r0, [pc, #36]	; (8006a54 <_Bfree+0x40>)
 8006a2e:	218f      	movs	r1, #143	; 0x8f
 8006a30:	f000 fd5c 	bl	80074ec <__assert_func>
 8006a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a38:	6006      	str	r6, [r0, #0]
 8006a3a:	60c6      	str	r6, [r0, #12]
 8006a3c:	b13c      	cbz	r4, 8006a4e <_Bfree+0x3a>
 8006a3e:	69eb      	ldr	r3, [r5, #28]
 8006a40:	6862      	ldr	r2, [r4, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a48:	6021      	str	r1, [r4, #0]
 8006a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	08007e9a 	.word	0x08007e9a
 8006a54:	08007f1a 	.word	0x08007f1a

08006a58 <__multadd>:
 8006a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5c:	690d      	ldr	r5, [r1, #16]
 8006a5e:	4607      	mov	r7, r0
 8006a60:	460c      	mov	r4, r1
 8006a62:	461e      	mov	r6, r3
 8006a64:	f101 0c14 	add.w	ip, r1, #20
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	fb02 6101 	mla	r1, r2, r1, r6
 8006a74:	0c1e      	lsrs	r6, r3, #16
 8006a76:	0c0b      	lsrs	r3, r1, #16
 8006a78:	fb02 3306 	mla	r3, r2, r6, r3
 8006a7c:	b289      	uxth	r1, r1
 8006a7e:	3001      	adds	r0, #1
 8006a80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a84:	4285      	cmp	r5, r0
 8006a86:	f84c 1b04 	str.w	r1, [ip], #4
 8006a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a8e:	dcec      	bgt.n	8006a6a <__multadd+0x12>
 8006a90:	b30e      	cbz	r6, 8006ad6 <__multadd+0x7e>
 8006a92:	68a3      	ldr	r3, [r4, #8]
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc19      	bgt.n	8006acc <__multadd+0x74>
 8006a98:	6861      	ldr	r1, [r4, #4]
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	3101      	adds	r1, #1
 8006a9e:	f7ff ff79 	bl	8006994 <_Balloc>
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	b928      	cbnz	r0, 8006ab2 <__multadd+0x5a>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <__multadd+0x84>)
 8006aaa:	480d      	ldr	r0, [pc, #52]	; (8006ae0 <__multadd+0x88>)
 8006aac:	21ba      	movs	r1, #186	; 0xba
 8006aae:	f000 fd1d 	bl	80074ec <__assert_func>
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	3202      	adds	r2, #2
 8006ab6:	f104 010c 	add.w	r1, r4, #12
 8006aba:	0092      	lsls	r2, r2, #2
 8006abc:	300c      	adds	r0, #12
 8006abe:	f7fe ffde 	bl	8005a7e <memcpy>
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	f7ff ffa5 	bl	8006a14 <_Bfree>
 8006aca:	4644      	mov	r4, r8
 8006acc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	615e      	str	r6, [r3, #20]
 8006ad4:	6125      	str	r5, [r4, #16]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	08007f09 	.word	0x08007f09
 8006ae0:	08007f1a 	.word	0x08007f1a

08006ae4 <__hi0bits>:
 8006ae4:	0c03      	lsrs	r3, r0, #16
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	b9d3      	cbnz	r3, 8006b20 <__hi0bits+0x3c>
 8006aea:	0400      	lsls	r0, r0, #16
 8006aec:	2310      	movs	r3, #16
 8006aee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006af2:	bf04      	itt	eq
 8006af4:	0200      	lsleq	r0, r0, #8
 8006af6:	3308      	addeq	r3, #8
 8006af8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006afc:	bf04      	itt	eq
 8006afe:	0100      	lsleq	r0, r0, #4
 8006b00:	3304      	addeq	r3, #4
 8006b02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b06:	bf04      	itt	eq
 8006b08:	0080      	lsleq	r0, r0, #2
 8006b0a:	3302      	addeq	r3, #2
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db05      	blt.n	8006b1c <__hi0bits+0x38>
 8006b10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b14:	f103 0301 	add.w	r3, r3, #1
 8006b18:	bf08      	it	eq
 8006b1a:	2320      	moveq	r3, #32
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	4770      	bx	lr
 8006b20:	2300      	movs	r3, #0
 8006b22:	e7e4      	b.n	8006aee <__hi0bits+0xa>

08006b24 <__lo0bits>:
 8006b24:	6803      	ldr	r3, [r0, #0]
 8006b26:	f013 0207 	ands.w	r2, r3, #7
 8006b2a:	d00c      	beq.n	8006b46 <__lo0bits+0x22>
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	d422      	bmi.n	8006b76 <__lo0bits+0x52>
 8006b30:	079a      	lsls	r2, r3, #30
 8006b32:	bf49      	itett	mi
 8006b34:	085b      	lsrmi	r3, r3, #1
 8006b36:	089b      	lsrpl	r3, r3, #2
 8006b38:	6003      	strmi	r3, [r0, #0]
 8006b3a:	2201      	movmi	r2, #1
 8006b3c:	bf5c      	itt	pl
 8006b3e:	6003      	strpl	r3, [r0, #0]
 8006b40:	2202      	movpl	r2, #2
 8006b42:	4610      	mov	r0, r2
 8006b44:	4770      	bx	lr
 8006b46:	b299      	uxth	r1, r3
 8006b48:	b909      	cbnz	r1, 8006b4e <__lo0bits+0x2a>
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	b2d9      	uxtb	r1, r3
 8006b50:	b909      	cbnz	r1, 8006b56 <__lo0bits+0x32>
 8006b52:	3208      	adds	r2, #8
 8006b54:	0a1b      	lsrs	r3, r3, #8
 8006b56:	0719      	lsls	r1, r3, #28
 8006b58:	bf04      	itt	eq
 8006b5a:	091b      	lsreq	r3, r3, #4
 8006b5c:	3204      	addeq	r2, #4
 8006b5e:	0799      	lsls	r1, r3, #30
 8006b60:	bf04      	itt	eq
 8006b62:	089b      	lsreq	r3, r3, #2
 8006b64:	3202      	addeq	r2, #2
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	d403      	bmi.n	8006b72 <__lo0bits+0x4e>
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	f102 0201 	add.w	r2, r2, #1
 8006b70:	d003      	beq.n	8006b7a <__lo0bits+0x56>
 8006b72:	6003      	str	r3, [r0, #0]
 8006b74:	e7e5      	b.n	8006b42 <__lo0bits+0x1e>
 8006b76:	2200      	movs	r2, #0
 8006b78:	e7e3      	b.n	8006b42 <__lo0bits+0x1e>
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	e7e1      	b.n	8006b42 <__lo0bits+0x1e>
	...

08006b80 <__i2b>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	460c      	mov	r4, r1
 8006b84:	2101      	movs	r1, #1
 8006b86:	f7ff ff05 	bl	8006994 <_Balloc>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	b928      	cbnz	r0, 8006b9a <__i2b+0x1a>
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <__i2b+0x24>)
 8006b90:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <__i2b+0x28>)
 8006b92:	f240 1145 	movw	r1, #325	; 0x145
 8006b96:	f000 fca9 	bl	80074ec <__assert_func>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	6144      	str	r4, [r0, #20]
 8006b9e:	6103      	str	r3, [r0, #16]
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08007f09 	.word	0x08007f09
 8006ba8:	08007f1a 	.word	0x08007f1a

08006bac <__multiply>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4691      	mov	r9, r2
 8006bb2:	690a      	ldr	r2, [r1, #16]
 8006bb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	bfb8      	it	lt
 8006bbc:	460b      	movlt	r3, r1
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	bfbc      	itt	lt
 8006bc2:	464c      	movlt	r4, r9
 8006bc4:	4699      	movlt	r9, r3
 8006bc6:	6927      	ldr	r7, [r4, #16]
 8006bc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	6861      	ldr	r1, [r4, #4]
 8006bd0:	eb07 060a 	add.w	r6, r7, sl
 8006bd4:	42b3      	cmp	r3, r6
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	bfb8      	it	lt
 8006bda:	3101      	addlt	r1, #1
 8006bdc:	f7ff feda 	bl	8006994 <_Balloc>
 8006be0:	b930      	cbnz	r0, 8006bf0 <__multiply+0x44>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <__multiply+0x14c>)
 8006be6:	4845      	ldr	r0, [pc, #276]	; (8006cfc <__multiply+0x150>)
 8006be8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006bec:	f000 fc7e 	bl	80074ec <__assert_func>
 8006bf0:	f100 0514 	add.w	r5, r0, #20
 8006bf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4543      	cmp	r3, r8
 8006bfe:	d321      	bcc.n	8006c44 <__multiply+0x98>
 8006c00:	f104 0314 	add.w	r3, r4, #20
 8006c04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c08:	f109 0314 	add.w	r3, r9, #20
 8006c0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	1b3a      	subs	r2, r7, r4
 8006c14:	3a15      	subs	r2, #21
 8006c16:	f022 0203 	bic.w	r2, r2, #3
 8006c1a:	3204      	adds	r2, #4
 8006c1c:	f104 0115 	add.w	r1, r4, #21
 8006c20:	428f      	cmp	r7, r1
 8006c22:	bf38      	it	cc
 8006c24:	2204      	movcc	r2, #4
 8006c26:	9201      	str	r2, [sp, #4]
 8006c28:	9a02      	ldr	r2, [sp, #8]
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d80c      	bhi.n	8006c4a <__multiply+0x9e>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	dd03      	ble.n	8006c3c <__multiply+0x90>
 8006c34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05b      	beq.n	8006cf4 <__multiply+0x148>
 8006c3c:	6106      	str	r6, [r0, #16]
 8006c3e:	b005      	add	sp, #20
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	f843 2b04 	str.w	r2, [r3], #4
 8006c48:	e7d8      	b.n	8006bfc <__multiply+0x50>
 8006c4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c4e:	f1ba 0f00 	cmp.w	sl, #0
 8006c52:	d024      	beq.n	8006c9e <__multiply+0xf2>
 8006c54:	f104 0e14 	add.w	lr, r4, #20
 8006c58:	46a9      	mov	r9, r5
 8006c5a:	f04f 0c00 	mov.w	ip, #0
 8006c5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c62:	f8d9 1000 	ldr.w	r1, [r9]
 8006c66:	fa1f fb82 	uxth.w	fp, r2
 8006c6a:	b289      	uxth	r1, r1
 8006c6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c74:	f8d9 2000 	ldr.w	r2, [r9]
 8006c78:	4461      	add	r1, ip
 8006c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c86:	b289      	uxth	r1, r1
 8006c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c8c:	4577      	cmp	r7, lr
 8006c8e:	f849 1b04 	str.w	r1, [r9], #4
 8006c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c96:	d8e2      	bhi.n	8006c5e <__multiply+0xb2>
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	f845 c002 	str.w	ip, [r5, r2]
 8006c9e:	9a03      	ldr	r2, [sp, #12]
 8006ca0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	f1b9 0f00 	cmp.w	r9, #0
 8006caa:	d021      	beq.n	8006cf0 <__multiply+0x144>
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	f104 0c14 	add.w	ip, r4, #20
 8006cb2:	46ae      	mov	lr, r5
 8006cb4:	f04f 0a00 	mov.w	sl, #0
 8006cb8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cc0:	fb09 220b 	mla	r2, r9, fp, r2
 8006cc4:	4452      	add	r2, sl
 8006cc6:	b289      	uxth	r1, r1
 8006cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ccc:	f84e 1b04 	str.w	r1, [lr], #4
 8006cd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006cd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cd8:	f8be 1000 	ldrh.w	r1, [lr]
 8006cdc:	fb09 110a 	mla	r1, r9, sl, r1
 8006ce0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ce4:	4567      	cmp	r7, ip
 8006ce6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cea:	d8e5      	bhi.n	8006cb8 <__multiply+0x10c>
 8006cec:	9a01      	ldr	r2, [sp, #4]
 8006cee:	50a9      	str	r1, [r5, r2]
 8006cf0:	3504      	adds	r5, #4
 8006cf2:	e799      	b.n	8006c28 <__multiply+0x7c>
 8006cf4:	3e01      	subs	r6, #1
 8006cf6:	e79b      	b.n	8006c30 <__multiply+0x84>
 8006cf8:	08007f09 	.word	0x08007f09
 8006cfc:	08007f1a 	.word	0x08007f1a

08006d00 <__pow5mult>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4615      	mov	r5, r2
 8006d06:	f012 0203 	ands.w	r2, r2, #3
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	d007      	beq.n	8006d20 <__pow5mult+0x20>
 8006d10:	4c25      	ldr	r4, [pc, #148]	; (8006da8 <__pow5mult+0xa8>)
 8006d12:	3a01      	subs	r2, #1
 8006d14:	2300      	movs	r3, #0
 8006d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d1a:	f7ff fe9d 	bl	8006a58 <__multadd>
 8006d1e:	4607      	mov	r7, r0
 8006d20:	10ad      	asrs	r5, r5, #2
 8006d22:	d03d      	beq.n	8006da0 <__pow5mult+0xa0>
 8006d24:	69f4      	ldr	r4, [r6, #28]
 8006d26:	b97c      	cbnz	r4, 8006d48 <__pow5mult+0x48>
 8006d28:	2010      	movs	r0, #16
 8006d2a:	f7ff fd7f 	bl	800682c <malloc>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	61f0      	str	r0, [r6, #28]
 8006d32:	b928      	cbnz	r0, 8006d40 <__pow5mult+0x40>
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <__pow5mult+0xac>)
 8006d36:	481e      	ldr	r0, [pc, #120]	; (8006db0 <__pow5mult+0xb0>)
 8006d38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d3c:	f000 fbd6 	bl	80074ec <__assert_func>
 8006d40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d44:	6004      	str	r4, [r0, #0]
 8006d46:	60c4      	str	r4, [r0, #12]
 8006d48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d50:	b94c      	cbnz	r4, 8006d66 <__pow5mult+0x66>
 8006d52:	f240 2171 	movw	r1, #625	; 0x271
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7ff ff12 	bl	8006b80 <__i2b>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d62:	4604      	mov	r4, r0
 8006d64:	6003      	str	r3, [r0, #0]
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	07eb      	lsls	r3, r5, #31
 8006d6c:	d50a      	bpl.n	8006d84 <__pow5mult+0x84>
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4622      	mov	r2, r4
 8006d72:	4630      	mov	r0, r6
 8006d74:	f7ff ff1a 	bl	8006bac <__multiply>
 8006d78:	4639      	mov	r1, r7
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff fe49 	bl	8006a14 <_Bfree>
 8006d82:	4647      	mov	r7, r8
 8006d84:	106d      	asrs	r5, r5, #1
 8006d86:	d00b      	beq.n	8006da0 <__pow5mult+0xa0>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	b938      	cbnz	r0, 8006d9c <__pow5mult+0x9c>
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff ff0b 	bl	8006bac <__multiply>
 8006d96:	6020      	str	r0, [r4, #0]
 8006d98:	f8c0 9000 	str.w	r9, [r0]
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	e7e4      	b.n	8006d6a <__pow5mult+0x6a>
 8006da0:	4638      	mov	r0, r7
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	bf00      	nop
 8006da8:	08008068 	.word	0x08008068
 8006dac:	08007e9a 	.word	0x08007e9a
 8006db0:	08007f1a 	.word	0x08007f1a

08006db4 <__lshift>:
 8006db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	460c      	mov	r4, r1
 8006dba:	6849      	ldr	r1, [r1, #4]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dc2:	68a3      	ldr	r3, [r4, #8]
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	4691      	mov	r9, r2
 8006dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dcc:	f108 0601 	add.w	r6, r8, #1
 8006dd0:	42b3      	cmp	r3, r6
 8006dd2:	db0b      	blt.n	8006dec <__lshift+0x38>
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	f7ff fddd 	bl	8006994 <_Balloc>
 8006dda:	4605      	mov	r5, r0
 8006ddc:	b948      	cbnz	r0, 8006df2 <__lshift+0x3e>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <__lshift+0xd0>)
 8006de2:	4829      	ldr	r0, [pc, #164]	; (8006e88 <__lshift+0xd4>)
 8006de4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006de8:	f000 fb80 	bl	80074ec <__assert_func>
 8006dec:	3101      	adds	r1, #1
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	e7ee      	b.n	8006dd0 <__lshift+0x1c>
 8006df2:	2300      	movs	r3, #0
 8006df4:	f100 0114 	add.w	r1, r0, #20
 8006df8:	f100 0210 	add.w	r2, r0, #16
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	4553      	cmp	r3, sl
 8006e00:	db33      	blt.n	8006e6a <__lshift+0xb6>
 8006e02:	6920      	ldr	r0, [r4, #16]
 8006e04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e08:	f104 0314 	add.w	r3, r4, #20
 8006e0c:	f019 091f 	ands.w	r9, r9, #31
 8006e10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e18:	d02b      	beq.n	8006e72 <__lshift+0xbe>
 8006e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e1e:	468a      	mov	sl, r1
 8006e20:	2200      	movs	r2, #0
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	fa00 f009 	lsl.w	r0, r0, r9
 8006e28:	4310      	orrs	r0, r2
 8006e2a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e32:	459c      	cmp	ip, r3
 8006e34:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e38:	d8f3      	bhi.n	8006e22 <__lshift+0x6e>
 8006e3a:	ebac 0304 	sub.w	r3, ip, r4
 8006e3e:	3b15      	subs	r3, #21
 8006e40:	f023 0303 	bic.w	r3, r3, #3
 8006e44:	3304      	adds	r3, #4
 8006e46:	f104 0015 	add.w	r0, r4, #21
 8006e4a:	4584      	cmp	ip, r0
 8006e4c:	bf38      	it	cc
 8006e4e:	2304      	movcc	r3, #4
 8006e50:	50ca      	str	r2, [r1, r3]
 8006e52:	b10a      	cbz	r2, 8006e58 <__lshift+0xa4>
 8006e54:	f108 0602 	add.w	r6, r8, #2
 8006e58:	3e01      	subs	r6, #1
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	612e      	str	r6, [r5, #16]
 8006e5e:	4621      	mov	r1, r4
 8006e60:	f7ff fdd8 	bl	8006a14 <_Bfree>
 8006e64:	4628      	mov	r0, r5
 8006e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e6e:	3301      	adds	r3, #1
 8006e70:	e7c5      	b.n	8006dfe <__lshift+0x4a>
 8006e72:	3904      	subs	r1, #4
 8006e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e78:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e7c:	459c      	cmp	ip, r3
 8006e7e:	d8f9      	bhi.n	8006e74 <__lshift+0xc0>
 8006e80:	e7ea      	b.n	8006e58 <__lshift+0xa4>
 8006e82:	bf00      	nop
 8006e84:	08007f09 	.word	0x08007f09
 8006e88:	08007f1a 	.word	0x08007f1a

08006e8c <__mcmp>:
 8006e8c:	b530      	push	{r4, r5, lr}
 8006e8e:	6902      	ldr	r2, [r0, #16]
 8006e90:	690c      	ldr	r4, [r1, #16]
 8006e92:	1b12      	subs	r2, r2, r4
 8006e94:	d10e      	bne.n	8006eb4 <__mcmp+0x28>
 8006e96:	f100 0314 	add.w	r3, r0, #20
 8006e9a:	3114      	adds	r1, #20
 8006e9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ea0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ea4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ea8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006eac:	42a5      	cmp	r5, r4
 8006eae:	d003      	beq.n	8006eb8 <__mcmp+0x2c>
 8006eb0:	d305      	bcc.n	8006ebe <__mcmp+0x32>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	bd30      	pop	{r4, r5, pc}
 8006eb8:	4283      	cmp	r3, r0
 8006eba:	d3f3      	bcc.n	8006ea4 <__mcmp+0x18>
 8006ebc:	e7fa      	b.n	8006eb4 <__mcmp+0x28>
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	e7f7      	b.n	8006eb4 <__mcmp+0x28>

08006ec4 <__mdiff>:
 8006ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4606      	mov	r6, r0
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4690      	mov	r8, r2
 8006ed2:	f7ff ffdb 	bl	8006e8c <__mcmp>
 8006ed6:	1e05      	subs	r5, r0, #0
 8006ed8:	d110      	bne.n	8006efc <__mdiff+0x38>
 8006eda:	4629      	mov	r1, r5
 8006edc:	4630      	mov	r0, r6
 8006ede:	f7ff fd59 	bl	8006994 <_Balloc>
 8006ee2:	b930      	cbnz	r0, 8006ef2 <__mdiff+0x2e>
 8006ee4:	4b3a      	ldr	r3, [pc, #232]	; (8006fd0 <__mdiff+0x10c>)
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	f240 2137 	movw	r1, #567	; 0x237
 8006eec:	4839      	ldr	r0, [pc, #228]	; (8006fd4 <__mdiff+0x110>)
 8006eee:	f000 fafd 	bl	80074ec <__assert_func>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	bfa4      	itt	ge
 8006efe:	4643      	movge	r3, r8
 8006f00:	46a0      	movge	r8, r4
 8006f02:	4630      	mov	r0, r6
 8006f04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f08:	bfa6      	itte	ge
 8006f0a:	461c      	movge	r4, r3
 8006f0c:	2500      	movge	r5, #0
 8006f0e:	2501      	movlt	r5, #1
 8006f10:	f7ff fd40 	bl	8006994 <_Balloc>
 8006f14:	b920      	cbnz	r0, 8006f20 <__mdiff+0x5c>
 8006f16:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <__mdiff+0x10c>)
 8006f18:	4602      	mov	r2, r0
 8006f1a:	f240 2145 	movw	r1, #581	; 0x245
 8006f1e:	e7e5      	b.n	8006eec <__mdiff+0x28>
 8006f20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f24:	6926      	ldr	r6, [r4, #16]
 8006f26:	60c5      	str	r5, [r0, #12]
 8006f28:	f104 0914 	add.w	r9, r4, #20
 8006f2c:	f108 0514 	add.w	r5, r8, #20
 8006f30:	f100 0e14 	add.w	lr, r0, #20
 8006f34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f3c:	f108 0210 	add.w	r2, r8, #16
 8006f40:	46f2      	mov	sl, lr
 8006f42:	2100      	movs	r1, #0
 8006f44:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f4c:	fa11 f88b 	uxtah	r8, r1, fp
 8006f50:	b299      	uxth	r1, r3
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	eba8 0801 	sub.w	r8, r8, r1
 8006f58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f60:	fa1f f888 	uxth.w	r8, r8
 8006f64:	1419      	asrs	r1, r3, #16
 8006f66:	454e      	cmp	r6, r9
 8006f68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f6c:	f84a 3b04 	str.w	r3, [sl], #4
 8006f70:	d8e8      	bhi.n	8006f44 <__mdiff+0x80>
 8006f72:	1b33      	subs	r3, r6, r4
 8006f74:	3b15      	subs	r3, #21
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	3415      	adds	r4, #21
 8006f7e:	42a6      	cmp	r6, r4
 8006f80:	bf38      	it	cc
 8006f82:	2304      	movcc	r3, #4
 8006f84:	441d      	add	r5, r3
 8006f86:	4473      	add	r3, lr
 8006f88:	469e      	mov	lr, r3
 8006f8a:	462e      	mov	r6, r5
 8006f8c:	4566      	cmp	r6, ip
 8006f8e:	d30e      	bcc.n	8006fae <__mdiff+0xea>
 8006f90:	f10c 0203 	add.w	r2, ip, #3
 8006f94:	1b52      	subs	r2, r2, r5
 8006f96:	f022 0203 	bic.w	r2, r2, #3
 8006f9a:	3d03      	subs	r5, #3
 8006f9c:	45ac      	cmp	ip, r5
 8006f9e:	bf38      	it	cc
 8006fa0:	2200      	movcc	r2, #0
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fa8:	b17a      	cbz	r2, 8006fca <__mdiff+0x106>
 8006faa:	6107      	str	r7, [r0, #16]
 8006fac:	e7a4      	b.n	8006ef8 <__mdiff+0x34>
 8006fae:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fb2:	fa11 f288 	uxtah	r2, r1, r8
 8006fb6:	1414      	asrs	r4, r2, #16
 8006fb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fbc:	b292      	uxth	r2, r2
 8006fbe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fc2:	f84e 2b04 	str.w	r2, [lr], #4
 8006fc6:	1421      	asrs	r1, r4, #16
 8006fc8:	e7e0      	b.n	8006f8c <__mdiff+0xc8>
 8006fca:	3f01      	subs	r7, #1
 8006fcc:	e7ea      	b.n	8006fa4 <__mdiff+0xe0>
 8006fce:	bf00      	nop
 8006fd0:	08007f09 	.word	0x08007f09
 8006fd4:	08007f1a 	.word	0x08007f1a

08006fd8 <__d2b>:
 8006fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	460f      	mov	r7, r1
 8006fde:	2101      	movs	r1, #1
 8006fe0:	ec59 8b10 	vmov	r8, r9, d0
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	f7ff fcd5 	bl	8006994 <_Balloc>
 8006fea:	4604      	mov	r4, r0
 8006fec:	b930      	cbnz	r0, 8006ffc <__d2b+0x24>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b24      	ldr	r3, [pc, #144]	; (8007084 <__d2b+0xac>)
 8006ff2:	4825      	ldr	r0, [pc, #148]	; (8007088 <__d2b+0xb0>)
 8006ff4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ff8:	f000 fa78 	bl	80074ec <__assert_func>
 8006ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007004:	bb2d      	cbnz	r5, 8007052 <__d2b+0x7a>
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	f1b8 0300 	subs.w	r3, r8, #0
 800700c:	d026      	beq.n	800705c <__d2b+0x84>
 800700e:	4668      	mov	r0, sp
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	f7ff fd87 	bl	8006b24 <__lo0bits>
 8007016:	e9dd 1200 	ldrd	r1, r2, [sp]
 800701a:	b1e8      	cbz	r0, 8007058 <__d2b+0x80>
 800701c:	f1c0 0320 	rsb	r3, r0, #32
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	430b      	orrs	r3, r1
 8007026:	40c2      	lsrs	r2, r0
 8007028:	6163      	str	r3, [r4, #20]
 800702a:	9201      	str	r2, [sp, #4]
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	61a3      	str	r3, [r4, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf14      	ite	ne
 8007034:	2202      	movne	r2, #2
 8007036:	2201      	moveq	r2, #1
 8007038:	6122      	str	r2, [r4, #16]
 800703a:	b1bd      	cbz	r5, 800706c <__d2b+0x94>
 800703c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007040:	4405      	add	r5, r0
 8007042:	603d      	str	r5, [r7, #0]
 8007044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007048:	6030      	str	r0, [r6, #0]
 800704a:	4620      	mov	r0, r4
 800704c:	b003      	add	sp, #12
 800704e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007056:	e7d6      	b.n	8007006 <__d2b+0x2e>
 8007058:	6161      	str	r1, [r4, #20]
 800705a:	e7e7      	b.n	800702c <__d2b+0x54>
 800705c:	a801      	add	r0, sp, #4
 800705e:	f7ff fd61 	bl	8006b24 <__lo0bits>
 8007062:	9b01      	ldr	r3, [sp, #4]
 8007064:	6163      	str	r3, [r4, #20]
 8007066:	3020      	adds	r0, #32
 8007068:	2201      	movs	r2, #1
 800706a:	e7e5      	b.n	8007038 <__d2b+0x60>
 800706c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007074:	6038      	str	r0, [r7, #0]
 8007076:	6918      	ldr	r0, [r3, #16]
 8007078:	f7ff fd34 	bl	8006ae4 <__hi0bits>
 800707c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007080:	e7e2      	b.n	8007048 <__d2b+0x70>
 8007082:	bf00      	nop
 8007084:	08007f09 	.word	0x08007f09
 8007088:	08007f1a 	.word	0x08007f1a

0800708c <__ssputs_r>:
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	688e      	ldr	r6, [r1, #8]
 8007092:	461f      	mov	r7, r3
 8007094:	42be      	cmp	r6, r7
 8007096:	680b      	ldr	r3, [r1, #0]
 8007098:	4682      	mov	sl, r0
 800709a:	460c      	mov	r4, r1
 800709c:	4690      	mov	r8, r2
 800709e:	d82c      	bhi.n	80070fa <__ssputs_r+0x6e>
 80070a0:	898a      	ldrh	r2, [r1, #12]
 80070a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070a6:	d026      	beq.n	80070f6 <__ssputs_r+0x6a>
 80070a8:	6965      	ldr	r5, [r4, #20]
 80070aa:	6909      	ldr	r1, [r1, #16]
 80070ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070b0:	eba3 0901 	sub.w	r9, r3, r1
 80070b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070b8:	1c7b      	adds	r3, r7, #1
 80070ba:	444b      	add	r3, r9
 80070bc:	106d      	asrs	r5, r5, #1
 80070be:	429d      	cmp	r5, r3
 80070c0:	bf38      	it	cc
 80070c2:	461d      	movcc	r5, r3
 80070c4:	0553      	lsls	r3, r2, #21
 80070c6:	d527      	bpl.n	8007118 <__ssputs_r+0x8c>
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7ff fbd7 	bl	800687c <_malloc_r>
 80070ce:	4606      	mov	r6, r0
 80070d0:	b360      	cbz	r0, 800712c <__ssputs_r+0xa0>
 80070d2:	6921      	ldr	r1, [r4, #16]
 80070d4:	464a      	mov	r2, r9
 80070d6:	f7fe fcd2 	bl	8005a7e <memcpy>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	6126      	str	r6, [r4, #16]
 80070e8:	6165      	str	r5, [r4, #20]
 80070ea:	444e      	add	r6, r9
 80070ec:	eba5 0509 	sub.w	r5, r5, r9
 80070f0:	6026      	str	r6, [r4, #0]
 80070f2:	60a5      	str	r5, [r4, #8]
 80070f4:	463e      	mov	r6, r7
 80070f6:	42be      	cmp	r6, r7
 80070f8:	d900      	bls.n	80070fc <__ssputs_r+0x70>
 80070fa:	463e      	mov	r6, r7
 80070fc:	6820      	ldr	r0, [r4, #0]
 80070fe:	4632      	mov	r2, r6
 8007100:	4641      	mov	r1, r8
 8007102:	f000 f9c9 	bl	8007498 <memmove>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	1b9b      	subs	r3, r3, r6
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	4433      	add	r3, r6
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	2000      	movs	r0, #0
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	462a      	mov	r2, r5
 800711a:	f000 fa2d 	bl	8007578 <_realloc_r>
 800711e:	4606      	mov	r6, r0
 8007120:	2800      	cmp	r0, #0
 8007122:	d1e0      	bne.n	80070e6 <__ssputs_r+0x5a>
 8007124:	6921      	ldr	r1, [r4, #16]
 8007126:	4650      	mov	r0, sl
 8007128:	f7ff fb34 	bl	8006794 <_free_r>
 800712c:	230c      	movs	r3, #12
 800712e:	f8ca 3000 	str.w	r3, [sl]
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	e7e9      	b.n	8007114 <__ssputs_r+0x88>

08007140 <_svfiprintf_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	4698      	mov	r8, r3
 8007146:	898b      	ldrh	r3, [r1, #12]
 8007148:	061b      	lsls	r3, r3, #24
 800714a:	b09d      	sub	sp, #116	; 0x74
 800714c:	4607      	mov	r7, r0
 800714e:	460d      	mov	r5, r1
 8007150:	4614      	mov	r4, r2
 8007152:	d50e      	bpl.n	8007172 <_svfiprintf_r+0x32>
 8007154:	690b      	ldr	r3, [r1, #16]
 8007156:	b963      	cbnz	r3, 8007172 <_svfiprintf_r+0x32>
 8007158:	2140      	movs	r1, #64	; 0x40
 800715a:	f7ff fb8f 	bl	800687c <_malloc_r>
 800715e:	6028      	str	r0, [r5, #0]
 8007160:	6128      	str	r0, [r5, #16]
 8007162:	b920      	cbnz	r0, 800716e <_svfiprintf_r+0x2e>
 8007164:	230c      	movs	r3, #12
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	f04f 30ff 	mov.w	r0, #4294967295
 800716c:	e0d0      	b.n	8007310 <_svfiprintf_r+0x1d0>
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	616b      	str	r3, [r5, #20]
 8007172:	2300      	movs	r3, #0
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
 8007176:	2320      	movs	r3, #32
 8007178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800717c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007180:	2330      	movs	r3, #48	; 0x30
 8007182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007328 <_svfiprintf_r+0x1e8>
 8007186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800718a:	f04f 0901 	mov.w	r9, #1
 800718e:	4623      	mov	r3, r4
 8007190:	469a      	mov	sl, r3
 8007192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007196:	b10a      	cbz	r2, 800719c <_svfiprintf_r+0x5c>
 8007198:	2a25      	cmp	r2, #37	; 0x25
 800719a:	d1f9      	bne.n	8007190 <_svfiprintf_r+0x50>
 800719c:	ebba 0b04 	subs.w	fp, sl, r4
 80071a0:	d00b      	beq.n	80071ba <_svfiprintf_r+0x7a>
 80071a2:	465b      	mov	r3, fp
 80071a4:	4622      	mov	r2, r4
 80071a6:	4629      	mov	r1, r5
 80071a8:	4638      	mov	r0, r7
 80071aa:	f7ff ff6f 	bl	800708c <__ssputs_r>
 80071ae:	3001      	adds	r0, #1
 80071b0:	f000 80a9 	beq.w	8007306 <_svfiprintf_r+0x1c6>
 80071b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b6:	445a      	add	r2, fp
 80071b8:	9209      	str	r2, [sp, #36]	; 0x24
 80071ba:	f89a 3000 	ldrb.w	r3, [sl]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80a1 	beq.w	8007306 <_svfiprintf_r+0x1c6>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ce:	f10a 0a01 	add.w	sl, sl, #1
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	9307      	str	r3, [sp, #28]
 80071d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071da:	931a      	str	r3, [sp, #104]	; 0x68
 80071dc:	4654      	mov	r4, sl
 80071de:	2205      	movs	r2, #5
 80071e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e4:	4850      	ldr	r0, [pc, #320]	; (8007328 <_svfiprintf_r+0x1e8>)
 80071e6:	f7f9 f823 	bl	8000230 <memchr>
 80071ea:	9a04      	ldr	r2, [sp, #16]
 80071ec:	b9d8      	cbnz	r0, 8007226 <_svfiprintf_r+0xe6>
 80071ee:	06d0      	lsls	r0, r2, #27
 80071f0:	bf44      	itt	mi
 80071f2:	2320      	movmi	r3, #32
 80071f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f8:	0711      	lsls	r1, r2, #28
 80071fa:	bf44      	itt	mi
 80071fc:	232b      	movmi	r3, #43	; 0x2b
 80071fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007202:	f89a 3000 	ldrb.w	r3, [sl]
 8007206:	2b2a      	cmp	r3, #42	; 0x2a
 8007208:	d015      	beq.n	8007236 <_svfiprintf_r+0xf6>
 800720a:	9a07      	ldr	r2, [sp, #28]
 800720c:	4654      	mov	r4, sl
 800720e:	2000      	movs	r0, #0
 8007210:	f04f 0c0a 	mov.w	ip, #10
 8007214:	4621      	mov	r1, r4
 8007216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800721a:	3b30      	subs	r3, #48	; 0x30
 800721c:	2b09      	cmp	r3, #9
 800721e:	d94d      	bls.n	80072bc <_svfiprintf_r+0x17c>
 8007220:	b1b0      	cbz	r0, 8007250 <_svfiprintf_r+0x110>
 8007222:	9207      	str	r2, [sp, #28]
 8007224:	e014      	b.n	8007250 <_svfiprintf_r+0x110>
 8007226:	eba0 0308 	sub.w	r3, r0, r8
 800722a:	fa09 f303 	lsl.w	r3, r9, r3
 800722e:	4313      	orrs	r3, r2
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	46a2      	mov	sl, r4
 8007234:	e7d2      	b.n	80071dc <_svfiprintf_r+0x9c>
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	1d19      	adds	r1, r3, #4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	9103      	str	r1, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	bfbb      	ittet	lt
 8007242:	425b      	neglt	r3, r3
 8007244:	f042 0202 	orrlt.w	r2, r2, #2
 8007248:	9307      	strge	r3, [sp, #28]
 800724a:	9307      	strlt	r3, [sp, #28]
 800724c:	bfb8      	it	lt
 800724e:	9204      	strlt	r2, [sp, #16]
 8007250:	7823      	ldrb	r3, [r4, #0]
 8007252:	2b2e      	cmp	r3, #46	; 0x2e
 8007254:	d10c      	bne.n	8007270 <_svfiprintf_r+0x130>
 8007256:	7863      	ldrb	r3, [r4, #1]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d134      	bne.n	80072c6 <_svfiprintf_r+0x186>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	9203      	str	r2, [sp, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfb8      	it	lt
 8007268:	f04f 33ff 	movlt.w	r3, #4294967295
 800726c:	3402      	adds	r4, #2
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007338 <_svfiprintf_r+0x1f8>
 8007274:	7821      	ldrb	r1, [r4, #0]
 8007276:	2203      	movs	r2, #3
 8007278:	4650      	mov	r0, sl
 800727a:	f7f8 ffd9 	bl	8000230 <memchr>
 800727e:	b138      	cbz	r0, 8007290 <_svfiprintf_r+0x150>
 8007280:	9b04      	ldr	r3, [sp, #16]
 8007282:	eba0 000a 	sub.w	r0, r0, sl
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	4082      	lsls	r2, r0
 800728a:	4313      	orrs	r3, r2
 800728c:	3401      	adds	r4, #1
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007294:	4825      	ldr	r0, [pc, #148]	; (800732c <_svfiprintf_r+0x1ec>)
 8007296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800729a:	2206      	movs	r2, #6
 800729c:	f7f8 ffc8 	bl	8000230 <memchr>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d038      	beq.n	8007316 <_svfiprintf_r+0x1d6>
 80072a4:	4b22      	ldr	r3, [pc, #136]	; (8007330 <_svfiprintf_r+0x1f0>)
 80072a6:	bb1b      	cbnz	r3, 80072f0 <_svfiprintf_r+0x1b0>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	3307      	adds	r3, #7
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	3308      	adds	r3, #8
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b6:	4433      	add	r3, r6
 80072b8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ba:	e768      	b.n	800718e <_svfiprintf_r+0x4e>
 80072bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c0:	460c      	mov	r4, r1
 80072c2:	2001      	movs	r0, #1
 80072c4:	e7a6      	b.n	8007214 <_svfiprintf_r+0xd4>
 80072c6:	2300      	movs	r3, #0
 80072c8:	3401      	adds	r4, #1
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	4619      	mov	r1, r3
 80072ce:	f04f 0c0a 	mov.w	ip, #10
 80072d2:	4620      	mov	r0, r4
 80072d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d8:	3a30      	subs	r2, #48	; 0x30
 80072da:	2a09      	cmp	r2, #9
 80072dc:	d903      	bls.n	80072e6 <_svfiprintf_r+0x1a6>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0c6      	beq.n	8007270 <_svfiprintf_r+0x130>
 80072e2:	9105      	str	r1, [sp, #20]
 80072e4:	e7c4      	b.n	8007270 <_svfiprintf_r+0x130>
 80072e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ea:	4604      	mov	r4, r0
 80072ec:	2301      	movs	r3, #1
 80072ee:	e7f0      	b.n	80072d2 <_svfiprintf_r+0x192>
 80072f0:	ab03      	add	r3, sp, #12
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	462a      	mov	r2, r5
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <_svfiprintf_r+0x1f4>)
 80072f8:	a904      	add	r1, sp, #16
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7fd fe20 	bl	8004f40 <_printf_float>
 8007300:	1c42      	adds	r2, r0, #1
 8007302:	4606      	mov	r6, r0
 8007304:	d1d6      	bne.n	80072b4 <_svfiprintf_r+0x174>
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	065b      	lsls	r3, r3, #25
 800730a:	f53f af2d 	bmi.w	8007168 <_svfiprintf_r+0x28>
 800730e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007310:	b01d      	add	sp, #116	; 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	ab03      	add	r3, sp, #12
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	462a      	mov	r2, r5
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <_svfiprintf_r+0x1f4>)
 800731e:	a904      	add	r1, sp, #16
 8007320:	4638      	mov	r0, r7
 8007322:	f7fe f8b1 	bl	8005488 <_printf_i>
 8007326:	e7eb      	b.n	8007300 <_svfiprintf_r+0x1c0>
 8007328:	08008074 	.word	0x08008074
 800732c:	0800807e 	.word	0x0800807e
 8007330:	08004f41 	.word	0x08004f41
 8007334:	0800708d 	.word	0x0800708d
 8007338:	0800807a 	.word	0x0800807a

0800733c <__sflush_r>:
 800733c:	898a      	ldrh	r2, [r1, #12]
 800733e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	0710      	lsls	r0, r2, #28
 8007346:	460c      	mov	r4, r1
 8007348:	d458      	bmi.n	80073fc <__sflush_r+0xc0>
 800734a:	684b      	ldr	r3, [r1, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc05      	bgt.n	800735c <__sflush_r+0x20>
 8007350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	dc02      	bgt.n	800735c <__sflush_r+0x20>
 8007356:	2000      	movs	r0, #0
 8007358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800735e:	2e00      	cmp	r6, #0
 8007360:	d0f9      	beq.n	8007356 <__sflush_r+0x1a>
 8007362:	2300      	movs	r3, #0
 8007364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007368:	682f      	ldr	r7, [r5, #0]
 800736a:	6a21      	ldr	r1, [r4, #32]
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	d032      	beq.n	80073d6 <__sflush_r+0x9a>
 8007370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	075a      	lsls	r2, r3, #29
 8007376:	d505      	bpl.n	8007384 <__sflush_r+0x48>
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	1ac0      	subs	r0, r0, r3
 800737c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800737e:	b10b      	cbz	r3, 8007384 <__sflush_r+0x48>
 8007380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007382:	1ac0      	subs	r0, r0, r3
 8007384:	2300      	movs	r3, #0
 8007386:	4602      	mov	r2, r0
 8007388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800738a:	6a21      	ldr	r1, [r4, #32]
 800738c:	4628      	mov	r0, r5
 800738e:	47b0      	blx	r6
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	d106      	bne.n	80073a4 <__sflush_r+0x68>
 8007396:	6829      	ldr	r1, [r5, #0]
 8007398:	291d      	cmp	r1, #29
 800739a:	d82b      	bhi.n	80073f4 <__sflush_r+0xb8>
 800739c:	4a29      	ldr	r2, [pc, #164]	; (8007444 <__sflush_r+0x108>)
 800739e:	410a      	asrs	r2, r1
 80073a0:	07d6      	lsls	r6, r2, #31
 80073a2:	d427      	bmi.n	80073f4 <__sflush_r+0xb8>
 80073a4:	2200      	movs	r2, #0
 80073a6:	6062      	str	r2, [r4, #4]
 80073a8:	04d9      	lsls	r1, r3, #19
 80073aa:	6922      	ldr	r2, [r4, #16]
 80073ac:	6022      	str	r2, [r4, #0]
 80073ae:	d504      	bpl.n	80073ba <__sflush_r+0x7e>
 80073b0:	1c42      	adds	r2, r0, #1
 80073b2:	d101      	bne.n	80073b8 <__sflush_r+0x7c>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b903      	cbnz	r3, 80073ba <__sflush_r+0x7e>
 80073b8:	6560      	str	r0, [r4, #84]	; 0x54
 80073ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073bc:	602f      	str	r7, [r5, #0]
 80073be:	2900      	cmp	r1, #0
 80073c0:	d0c9      	beq.n	8007356 <__sflush_r+0x1a>
 80073c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d002      	beq.n	80073d0 <__sflush_r+0x94>
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7ff f9e2 	bl	8006794 <_free_r>
 80073d0:	2000      	movs	r0, #0
 80073d2:	6360      	str	r0, [r4, #52]	; 0x34
 80073d4:	e7c0      	b.n	8007358 <__sflush_r+0x1c>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	1c41      	adds	r1, r0, #1
 80073de:	d1c8      	bne.n	8007372 <__sflush_r+0x36>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0c5      	beq.n	8007372 <__sflush_r+0x36>
 80073e6:	2b1d      	cmp	r3, #29
 80073e8:	d001      	beq.n	80073ee <__sflush_r+0xb2>
 80073ea:	2b16      	cmp	r3, #22
 80073ec:	d101      	bne.n	80073f2 <__sflush_r+0xb6>
 80073ee:	602f      	str	r7, [r5, #0]
 80073f0:	e7b1      	b.n	8007356 <__sflush_r+0x1a>
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	e7ad      	b.n	8007358 <__sflush_r+0x1c>
 80073fc:	690f      	ldr	r7, [r1, #16]
 80073fe:	2f00      	cmp	r7, #0
 8007400:	d0a9      	beq.n	8007356 <__sflush_r+0x1a>
 8007402:	0793      	lsls	r3, r2, #30
 8007404:	680e      	ldr	r6, [r1, #0]
 8007406:	bf08      	it	eq
 8007408:	694b      	ldreq	r3, [r1, #20]
 800740a:	600f      	str	r7, [r1, #0]
 800740c:	bf18      	it	ne
 800740e:	2300      	movne	r3, #0
 8007410:	eba6 0807 	sub.w	r8, r6, r7
 8007414:	608b      	str	r3, [r1, #8]
 8007416:	f1b8 0f00 	cmp.w	r8, #0
 800741a:	dd9c      	ble.n	8007356 <__sflush_r+0x1a>
 800741c:	6a21      	ldr	r1, [r4, #32]
 800741e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007420:	4643      	mov	r3, r8
 8007422:	463a      	mov	r2, r7
 8007424:	4628      	mov	r0, r5
 8007426:	47b0      	blx	r6
 8007428:	2800      	cmp	r0, #0
 800742a:	dc06      	bgt.n	800743a <__sflush_r+0xfe>
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e78e      	b.n	8007358 <__sflush_r+0x1c>
 800743a:	4407      	add	r7, r0
 800743c:	eba8 0800 	sub.w	r8, r8, r0
 8007440:	e7e9      	b.n	8007416 <__sflush_r+0xda>
 8007442:	bf00      	nop
 8007444:	dfbffffe 	.word	0xdfbffffe

08007448 <_fflush_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	690b      	ldr	r3, [r1, #16]
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	b913      	cbnz	r3, 8007458 <_fflush_r+0x10>
 8007452:	2500      	movs	r5, #0
 8007454:	4628      	mov	r0, r5
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	b118      	cbz	r0, 8007462 <_fflush_r+0x1a>
 800745a:	6a03      	ldr	r3, [r0, #32]
 800745c:	b90b      	cbnz	r3, 8007462 <_fflush_r+0x1a>
 800745e:	f7fe f9c1 	bl	80057e4 <__sinit>
 8007462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f3      	beq.n	8007452 <_fflush_r+0xa>
 800746a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800746c:	07d0      	lsls	r0, r2, #31
 800746e:	d404      	bmi.n	800747a <_fflush_r+0x32>
 8007470:	0599      	lsls	r1, r3, #22
 8007472:	d402      	bmi.n	800747a <_fflush_r+0x32>
 8007474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007476:	f7fe fb00 	bl	8005a7a <__retarget_lock_acquire_recursive>
 800747a:	4628      	mov	r0, r5
 800747c:	4621      	mov	r1, r4
 800747e:	f7ff ff5d 	bl	800733c <__sflush_r>
 8007482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007484:	07da      	lsls	r2, r3, #31
 8007486:	4605      	mov	r5, r0
 8007488:	d4e4      	bmi.n	8007454 <_fflush_r+0xc>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	059b      	lsls	r3, r3, #22
 800748e:	d4e1      	bmi.n	8007454 <_fflush_r+0xc>
 8007490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007492:	f7fe faf3 	bl	8005a7c <__retarget_lock_release_recursive>
 8007496:	e7dd      	b.n	8007454 <_fflush_r+0xc>

08007498 <memmove>:
 8007498:	4288      	cmp	r0, r1
 800749a:	b510      	push	{r4, lr}
 800749c:	eb01 0402 	add.w	r4, r1, r2
 80074a0:	d902      	bls.n	80074a8 <memmove+0x10>
 80074a2:	4284      	cmp	r4, r0
 80074a4:	4623      	mov	r3, r4
 80074a6:	d807      	bhi.n	80074b8 <memmove+0x20>
 80074a8:	1e43      	subs	r3, r0, #1
 80074aa:	42a1      	cmp	r1, r4
 80074ac:	d008      	beq.n	80074c0 <memmove+0x28>
 80074ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074b6:	e7f8      	b.n	80074aa <memmove+0x12>
 80074b8:	4402      	add	r2, r0
 80074ba:	4601      	mov	r1, r0
 80074bc:	428a      	cmp	r2, r1
 80074be:	d100      	bne.n	80074c2 <memmove+0x2a>
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ca:	e7f7      	b.n	80074bc <memmove+0x24>

080074cc <_sbrk_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_sbrk_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fb f84a 	bl	8002570 <_sbrk>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_sbrk_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_sbrk_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20000844 	.word	0x20000844

080074ec <__assert_func>:
 80074ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ee:	4614      	mov	r4, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <__assert_func+0x2c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4605      	mov	r5, r0
 80074f8:	68d8      	ldr	r0, [r3, #12]
 80074fa:	b14c      	cbz	r4, 8007510 <__assert_func+0x24>
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <__assert_func+0x30>)
 80074fe:	9100      	str	r1, [sp, #0]
 8007500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007504:	4906      	ldr	r1, [pc, #24]	; (8007520 <__assert_func+0x34>)
 8007506:	462b      	mov	r3, r5
 8007508:	f000 f872 	bl	80075f0 <fiprintf>
 800750c:	f000 f882 	bl	8007614 <abort>
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <__assert_func+0x38>)
 8007512:	461c      	mov	r4, r3
 8007514:	e7f3      	b.n	80074fe <__assert_func+0x12>
 8007516:	bf00      	nop
 8007518:	20000078 	.word	0x20000078
 800751c:	0800808f 	.word	0x0800808f
 8007520:	0800809c 	.word	0x0800809c
 8007524:	080080ca 	.word	0x080080ca

08007528 <_calloc_r>:
 8007528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800752a:	fba1 2402 	umull	r2, r4, r1, r2
 800752e:	b94c      	cbnz	r4, 8007544 <_calloc_r+0x1c>
 8007530:	4611      	mov	r1, r2
 8007532:	9201      	str	r2, [sp, #4]
 8007534:	f7ff f9a2 	bl	800687c <_malloc_r>
 8007538:	9a01      	ldr	r2, [sp, #4]
 800753a:	4605      	mov	r5, r0
 800753c:	b930      	cbnz	r0, 800754c <_calloc_r+0x24>
 800753e:	4628      	mov	r0, r5
 8007540:	b003      	add	sp, #12
 8007542:	bd30      	pop	{r4, r5, pc}
 8007544:	220c      	movs	r2, #12
 8007546:	6002      	str	r2, [r0, #0]
 8007548:	2500      	movs	r5, #0
 800754a:	e7f8      	b.n	800753e <_calloc_r+0x16>
 800754c:	4621      	mov	r1, r4
 800754e:	f7fe fa03 	bl	8005958 <memset>
 8007552:	e7f4      	b.n	800753e <_calloc_r+0x16>

08007554 <__ascii_mbtowc>:
 8007554:	b082      	sub	sp, #8
 8007556:	b901      	cbnz	r1, 800755a <__ascii_mbtowc+0x6>
 8007558:	a901      	add	r1, sp, #4
 800755a:	b142      	cbz	r2, 800756e <__ascii_mbtowc+0x1a>
 800755c:	b14b      	cbz	r3, 8007572 <__ascii_mbtowc+0x1e>
 800755e:	7813      	ldrb	r3, [r2, #0]
 8007560:	600b      	str	r3, [r1, #0]
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	1e10      	subs	r0, r2, #0
 8007566:	bf18      	it	ne
 8007568:	2001      	movne	r0, #1
 800756a:	b002      	add	sp, #8
 800756c:	4770      	bx	lr
 800756e:	4610      	mov	r0, r2
 8007570:	e7fb      	b.n	800756a <__ascii_mbtowc+0x16>
 8007572:	f06f 0001 	mvn.w	r0, #1
 8007576:	e7f8      	b.n	800756a <__ascii_mbtowc+0x16>

08007578 <_realloc_r>:
 8007578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	4680      	mov	r8, r0
 800757e:	4614      	mov	r4, r2
 8007580:	460e      	mov	r6, r1
 8007582:	b921      	cbnz	r1, 800758e <_realloc_r+0x16>
 8007584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	4611      	mov	r1, r2
 800758a:	f7ff b977 	b.w	800687c <_malloc_r>
 800758e:	b92a      	cbnz	r2, 800759c <_realloc_r+0x24>
 8007590:	f7ff f900 	bl	8006794 <_free_r>
 8007594:	4625      	mov	r5, r4
 8007596:	4628      	mov	r0, r5
 8007598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800759c:	f000 f841 	bl	8007622 <_malloc_usable_size_r>
 80075a0:	4284      	cmp	r4, r0
 80075a2:	4607      	mov	r7, r0
 80075a4:	d802      	bhi.n	80075ac <_realloc_r+0x34>
 80075a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075aa:	d812      	bhi.n	80075d2 <_realloc_r+0x5a>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4640      	mov	r0, r8
 80075b0:	f7ff f964 	bl	800687c <_malloc_r>
 80075b4:	4605      	mov	r5, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d0ed      	beq.n	8007596 <_realloc_r+0x1e>
 80075ba:	42bc      	cmp	r4, r7
 80075bc:	4622      	mov	r2, r4
 80075be:	4631      	mov	r1, r6
 80075c0:	bf28      	it	cs
 80075c2:	463a      	movcs	r2, r7
 80075c4:	f7fe fa5b 	bl	8005a7e <memcpy>
 80075c8:	4631      	mov	r1, r6
 80075ca:	4640      	mov	r0, r8
 80075cc:	f7ff f8e2 	bl	8006794 <_free_r>
 80075d0:	e7e1      	b.n	8007596 <_realloc_r+0x1e>
 80075d2:	4635      	mov	r5, r6
 80075d4:	e7df      	b.n	8007596 <_realloc_r+0x1e>

080075d6 <__ascii_wctomb>:
 80075d6:	b149      	cbz	r1, 80075ec <__ascii_wctomb+0x16>
 80075d8:	2aff      	cmp	r2, #255	; 0xff
 80075da:	bf85      	ittet	hi
 80075dc:	238a      	movhi	r3, #138	; 0x8a
 80075de:	6003      	strhi	r3, [r0, #0]
 80075e0:	700a      	strbls	r2, [r1, #0]
 80075e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80075e6:	bf98      	it	ls
 80075e8:	2001      	movls	r0, #1
 80075ea:	4770      	bx	lr
 80075ec:	4608      	mov	r0, r1
 80075ee:	4770      	bx	lr

080075f0 <fiprintf>:
 80075f0:	b40e      	push	{r1, r2, r3}
 80075f2:	b503      	push	{r0, r1, lr}
 80075f4:	4601      	mov	r1, r0
 80075f6:	ab03      	add	r3, sp, #12
 80075f8:	4805      	ldr	r0, [pc, #20]	; (8007610 <fiprintf+0x20>)
 80075fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fe:	6800      	ldr	r0, [r0, #0]
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	f000 f83f 	bl	8007684 <_vfiprintf_r>
 8007606:	b002      	add	sp, #8
 8007608:	f85d eb04 	ldr.w	lr, [sp], #4
 800760c:	b003      	add	sp, #12
 800760e:	4770      	bx	lr
 8007610:	20000078 	.word	0x20000078

08007614 <abort>:
 8007614:	b508      	push	{r3, lr}
 8007616:	2006      	movs	r0, #6
 8007618:	f000 fa0c 	bl	8007a34 <raise>
 800761c:	2001      	movs	r0, #1
 800761e:	f7fa ff2f 	bl	8002480 <_exit>

08007622 <_malloc_usable_size_r>:
 8007622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007626:	1f18      	subs	r0, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	bfbc      	itt	lt
 800762c:	580b      	ldrlt	r3, [r1, r0]
 800762e:	18c0      	addlt	r0, r0, r3
 8007630:	4770      	bx	lr

08007632 <__sfputc_r>:
 8007632:	6893      	ldr	r3, [r2, #8]
 8007634:	3b01      	subs	r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	b410      	push	{r4}
 800763a:	6093      	str	r3, [r2, #8]
 800763c:	da08      	bge.n	8007650 <__sfputc_r+0x1e>
 800763e:	6994      	ldr	r4, [r2, #24]
 8007640:	42a3      	cmp	r3, r4
 8007642:	db01      	blt.n	8007648 <__sfputc_r+0x16>
 8007644:	290a      	cmp	r1, #10
 8007646:	d103      	bne.n	8007650 <__sfputc_r+0x1e>
 8007648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800764c:	f000 b934 	b.w	80078b8 <__swbuf_r>
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	1c58      	adds	r0, r3, #1
 8007654:	6010      	str	r0, [r2, #0]
 8007656:	7019      	strb	r1, [r3, #0]
 8007658:	4608      	mov	r0, r1
 800765a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800765e:	4770      	bx	lr

08007660 <__sfputs_r>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	4614      	mov	r4, r2
 8007668:	18d5      	adds	r5, r2, r3
 800766a:	42ac      	cmp	r4, r5
 800766c:	d101      	bne.n	8007672 <__sfputs_r+0x12>
 800766e:	2000      	movs	r0, #0
 8007670:	e007      	b.n	8007682 <__sfputs_r+0x22>
 8007672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007676:	463a      	mov	r2, r7
 8007678:	4630      	mov	r0, r6
 800767a:	f7ff ffda 	bl	8007632 <__sfputc_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d1f3      	bne.n	800766a <__sfputs_r+0xa>
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007684 <_vfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	460d      	mov	r5, r1
 800768a:	b09d      	sub	sp, #116	; 0x74
 800768c:	4614      	mov	r4, r2
 800768e:	4698      	mov	r8, r3
 8007690:	4606      	mov	r6, r0
 8007692:	b118      	cbz	r0, 800769c <_vfiprintf_r+0x18>
 8007694:	6a03      	ldr	r3, [r0, #32]
 8007696:	b90b      	cbnz	r3, 800769c <_vfiprintf_r+0x18>
 8007698:	f7fe f8a4 	bl	80057e4 <__sinit>
 800769c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x2a>
 80076a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076aa:	f7fe f9e6 	bl	8005a7a <__retarget_lock_acquire_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	d501      	bpl.n	80076b8 <_vfiprintf_r+0x34>
 80076b4:	692b      	ldr	r3, [r5, #16]
 80076b6:	b99b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x5c>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 f93a 	bl	8007934 <__swsetup_r>
 80076c0:	b170      	cbz	r0, 80076e0 <_vfiprintf_r+0x5c>
 80076c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c4:	07dc      	lsls	r4, r3, #31
 80076c6:	d504      	bpl.n	80076d2 <_vfiprintf_r+0x4e>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b01d      	add	sp, #116	; 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	0598      	lsls	r0, r3, #22
 80076d6:	d4f7      	bmi.n	80076c8 <_vfiprintf_r+0x44>
 80076d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076da:	f7fe f9cf 	bl	8005a7c <__retarget_lock_release_recursive>
 80076de:	e7f3      	b.n	80076c8 <_vfiprintf_r+0x44>
 80076e0:	2300      	movs	r3, #0
 80076e2:	9309      	str	r3, [sp, #36]	; 0x24
 80076e4:	2320      	movs	r3, #32
 80076e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ee:	2330      	movs	r3, #48	; 0x30
 80076f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078a4 <_vfiprintf_r+0x220>
 80076f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076f8:	f04f 0901 	mov.w	r9, #1
 80076fc:	4623      	mov	r3, r4
 80076fe:	469a      	mov	sl, r3
 8007700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007704:	b10a      	cbz	r2, 800770a <_vfiprintf_r+0x86>
 8007706:	2a25      	cmp	r2, #37	; 0x25
 8007708:	d1f9      	bne.n	80076fe <_vfiprintf_r+0x7a>
 800770a:	ebba 0b04 	subs.w	fp, sl, r4
 800770e:	d00b      	beq.n	8007728 <_vfiprintf_r+0xa4>
 8007710:	465b      	mov	r3, fp
 8007712:	4622      	mov	r2, r4
 8007714:	4629      	mov	r1, r5
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ffa2 	bl	8007660 <__sfputs_r>
 800771c:	3001      	adds	r0, #1
 800771e:	f000 80a9 	beq.w	8007874 <_vfiprintf_r+0x1f0>
 8007722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007724:	445a      	add	r2, fp
 8007726:	9209      	str	r2, [sp, #36]	; 0x24
 8007728:	f89a 3000 	ldrb.w	r3, [sl]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a1 	beq.w	8007874 <_vfiprintf_r+0x1f0>
 8007732:	2300      	movs	r3, #0
 8007734:	f04f 32ff 	mov.w	r2, #4294967295
 8007738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773c:	f10a 0a01 	add.w	sl, sl, #1
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007748:	931a      	str	r3, [sp, #104]	; 0x68
 800774a:	4654      	mov	r4, sl
 800774c:	2205      	movs	r2, #5
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	4854      	ldr	r0, [pc, #336]	; (80078a4 <_vfiprintf_r+0x220>)
 8007754:	f7f8 fd6c 	bl	8000230 <memchr>
 8007758:	9a04      	ldr	r2, [sp, #16]
 800775a:	b9d8      	cbnz	r0, 8007794 <_vfiprintf_r+0x110>
 800775c:	06d1      	lsls	r1, r2, #27
 800775e:	bf44      	itt	mi
 8007760:	2320      	movmi	r3, #32
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007766:	0713      	lsls	r3, r2, #28
 8007768:	bf44      	itt	mi
 800776a:	232b      	movmi	r3, #43	; 0x2b
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007770:	f89a 3000 	ldrb.w	r3, [sl]
 8007774:	2b2a      	cmp	r3, #42	; 0x2a
 8007776:	d015      	beq.n	80077a4 <_vfiprintf_r+0x120>
 8007778:	9a07      	ldr	r2, [sp, #28]
 800777a:	4654      	mov	r4, sl
 800777c:	2000      	movs	r0, #0
 800777e:	f04f 0c0a 	mov.w	ip, #10
 8007782:	4621      	mov	r1, r4
 8007784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007788:	3b30      	subs	r3, #48	; 0x30
 800778a:	2b09      	cmp	r3, #9
 800778c:	d94d      	bls.n	800782a <_vfiprintf_r+0x1a6>
 800778e:	b1b0      	cbz	r0, 80077be <_vfiprintf_r+0x13a>
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	e014      	b.n	80077be <_vfiprintf_r+0x13a>
 8007794:	eba0 0308 	sub.w	r3, r0, r8
 8007798:	fa09 f303 	lsl.w	r3, r9, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	46a2      	mov	sl, r4
 80077a2:	e7d2      	b.n	800774a <_vfiprintf_r+0xc6>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	1d19      	adds	r1, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbb      	ittet	lt
 80077b0:	425b      	neglt	r3, r3
 80077b2:	f042 0202 	orrlt.w	r2, r2, #2
 80077b6:	9307      	strge	r3, [sp, #28]
 80077b8:	9307      	strlt	r3, [sp, #28]
 80077ba:	bfb8      	it	lt
 80077bc:	9204      	strlt	r2, [sp, #16]
 80077be:	7823      	ldrb	r3, [r4, #0]
 80077c0:	2b2e      	cmp	r3, #46	; 0x2e
 80077c2:	d10c      	bne.n	80077de <_vfiprintf_r+0x15a>
 80077c4:	7863      	ldrb	r3, [r4, #1]
 80077c6:	2b2a      	cmp	r3, #42	; 0x2a
 80077c8:	d134      	bne.n	8007834 <_vfiprintf_r+0x1b0>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9203      	str	r2, [sp, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfb8      	it	lt
 80077d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077da:	3402      	adds	r4, #2
 80077dc:	9305      	str	r3, [sp, #20]
 80077de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078b4 <_vfiprintf_r+0x230>
 80077e2:	7821      	ldrb	r1, [r4, #0]
 80077e4:	2203      	movs	r2, #3
 80077e6:	4650      	mov	r0, sl
 80077e8:	f7f8 fd22 	bl	8000230 <memchr>
 80077ec:	b138      	cbz	r0, 80077fe <_vfiprintf_r+0x17a>
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	eba0 000a 	sub.w	r0, r0, sl
 80077f4:	2240      	movs	r2, #64	; 0x40
 80077f6:	4082      	lsls	r2, r0
 80077f8:	4313      	orrs	r3, r2
 80077fa:	3401      	adds	r4, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007802:	4829      	ldr	r0, [pc, #164]	; (80078a8 <_vfiprintf_r+0x224>)
 8007804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007808:	2206      	movs	r2, #6
 800780a:	f7f8 fd11 	bl	8000230 <memchr>
 800780e:	2800      	cmp	r0, #0
 8007810:	d03f      	beq.n	8007892 <_vfiprintf_r+0x20e>
 8007812:	4b26      	ldr	r3, [pc, #152]	; (80078ac <_vfiprintf_r+0x228>)
 8007814:	bb1b      	cbnz	r3, 800785e <_vfiprintf_r+0x1da>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	3308      	adds	r3, #8
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	443b      	add	r3, r7
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	e768      	b.n	80076fc <_vfiprintf_r+0x78>
 800782a:	fb0c 3202 	mla	r2, ip, r2, r3
 800782e:	460c      	mov	r4, r1
 8007830:	2001      	movs	r0, #1
 8007832:	e7a6      	b.n	8007782 <_vfiprintf_r+0xfe>
 8007834:	2300      	movs	r3, #0
 8007836:	3401      	adds	r4, #1
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	f04f 0c0a 	mov.w	ip, #10
 8007840:	4620      	mov	r0, r4
 8007842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007846:	3a30      	subs	r2, #48	; 0x30
 8007848:	2a09      	cmp	r2, #9
 800784a:	d903      	bls.n	8007854 <_vfiprintf_r+0x1d0>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0c6      	beq.n	80077de <_vfiprintf_r+0x15a>
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	e7c4      	b.n	80077de <_vfiprintf_r+0x15a>
 8007854:	fb0c 2101 	mla	r1, ip, r1, r2
 8007858:	4604      	mov	r4, r0
 800785a:	2301      	movs	r3, #1
 800785c:	e7f0      	b.n	8007840 <_vfiprintf_r+0x1bc>
 800785e:	ab03      	add	r3, sp, #12
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	462a      	mov	r2, r5
 8007864:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <_vfiprintf_r+0x22c>)
 8007866:	a904      	add	r1, sp, #16
 8007868:	4630      	mov	r0, r6
 800786a:	f7fd fb69 	bl	8004f40 <_printf_float>
 800786e:	4607      	mov	r7, r0
 8007870:	1c78      	adds	r0, r7, #1
 8007872:	d1d6      	bne.n	8007822 <_vfiprintf_r+0x19e>
 8007874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	d405      	bmi.n	8007886 <_vfiprintf_r+0x202>
 800787a:	89ab      	ldrh	r3, [r5, #12]
 800787c:	059a      	lsls	r2, r3, #22
 800787e:	d402      	bmi.n	8007886 <_vfiprintf_r+0x202>
 8007880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007882:	f7fe f8fb 	bl	8005a7c <__retarget_lock_release_recursive>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	065b      	lsls	r3, r3, #25
 800788a:	f53f af1d 	bmi.w	80076c8 <_vfiprintf_r+0x44>
 800788e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007890:	e71c      	b.n	80076cc <_vfiprintf_r+0x48>
 8007892:	ab03      	add	r3, sp, #12
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	462a      	mov	r2, r5
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <_vfiprintf_r+0x22c>)
 800789a:	a904      	add	r1, sp, #16
 800789c:	4630      	mov	r0, r6
 800789e:	f7fd fdf3 	bl	8005488 <_printf_i>
 80078a2:	e7e4      	b.n	800786e <_vfiprintf_r+0x1ea>
 80078a4:	08008074 	.word	0x08008074
 80078a8:	0800807e 	.word	0x0800807e
 80078ac:	08004f41 	.word	0x08004f41
 80078b0:	08007661 	.word	0x08007661
 80078b4:	0800807a 	.word	0x0800807a

080078b8 <__swbuf_r>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	460e      	mov	r6, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	4605      	mov	r5, r0
 80078c0:	b118      	cbz	r0, 80078ca <__swbuf_r+0x12>
 80078c2:	6a03      	ldr	r3, [r0, #32]
 80078c4:	b90b      	cbnz	r3, 80078ca <__swbuf_r+0x12>
 80078c6:	f7fd ff8d 	bl	80057e4 <__sinit>
 80078ca:	69a3      	ldr	r3, [r4, #24]
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	071a      	lsls	r2, r3, #28
 80078d2:	d525      	bpl.n	8007920 <__swbuf_r+0x68>
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	b31b      	cbz	r3, 8007920 <__swbuf_r+0x68>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	1a98      	subs	r0, r3, r2
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	b2f6      	uxtb	r6, r6
 80078e2:	4283      	cmp	r3, r0
 80078e4:	4637      	mov	r7, r6
 80078e6:	dc04      	bgt.n	80078f2 <__swbuf_r+0x3a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7ff fdac 	bl	8007448 <_fflush_r>
 80078f0:	b9e0      	cbnz	r0, 800792c <__swbuf_r+0x74>
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	701e      	strb	r6, [r3, #0]
 8007900:	6962      	ldr	r2, [r4, #20]
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	429a      	cmp	r2, r3
 8007906:	d004      	beq.n	8007912 <__swbuf_r+0x5a>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	07db      	lsls	r3, r3, #31
 800790c:	d506      	bpl.n	800791c <__swbuf_r+0x64>
 800790e:	2e0a      	cmp	r6, #10
 8007910:	d104      	bne.n	800791c <__swbuf_r+0x64>
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f7ff fd97 	bl	8007448 <_fflush_r>
 800791a:	b938      	cbnz	r0, 800792c <__swbuf_r+0x74>
 800791c:	4638      	mov	r0, r7
 800791e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007920:	4621      	mov	r1, r4
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f806 	bl	8007934 <__swsetup_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	d0d5      	beq.n	80078d8 <__swbuf_r+0x20>
 800792c:	f04f 37ff 	mov.w	r7, #4294967295
 8007930:	e7f4      	b.n	800791c <__swbuf_r+0x64>
	...

08007934 <__swsetup_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <__swsetup_r+0xac>)
 8007938:	4605      	mov	r5, r0
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	460c      	mov	r4, r1
 800793e:	b118      	cbz	r0, 8007948 <__swsetup_r+0x14>
 8007940:	6a03      	ldr	r3, [r0, #32]
 8007942:	b90b      	cbnz	r3, 8007948 <__swsetup_r+0x14>
 8007944:	f7fd ff4e 	bl	80057e4 <__sinit>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800794e:	0718      	lsls	r0, r3, #28
 8007950:	d422      	bmi.n	8007998 <__swsetup_r+0x64>
 8007952:	06d9      	lsls	r1, r3, #27
 8007954:	d407      	bmi.n	8007966 <__swsetup_r+0x32>
 8007956:	2309      	movs	r3, #9
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e034      	b.n	80079d0 <__swsetup_r+0x9c>
 8007966:	0758      	lsls	r0, r3, #29
 8007968:	d512      	bpl.n	8007990 <__swsetup_r+0x5c>
 800796a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800796c:	b141      	cbz	r1, 8007980 <__swsetup_r+0x4c>
 800796e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007972:	4299      	cmp	r1, r3
 8007974:	d002      	beq.n	800797c <__swsetup_r+0x48>
 8007976:	4628      	mov	r0, r5
 8007978:	f7fe ff0c 	bl	8006794 <_free_r>
 800797c:	2300      	movs	r3, #0
 800797e:	6363      	str	r3, [r4, #52]	; 0x34
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	2300      	movs	r3, #0
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f043 0308 	orr.w	r3, r3, #8
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	6923      	ldr	r3, [r4, #16]
 800799a:	b94b      	cbnz	r3, 80079b0 <__swsetup_r+0x7c>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a6:	d003      	beq.n	80079b0 <__swsetup_r+0x7c>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 f884 	bl	8007ab8 <__smakebuf_r>
 80079b0:	89a0      	ldrh	r0, [r4, #12]
 80079b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079b6:	f010 0301 	ands.w	r3, r0, #1
 80079ba:	d00a      	beq.n	80079d2 <__swsetup_r+0x9e>
 80079bc:	2300      	movs	r3, #0
 80079be:	60a3      	str	r3, [r4, #8]
 80079c0:	6963      	ldr	r3, [r4, #20]
 80079c2:	425b      	negs	r3, r3
 80079c4:	61a3      	str	r3, [r4, #24]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	b943      	cbnz	r3, 80079dc <__swsetup_r+0xa8>
 80079ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ce:	d1c4      	bne.n	800795a <__swsetup_r+0x26>
 80079d0:	bd38      	pop	{r3, r4, r5, pc}
 80079d2:	0781      	lsls	r1, r0, #30
 80079d4:	bf58      	it	pl
 80079d6:	6963      	ldrpl	r3, [r4, #20]
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	e7f4      	b.n	80079c6 <__swsetup_r+0x92>
 80079dc:	2000      	movs	r0, #0
 80079de:	e7f7      	b.n	80079d0 <__swsetup_r+0x9c>
 80079e0:	20000078 	.word	0x20000078

080079e4 <_raise_r>:
 80079e4:	291f      	cmp	r1, #31
 80079e6:	b538      	push	{r3, r4, r5, lr}
 80079e8:	4604      	mov	r4, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	d904      	bls.n	80079f8 <_raise_r+0x14>
 80079ee:	2316      	movs	r3, #22
 80079f0:	6003      	str	r3, [r0, #0]
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80079fa:	b112      	cbz	r2, 8007a02 <_raise_r+0x1e>
 80079fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a00:	b94b      	cbnz	r3, 8007a16 <_raise_r+0x32>
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 f830 	bl	8007a68 <_getpid_r>
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a12:	f000 b817 	b.w	8007a44 <_kill_r>
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d00a      	beq.n	8007a30 <_raise_r+0x4c>
 8007a1a:	1c59      	adds	r1, r3, #1
 8007a1c:	d103      	bne.n	8007a26 <_raise_r+0x42>
 8007a1e:	2316      	movs	r3, #22
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7e7      	b.n	80079f6 <_raise_r+0x12>
 8007a26:	2400      	movs	r4, #0
 8007a28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	4798      	blx	r3
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7e0      	b.n	80079f6 <_raise_r+0x12>

08007a34 <raise>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <raise+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f7ff bfd3 	b.w	80079e4 <_raise_r>
 8007a3e:	bf00      	nop
 8007a40:	20000078 	.word	0x20000078

08007a44 <_kill_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	; (8007a64 <_kill_r+0x20>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7fa fd05 	bl	8002460 <_kill>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_kill_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_kill_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	20000844 	.word	0x20000844

08007a68 <_getpid_r>:
 8007a68:	f7fa bcf2 	b.w	8002450 <_getpid>

08007a6c <__swhatbuf_r>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a74:	2900      	cmp	r1, #0
 8007a76:	b096      	sub	sp, #88	; 0x58
 8007a78:	4615      	mov	r5, r2
 8007a7a:	461e      	mov	r6, r3
 8007a7c:	da0d      	bge.n	8007a9a <__swhatbuf_r+0x2e>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	bf0c      	ite	eq
 8007a8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a8e:	2340      	movne	r3, #64	; 0x40
 8007a90:	2000      	movs	r0, #0
 8007a92:	6031      	str	r1, [r6, #0]
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	b016      	add	sp, #88	; 0x58
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	f000 f848 	bl	8007b30 <_fstat_r>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dbec      	blt.n	8007a7e <__swhatbuf_r+0x12>
 8007aa4:	9901      	ldr	r1, [sp, #4]
 8007aa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007aaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007aae:	4259      	negs	r1, r3
 8007ab0:	4159      	adcs	r1, r3
 8007ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab6:	e7eb      	b.n	8007a90 <__swhatbuf_r+0x24>

08007ab8 <__smakebuf_r>:
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007abc:	079d      	lsls	r5, r3, #30
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	d507      	bpl.n	8007ad4 <__smakebuf_r+0x1c>
 8007ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2301      	movs	r3, #1
 8007ace:	6163      	str	r3, [r4, #20]
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	ab01      	add	r3, sp, #4
 8007ad6:	466a      	mov	r2, sp
 8007ad8:	f7ff ffc8 	bl	8007a6c <__swhatbuf_r>
 8007adc:	9900      	ldr	r1, [sp, #0]
 8007ade:	4605      	mov	r5, r0
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7fe fecb 	bl	800687c <_malloc_r>
 8007ae6:	b948      	cbnz	r0, 8007afc <__smakebuf_r+0x44>
 8007ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aec:	059a      	lsls	r2, r3, #22
 8007aee:	d4ef      	bmi.n	8007ad0 <__smakebuf_r+0x18>
 8007af0:	f023 0303 	bic.w	r3, r3, #3
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	e7e3      	b.n	8007ac4 <__smakebuf_r+0xc>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	6020      	str	r0, [r4, #0]
 8007b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	6163      	str	r3, [r4, #20]
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	6120      	str	r0, [r4, #16]
 8007b0e:	b15b      	cbz	r3, 8007b28 <__smakebuf_r+0x70>
 8007b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b14:	4630      	mov	r0, r6
 8007b16:	f000 f81d 	bl	8007b54 <_isatty_r>
 8007b1a:	b128      	cbz	r0, 8007b28 <__smakebuf_r+0x70>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	431d      	orrs	r5, r3
 8007b2c:	81a5      	strh	r5, [r4, #12]
 8007b2e:	e7cf      	b.n	8007ad0 <__smakebuf_r+0x18>

08007b30 <_fstat_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	; (8007b50 <_fstat_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7fa fcee 	bl	800251e <_fstat>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_fstat_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_fstat_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000844 	.word	0x20000844

08007b54 <_isatty_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_isatty_r+0x1c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	f7fa fced 	bl	800253e <_isatty>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_isatty_r+0x1a>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_isatty_r+0x1a>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	20000844 	.word	0x20000844

08007b74 <_init>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

08007b80 <_fini>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr
